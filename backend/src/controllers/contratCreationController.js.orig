const bd = require('../servers/bd')
const { Service } = require('../models/service')

//-----------------------------------------------------------------------------------------------------------------------------

//la fonction appelee par la route ajout de contrat
function contratCreation(req, res) {
    // ***************  ajout de la facture  ****************
    ajoutFacture(req)
        .then(resultatRequeteFacture => {

            // ***************  ajout du contrat  ****************
            ajoutContrat(req, resultatRequeteFacture.rows[0].id)
                .then(resultatRequeteContrat => {

                    // ***************  ajout du contrat_utilisateur  ****************
                    ajoutContratUtilisateur(req, resultatRequeteContrat.rows[0].id)
                        .then(resultatRequeteContratUtilisateur => {

                            // ***************  ajout du promotion_utilisateur  ****************
                            ajoutPromotionUtilisateur(req)
                                .then(resultatRequetePromotionUtilisateur => {

                                    // ***************  ajout du planning  ****************
                                    ajoutPlanning(req, resultatRequeteContrat.rows[0].id)
                                        .then(resultatRequetePlanning => {

                                            // ***************  ajout des service_contrat  ****************
                                            ajoutServiceContrat(req, resultatRequeteContrat.rows[0].id)
                                                .then(resultatRequeteServiceContrat => {
                                                    res.setHeader('Content-Type', 'application/json');
                                                    res.end(JSON.stringify({}))
                                                })
                                                .catch(erreur => {
                                                    console.error(erreur.stack)
                                                    res.setHeader('Content-Type', 'text/html')
                                                    res.end(erreur.stack)
                                                })
                                        })
                                        .catch(erreur => {
                                            console.error(erreur.stack)
                                            res.setHeader('Content-Type', 'text/html')
                                            res.end(erreur.stack)
                                        })

                                })
                                .catch(erreur => {
                                    console.error(erreur.stack)
                                    res.setHeader('Content-Type', 'text/html')
                                    res.end(erreur.stack)
                                })

                        })
                        .catch(erreur => {
                            console.error(erreur.stack)
                            res.setHeader('Content-Type', 'text/html')
                            res.end(erreur.stack)
                        })

                })
                .catch(erreur => {
                    console.error(erreur.stack)
                    res.setHeader('Content-Type', 'text/html')
                    res.end(erreur.stack)
                })

        })
        .catch(erreur => {
            console.error(erreur.stack)
            res.setHeader('Content-Type', 'text/html')
            res.end(erreur.stack)
        })
}

function ajoutFacture(req) {
    return new Promise((resolve, reject) => {
        let sql = "INSERT INTO facture (id_promotion, prix) VALUES ($1,$2) RETURNING *"

        bd.excuterRequete(sql, [req.body.promotion.id_promotion, req.body.facture.prix])
            .then(resultatRequeteFacture => {
                if (resultatRequeteFacture.rowCount >= 1) {
                    resolve(resultatRequeteFacture)
                } else {
                    reject({ "erreur": 400 })
                }
            })
            .catch(erreur => {
                reject(erreur)
            })
    })
}

function ajoutContrat(req, id_facture) {
    return new Promise((resolve, reject) => {

        let sql = "INSERT INTO contrat (id_facture, date_debut, date_fin) VALUES ($1,$2,$3) RETURNING *"

        bd.excuterRequete(sql, [id_facture, req.body.contrat.date_debut, req.body.contrat.date_fin])
            .then(resultatRequeteContrat => {
                if (resultatRequeteContrat.rowCount >= 1) {
                    resolve(resultatRequeteContrat)
                } else {
                    reject({ "erreur": 400 })
                }
            })
            .catch(erreur => {
                reject(erreur)
            })
    })
}

/* creer la bonne requete selon le json a envoyer*/

let sql = "select * from contrat where id = $1"

bd.excuterRequete(sql, [req.body.id])
    .then(resultatRequete => {
        res.setHeader('Content-Type', 'application/json')
        res.end(JSON.stringify(resultatRequete.rows))
    })
    .catch(erreur => {
        console.error(erreur.stack)
        res.setHeader('Content-Type', 'text/html')
        res.end(erreur.stack)
    })

//enlever la derniere virgule de la requete sql
sql = sql.substring(0, sql.length - 1);

bd.excuterRequete(sql, sqlValeur)
    .then(resultatRequeteServiceContrat => {
        if (resultatRequeteServiceContrat.rowCount >= 1) {
            resolve(resultatRequeteServiceContrat)
        } else {
            reject({ "erreur": 400 })
        }
    })
    .catch(erreur => {
        reject(erreur)
    })
        }) 
}



module.exports = {
    contratCreation
}