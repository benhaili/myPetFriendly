!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=86)}([function(e,t,n){"use strict";e.exports=n(46)},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){e.exports=n(67)()},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var a=typeof r;if("string"===a||"number"===a)e.push(r);else if(Array.isArray(r)&&r.length){var i=o.apply(null,r);i&&e.push(i)}else if("object"===a)for(var l in r)n.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){e.exports=n(50)},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(c," */")),a=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([o]).join("\n")}var i,l,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));var r=n(0);var o=function(e){var t=Object(r.useRef)(e);return Object(r.useEffect)((function(){t.current=e}),[e]),t};function a(e){var t=o(e);return Object(r.useCallback)((function(){return t.current&&t.current.apply(t,arguments)}),[t])}},function(e,t,n){"use strict";var r=n(28),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function l(e){return null!==e&&"object"==typeof e}function c(e){return"[object Function]"===o.call(e)}function u(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:c,isStream:function(e){return l(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:u,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)u(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,o=arguments.length;r<o;r++)u(arguments[r],n);return t},extend:function(e,t,n){return u(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";t.a=!("undefined"==typeof window||!window.document||!window.document.createElement)},,function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(47)},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function l(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],o=0;o<e.length;o++){var a=e[o],c=t.base?a[0]+t.base:a[0],u=n[c]||0,s="".concat(c," ").concat(u);n[c]=u+1;var f=l(s),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:s,updater:v(d,t),references:1}),r.push(s)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function p(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,h=0;function v(e,t){var n,r,o;if(t.singleton){var a=h++;n=m||(m=u(t)),r=d.bind(null,n,a,!1),o=d.bind(null,n,a,!0)}else n=u(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=l(n[r]);i[o].references--}for(var a=c(e,t),u=0;u<n.length;u++){var s=l(n[u]);0===i[s].references&&(i[s].updater(),i.splice(s,1))}n=a}}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=Function.prototype.bind.call(Function.prototype.call,[].slice);function o(e,t){return r(e.querySelectorAll(t))}},function(e,t,n){"use strict";var r=n(19),o=n(17);t.a=function(e,t,n,a){return Object(r.a)(e,t,n,a),function(){Object(o.a)(e,t,n,a)}}},function(e,t,n){"use strict";t.a=function(e,t,n,r){var o=r&&"boolean"!=typeof r?r.capture:r;e.removeEventListener(t,n,o),n.__once&&e.removeEventListener(t,n.__once,o)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0);function o(){var e=Object(r.useRef)(!0),t=Object(r.useRef)((function(){return e.current}));return Object(r.useEffect)((function(){return function(){e.current=!1}}),[]),t.current}},function(e,t,n){"use strict";var r=n(11),o=!1,a=!1;try{var i={get passive(){return o=!0},get once(){return a=o=!0}};r.a&&(window.addEventListener("test",i,i),window.removeEventListener("test",i,!0))}catch(e){}t.a=function(e,t,n,r){if(r&&"boolean"!=typeof r&&!a){var i=r.once,l=r.capture,c=n;!a&&i&&(c=n.__once||function e(r){this.removeEventListener(t,e,l),n.call(this,r)},n.__once=c),e.addEventListener(t,c,o?r:l)}e.addEventListener(t,n,r)}},,function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,l){if(!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,a,i,l],s=0;(c=new Error(t.replace(/%s/g,(function(){return u[s++]})))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t){e.exports=n(0)},function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return f}));var r=n(0),o=n.n(r);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n(2);var f=function(e){function t(e){var n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this,r=l(t).call(this,e),n=!r||"object"!==a(r)&&"function"!=typeof r?c(this):r,s(c(n),"toggle",(function(e){n.state.checked?n.off():n.on()})),s(c(n),"off",(function(){n.state.disabled||(n.setState({checked:!1}),n.props.onChange&&n.props.onChange(!1))})),s(c(n),"on",(function(){n.state.disabled||(n.setState({checked:!0}),n.props.onChange&&n.props.onChange(!0))})),s(c(n),"enable",(function(){n.setState({disabled:!1})})),s(c(n),"disable",(function(){n.setState({disabled:!0})})),s(c(n),"render",(function(){var e={};n.state.width&&(e.width=n.state.width+"px"),n.state.height&&(e.height=n.state.height+"px");var t={};return n.state.height&&(t.lineHeight="calc("+n.state.height+"px * 0.8)"),o.a.createElement("div",{className:"switch btn "+(n.state.checked?"on btn-"+n.state.onstyle:"off btn-"+n.state.offstyle)+(n.state.size?" btn-"+n.state.size:"")+(n.state.style?" "+n.state.style:""),style:e,onClick:n.toggle},o.a.createElement("div",{className:"switch-group"},o.a.createElement("span",{className:"switch-on btn btn-"+n.state.onstyle+(n.state.size?" btn-"+n.state.size:""),style:t},n.state.onlabel),o.a.createElement("span",{className:"switch-off btn btn-"+n.state.offstyle+(n.state.size?" btn-"+n.state.size:""),style:t},n.state.offlabel),o.a.createElement("span",{className:"switch-handle btn btn-light"+(n.state.size?"btn-"+n.state.size:"")})))})),n.state={checked:"boolean"==typeof n.props.checked&&n.props.checked,disabled:"boolean"==typeof n.props.disabled&&n.props.disabled,onlabel:n.props.onlabel||"On",offlabel:n.props.offlabel||"Off",onstyle:n.props.onstyle||"primary",offstyle:n.props.offstyle||"light",size:n.props.size||"",style:n.props.style||"",width:n.props.width||null,height:n.props.height||null},n}var n,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,e),n=t,(r=[{key:"componentDidUpdate",value:function(e,t){var n=this.props.checked;"boolean"==typeof n&&n!==t.checked&&this.setState({checked:n})}}])&&i(n.prototype,r),t}(o.a.Component)},function(e,t,n){var r=n(3);"string"==typeof r&&(r=[[e.i,r,""]]);n(5)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,'/*\\\n|*|  :: Bootstrap Switch Button ::\n|*|\n|*|  Bootstrap Switch Button (React)\n|*|  https://github.com/gitbrent/bootstrap-switch-button-react\n|*|\n|*|  This library is released under the MIT Public License (MIT)\n|*|\n|*|  Bootstrap Switch Button (C) 2019-present Brent Ely (https://github.com/gitbrent)\n|*|\n|*|  Permission is hereby granted, free of charge, to any person obtaining a copy\n|*|  of this software and associated documentation files (the "Software"), to deal\n|*|  in the Software without restriction, including without limitation the rights\n|*|  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n|*|  copies of the Software, and to permit persons to whom the Software is\n|*|  furnished to do so, subject to the following conditions:\n|*|\n|*|  The above copyright notice and this permission notice shall be included in all\n|*|  copies or substantial portions of the Software.\n|*|\n|*|  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n|*|  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n|*|  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n|*|  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n|*|  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n|*|  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n|*|  SOFTWARE.\n\\*/\n\n.btn-group-xs > .btn, .btn-xs {\n\tpadding: .35rem .4rem .25rem .4rem;\n\tfont-size: .875rem;\n\tline-height: .5;\n\tborder-radius: .2rem;\n}\n\n.switch {\n\tposition: relative;\n\toverflow: hidden;\n}\n.switch.btn.btn-light, .switch.btn.btn-outline-light {\n\tborder-color: rgba(0, 0, 0, .15); /* Add a border so switch is delineated */\n}\n.switch input[type="checkbox"] {\n\tdisplay: none;\n}\n.switch-group {\n\tposition: absolute;\n\twidth: 200%;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 0;\n\ttransition: left 0.35s;\n\t-webkit-transition: left 0.35s;\n\t-moz-user-select: none;\n\t-webkit-user-select: none;\n}\n.switch.off .switch-group {\n\tleft: -100%;\n}\n.switch-on {\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 0;\n\tright: 50%;\n\tmargin: 0;\n\tborder: 0;\n\tborder-radius: 0;\n}\n.switch-off {\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 50%;\n\tright: 0;\n\tmargin: 0;\n\tborder: 0;\n\tborder-radius: 0;\n\tbox-shadow: none;\n}\n.switch-handle {\n\tposition: relative;\n\tmargin: 0 auto;\n\tpadding-top: 0px;\n\tpadding-bottom: 0px;\n\theight: 100%;\n\twidth: 0px;\n\tborder-width: 0 1px;\n\tbackground-color: #fff;\n}\n\n.switch.btn-outline-primary .switch-handle {\n\tbackground-color: var(--primary);\n\tborder-color: var(--primary);\n}\n.switch.btn-outline-secondary .switch-handle {\n\tbackground-color: var(--secondary);\n\tborder-color: var(--secondary);\n}\n.switch.btn-outline-success .switch-handle {\n\tbackground-color: var(--success);\n\tborder-color: var(--success);\n}\n.switch.btn-outline-danger .switch-handle {\n\tbackground-color: var(--danger);\n\tborder-color: var(--danger);\n}\n.switch.btn-outline-warning .switch-handle {\n\tbackground-color: var(--warning);\n\tborder-color: var(--warning);\n}\n.switch.btn-outline-info .switch-handle {\n\tbackground-color: var(--info);\n\tborder-color: var(--info);\n}\n.switch.btn-outline-light .switch-handle {\n\tbackground-color: var(--light);\n\tborder-color: var(--light);\n}\n.switch.btn-outline-dark .switch-handle {\n\tbackground-color: var(--dark);\n\tborder-color: var(--dark);\n}\n.switch[class*="btn-outline"]:hover .switch-handle {\n\tbackground-color: var(--light);\n\topacity: 0.5;\n}\n\n/* NOTE: Must come first, so classes below override as needed */\n/* bootstrap-4.x .form-control {height} values used as `min-height` to mirror output sizes */\n\n.switch.btn { min-width: 3.7rem; min-height: calc(1.5em + .75rem + 2px); }\n.switch-on.btn { padding-right: 1.5rem; }\n.switch-off.btn { padding-left: 1.5rem; }\n\n.switch.btn-lg { min-width: 5rem; line-height: 1.5; min-height: calc(1.5em + 1rem + 2px); }\n.switch-on.btn-lg { padding-right: 2rem; }\n.switch-off.btn-lg { padding-left: 2rem; }\n.switch-handle.btn-lg { width: 2.5rem; }\n\n.switch.btn-sm { min-width: 3.25rem; min-height: calc(1.5em + .5rem + 2px); }\n.switch-on.btn-sm { padding-right: 1rem; }\n.switch-off.btn-sm { padding-left: 1rem; }\n\n/* `xs` (bootstrap-3.3 - .btn - h:22px) */\n.switch.btn-xs { min-width: 3.125rem; min-height: 1.375rem; }\n.switch-on.btn-xs { padding-right: .8rem; }\n.switch-off.btn-xs { padding-left: .8rem; }\n',""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n,r=e[1]||"",o=e[3];if(!o)return r;if(t&&"function"==typeof btoa){var a=(n=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),i=o.sources.map((function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"}));return[r].concat(i).concat([a]).join("\n")}return[r].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];null!=i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e,t){return t?t.querySelector(e):document.querySelector(e)},c=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=l.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),u=null,s=0,f=[],d=n(6);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(y(r.parts[i],t))}else{var l=[];for(i=0;i<r.parts.length;i++)l.push(y(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:l}}}}function m(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],l={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(l):n.push(r[i]={id:i,parts:[l]})}return n}function h(e,t){var n=c(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),f.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=c(e.insertAt.before,n);n.insertBefore(t,o)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function g(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=n.nc;r&&(e.attrs.nonce=r)}return b(t,e.attrs),h(e,t),t}function b(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function y(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=a}if(t.singleton){var i=s++;n=u||(u=g(t)),r=w.bind(null,n,i,!1),o=w.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(t,e.attrs),h(e,t),t}(t),r=C.bind(null,n,t),o=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(t),r=x.bind(null,n),o=function(){v(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=m(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o];(l=a[i.id]).refs--,r.push(l)}for(e&&p(m(e,t),t),o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete a[l.id]}}}};var A,E=(A=[],function(e,t){return A[e]=t,A.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=E(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function x(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function C(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=d(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(i),l&&URL.revokeObjectURL(l)}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")}))}}])},function(e,t,n){"use strict";(function(e){var r=n(0),o=n.n(r),a=n(6),i=n(2),l=n.n(i),c="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function u(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var s=o.a.createContext||function(e,t){var n,o,i,s="__create-react-context-"+((c[i="__global_unique_id__"]=(c[i]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=u(t.props.value),t}Object(a.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((a=r)===(i=o)?0!==a||1/a==1/i:a!=a&&i!=i)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var a,i},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[s]=l.a.object.isRequired,n);var d=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(a.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},r.getValue=function(){return this.context[s]?this.context[s].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return d.contextTypes=((o={})[s]=l.a.object,o),{Provider:f,Consumer:d}};t.a=s}).call(this,n(69))},function(e,t,n){var r=n(70);e.exports=p,e.exports.parse=a,e.exports.compile=function(e,t){return l(a(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,l="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(i,p),i=p+f.length,d)l+=d[1];else{var m=e[i],h=n[2],v=n[3],g=n[4],b=n[5],y=n[6],A=n[7];l&&(r.push(l),l="");var E=null!=h&&null!=m&&m!==h,w="+"===y||"*"===y,x="?"===y||"*"===y,C=n[2]||s,k=g||b;r.push({name:v||a++,prefix:h||"",delimiter:C,optional:x,repeat:w,partial:E,asterisk:!!A,pattern:k?u(k):A?".*":"[^"+c(C)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var a="",l=t||{},c=(o||{}).pretty?i:encodeURIComponent,u=0;u<e.length;u++){var s=e[u];if("string"!=typeof s){var f,d=l[s.name];if(null==d){if(s.optional){s.partial&&(a+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=c(d[p]),!n[u].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):c(d),!n[u].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');a+=s.prefix+f}}else a+=s}return a}}function c(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",l=0;l<e.length;l++){var u=e[l];if("string"==typeof u)i+=c(u);else{var d=c(u.prefix),p="(?:"+u.pattern+")";t.push(u),u.repeat&&(p+="(?:"+d+p+")*"),i+=p=u.optional?u.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var m=c(n.delimiter||"/"),h=i.slice(-m.length)===m;return o||(i=(h?i.slice(0,-m.length):i)+"(?:"+m+"(?=$))?"),i+=a?"$":o&&h?"":"(?="+m+"|$)",s(new RegExp("^"+i,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";function r(e,t){return e.contains?e.contains(t):e.compareDocumentPosition?e===t||!!(16&e.compareDocumentPosition(t)):void 0}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,c=i(e),u=1;u<arguments.length;u++){for(var s in n=Object(arguments[u]))o.call(n,s)&&(c[s]=n[s]);if(r){l=r(n);for(var f=0;f<l.length;f++)a.call(n,l[f])&&(c[l[f]]=n[l[f]])}}return c}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(9);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(9),o=n(56),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,c={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(l=n(32)),l),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){c.headers[e]=r.merge(a)})),e.exports=c}).call(this,n(55))},function(e,t,n){"use strict";var r=n(9),o=n(57),a=n(29),i=n(59),l=n(62),c=n(63),u=n(33);e.exports=function(e){return new Promise((function(t,s){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var m=e.auth.username||"",h=e.auth.password||"";d.Authorization="Basic "+btoa(m+":"+h)}var v=i(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),a(v,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?l(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:e,request:p};o(t,s,r),p=null}},p.onabort=function(){p&&(s(u("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){s(u("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),s(u(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var g=n(64),b=(e.withCredentials||c(v))&&e.xsrfCookieName?g.read(e.xsrfCookieName):void 0;b&&(d[e.xsrfHeaderName]=b)}if("setRequestHeader"in p&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),s(e),p=null)})),void 0===f&&(f=null),p.send(f)}))}},function(e,t,n){"use strict";var r=n(58);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},function(e,t,n){"use strict";var r=n(9);e.exports=function(e,t){t=t||{};var n={},o=["url","method","params","data"],a=["headers","auth","proxy"],i=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(o,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(a,(function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])})),r.forEach(i,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var l=o.concat(a).concat(i),c=Object.keys(t).filter((function(e){return-1===l.indexOf(e)}));return r.forEach(c,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";e.exports=n(71)},function(e,t,n){var r=n(14),o=n(83);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";var r=n(36),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function c(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=p(n);o&&o!==m&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var l=c(t),h=c(n),v=0;v<i.length;++v){var g=i[v];if(!(a[g]||r&&r[g]||h&&h[g]||l&&l[g])){var b=d(n,g);try{u(t,g,b)}catch(e){}}}}return t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0);function o(){return Object(r.useState)(null)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(0);function o(e){var t=Object(r.useRef)(null);return Object(r.useEffect)((function(){t.current=e})),t.current}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(10),o=n(0),a=function(e){var t;return"undefined"==typeof document?null:null==e?Object(r.a)().body:("function"==typeof e&&(e=e()),e&&"current"in e&&(e=e.current),(null==(t=e)?void 0:t.nodeType)&&e||null)};function i(e,t){var n=Object(o.useState)((function(){return a(e)})),r=n[0],i=n[1];if(!r){var l=a(e);l&&i(l)}return Object(o.useEffect)((function(){t&&r&&t(r)}),[t,r]),Object(o.useEffect)((function(){var t=a(e);t!==r&&i(t)}),[e,r]),r}},function(e,t,n){"use strict";t.a=n.p+"42441b5626393f2aab331c9e22e93b2a.jpg"},function(e,t,n){"use strict";t.a=n.p+"ccf4a2d9286173301d87a923996d1272.jpg"},function(e,t){e.exports="object"==typeof self?self.FormData:window.FormData},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(1),o=n(3),a=n(0);n(21);function i(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}function l(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}function c(e,t){return Object.keys(t).reduce((function(n,c){var u,s=n,f=s[i(c)],d=s[c],p=Object(o.a)(s,[i(c),c].map(l)),m=t[c],h=function(e,t,n){var r=Object(a.useRef)(void 0!==e),o=Object(a.useState)(t),i=o[0],l=o[1],c=void 0!==e,u=r.current;return r.current=c,!c&&u&&i!==t&&l(t),[c?e:i,Object(a.useCallback)((function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];n&&n.apply(void 0,[e].concat(r)),l(e)}),[n])]}(d,f,e[m]),v=h[0],g=h[1];return Object(r.a)({},p,((u={})[c]=v,u[m]=g,u))}),e)}n(6);function u(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function s(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function f(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}u.__suppressDeprecationWarning=!0,s.__suppressDeprecationWarning=!0,f.__suppressDeprecationWarning=!0},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(27),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,c=o?Symbol.for("react.strict_mode"):60108,u=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,h=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function A(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||b}function E(){}function w(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||b}A.prototype.isReactComponent={},A.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(g(85));this.updater.enqueueSetState(this,e,t,"setState")},A.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=A.prototype;var x=w.prototype=new E;x.constructor=w,r(x,A.prototype),x.isPureReactComponent=!0;var C={current:null},k=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!S.hasOwnProperty(r)&&(o[r]=t[r]);var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){for(var u=Array(c),s=0;s<c;s++)u[s]=arguments[s+2];o.children=u}if(e&&e.defaultProps)for(r in c=e.defaultProps)void 0===o[r]&&(o[r]=c[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:C.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var I=/\/+/g,N=[];function _(e,t,n,r){if(N.length){var o=N.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function P(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>N.length&&N.push(e)}function j(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var c=!1;if(null===t)c=!0;else switch(l){case"string":case"number":c=!0;break;case"object":switch(t.$$typeof){case a:case i:c=!0}}if(c)return r(o,t,""===n?"."+R(t,0):n),1;if(c=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var s=n+R(l=t[u],u);c+=e(l,s,r,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=v&&t[v]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),u=0;!(l=t.next()).done;)c+=e(l=l.value,s=n+R(l,u++),r,o);else if("object"===l)throw r=""+t,Error(g(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return c}(e,"",t,n)}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function B(e,t){e.func.call(e.context,t,e.count++)}function D(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,(function(e){return e})):null!=e&&(T(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(I,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(I,"$&/")+"/"),j(e,D,t=_(t,a,r,o)),P(t)}var M={current:null};function z(){var e=M.current;if(null===e)throw Error(g(321));return e}var L={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:C,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;j(e,B,t=_(null,null,t,n)),P(t)},count:function(e){return j(e,(function(){return null}),null)},toArray:function(e){var t=[];return F(e,t,null,(function(e){return e})),t},only:function(e){if(!T(e))throw Error(g(143));return e}},t.Component=A,t.Fragment=l,t.Profiler=u,t.PureComponent=w,t.StrictMode=c,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,n){if(null==e)throw Error(g(267,e));var o=r({},e.props),i=e.key,l=e.ref,c=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,c=C.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)k.call(t,s)&&!S.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){u=Array(s);for(var f=0;f<s;f++)u[f]=arguments[f+2];o.children=u}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:c}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=O,t.createFactory=function(e){var t=O.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=T,t.lazy=function(e){return{$$typeof:h,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return z().useCallback(e,t)},t.useContext=function(e,t){return z().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return z().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return z().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return z().useLayoutEffect(e,t)},t.useMemo=function(e,t){return z().useMemo(e,t)},t.useReducer=function(e,t,n){return z().useReducer(e,t,n)},t.useRef=function(e){return z().useRef(e)},t.useState=function(e){return z().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(27),a=n(48);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));function l(e,t,n,r,o,a,i,l,c){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var c=!1,u=null,s=!1,f=null,d={onError:function(e){c=!0,u=e}};function p(e,t,n,r,o,a,i,s,f){c=!1,u=null,l.apply(d,arguments)}var m=null,h=null,v=null;function g(e,t,n){var r=e.type||"unknown-event";e.currentTarget=v(n),function(e,t,n,r,o,a,l,d,m){if(p.apply(this,arguments),c){if(!c)throw Error(i(198));var h=u;c=!1,u=null,s||(s=!0,f=h)}}(r,t,void 0,e),e.currentTarget=null}var b=null,y={};function A(){if(b)for(var e in y){var t=y[e],n=b.indexOf(e);if(!(-1<n))throw Error(i(96,e));if(!w[n]){if(!t.extractEvents)throw Error(i(97,e));for(var r in w[n]=t,n=t.eventTypes){var o=void 0,a=n[r],l=t,c=r;if(x.hasOwnProperty(c))throw Error(i(99,c));x[c]=a;var u=a.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&E(u[o],l,c);o=!0}else a.registrationName?(E(a.registrationName,l,c),o=!0):o=!1;if(!o)throw Error(i(98,r,e))}}}}function E(e,t,n){if(C[e])throw Error(i(100,e));C[e]=t,k[e]=t.eventTypes[n].dependencies}var w=[],x={},C={},k={};function S(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!y.hasOwnProperty(t)||y[t]!==r){if(y[t])throw Error(i(102,t));y[t]=r,n=!0}}n&&A()}var O=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),T=null,I=null,N=null;function _(e){if(e=h(e)){if("function"!=typeof T)throw Error(i(280));var t=e.stateNode;t&&(t=m(t),T(e.stateNode,e.type,t))}}function P(e){I?N?N.push(e):N=[e]:I=e}function j(){if(I){var e=I,t=N;if(N=I=null,_(e),t)for(e=0;e<t.length;e++)_(t[e])}}function R(e,t){return e(t)}function B(e,t,n,r,o){return e(t,n,r,o)}function D(){}var F=R,M=!1,z=!1;function L(){null===I&&null===N||(D(),j())}function U(e,t,n){if(z)return e(t,n);z=!0;try{return F(e,t,n)}finally{z=!1,L()}}var H=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,V=Object.prototype.hasOwnProperty,W={},$={};function q(e,t,n,r,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a}var Y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){Y[e]=new q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];Y[t]=new q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){Y[e]=new q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){Y[e]=new q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){Y[e]=new q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){Y[e]=new q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){Y[e]=new q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){Y[e]=new q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){Y[e]=new q(e,5,!1,e.toLowerCase(),null,!1)}));var J=/[\-:]([a-z])/g;function Q(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(J,Q);Y[t]=new q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(J,Q);Y[t]=new q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(J,Q);Y[t]=new q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){Y[e]=new q(e,1,!1,e.toLowerCase(),null,!1)})),Y.xlinkHref=new q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){Y[e]=new q(e,1,!1,e.toLowerCase(),null,!0)}));var K=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,n,r){var o=Y.hasOwnProperty(t)?Y[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!V.call($,e)||!V.call(W,e)&&(H.test(e)?$[e]=!0:(W[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}K.hasOwnProperty("ReactCurrentDispatcher")||(K.ReactCurrentDispatcher={current:null}),K.hasOwnProperty("ReactCurrentBatchConfig")||(K.ReactCurrentBatchConfig={suspense:null});var G=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,oe=Z?Symbol.for("react.profiler"):60114,ae=Z?Symbol.for("react.provider"):60109,ie=Z?Symbol.for("react.context"):60110,le=Z?Symbol.for("react.concurrent_mode"):60111,ce=Z?Symbol.for("react.forward_ref"):60112,ue=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,de=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,me="function"==typeof Symbol&&Symbol.iterator;function he(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=me&&e[me]||e["@@iterator"])?e:null}function ve(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case ue:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ie:return"Context.Consumer";case ae:return"Context.Provider";case ce:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ve(e.type);case pe:return ve(e.render);case de:if(e=1===e._status?e._result:null)return ve(e)}return null}function ge(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,a=ve(e.type);n=null,r&&(n=ve(r.type)),r=a,a="",o?a=" (at "+o.fileName.replace(G,"")+":"+o.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}function be(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ye(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ae(e){e._valueTracker||(e._valueTracker=function(e){var t=ye(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ee(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ye(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function we(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xe(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=be(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ce(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function ke(e,t){Ce(e,t);var n=be(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Oe(e,t.type,be(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Se(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Oe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Te(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+be(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Ne(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function _e(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:be(n)}}function Pe(e,t){var n=be(t.value),r=be(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function je(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Re="http://www.w3.org/1999/xhtml",Be="http://www.w3.org/2000/svg";function De(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Fe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?De(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Me,ze=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Be||"innerHTML"in e)e.innerHTML=t;else{for((Me=Me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Le(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ue(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var He={animationend:Ue("Animation","AnimationEnd"),animationiteration:Ue("Animation","AnimationIteration"),animationstart:Ue("Animation","AnimationStart"),transitionend:Ue("Transition","TransitionEnd")},Ve={},We={};function $e(e){if(Ve[e])return Ve[e];if(!He[e])return e;var t,n=He[e];for(t in n)if(n.hasOwnProperty(t)&&t in We)return Ve[e]=n[t];return e}O&&(We=document.createElement("div").style,"AnimationEvent"in window||(delete He.animationend.animation,delete He.animationiteration.animation,delete He.animationstart.animation),"TransitionEvent"in window||delete He.transitionend.transition);var qe=$e("animationend"),Ye=$e("animationiteration"),Je=$e("animationstart"),Qe=$e("transitionend"),Ke="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Xe=new("function"==typeof WeakMap?WeakMap:Map);function Ge(e){var t=Xe.get(e);return void 0===t&&(t=new Map,Xe.set(e,t)),t}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(i(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return tt(o),e;if(a===r)return tt(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,c=o.child;c;){if(c===n){l=!0,n=o,r=a;break}if(c===r){l=!0,r=o,n=a;break}c=c.sibling}if(!l){for(c=a.child;c;){if(c===n){l=!0,n=a,r=o;break}if(c===r){l=!0,r=a,n=o;break}c=c.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var at=null;function it(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)g(e,t[r],n[r]);else t&&g(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(at=rt(at,e)),e=at,at=null,e){if(ot(e,it),at)throw Error(i(95));if(s)throw e=f,s=!1,f=null,e}}function ct(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ut(e){if(!O)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function dt(e,t,n,r){if(st.length){var o=st.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=On(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ct(e.nativeEvent);r=e.topLevelType;var a=e.nativeEvent,i=e.eventSystemFlags;0===n&&(i|=64);for(var l=null,c=0;c<w.length;c++){var u=w[c];u&&(u=u.extractEvents(r,t,a,o,i))&&(l=rt(l,u))}lt(l)}}function mt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Jt(t,"scroll",!0);break;case"focus":case"blur":Jt(t,"focus",!0),Jt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ut(e)&&Jt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ke.indexOf(e)&&Yt(e,t)}n.set(e,null)}}var ht,vt,gt,bt=!1,yt=[],At=null,Et=null,wt=null,xt=new Map,Ct=new Map,kt=[],St="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ot="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Tt(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function It(e,t){switch(e){case"focus":case"blur":At=null;break;case"dragenter":case"dragleave":Et=null;break;case"mouseover":case"mouseout":wt=null;break;case"pointerover":case"pointerout":xt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ct.delete(t.pointerId)}}function Nt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=Tt(t,n,r,o,a),null!==t&&(null!==(t=Tn(t))&&vt(t)),e):(e.eventSystemFlags|=r,e)}function _t(e){var t=On(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){gt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Pt(e){if(null!==e.blockedOn)return!1;var t=Gt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Tn(t);return null!==n&&vt(n),e.blockedOn=t,!1}return!0}function jt(e,t,n){Pt(e)&&n.delete(t)}function Rt(){for(bt=!1;0<yt.length;){var e=yt[0];if(null!==e.blockedOn){null!==(e=Tn(e.blockedOn))&&ht(e);break}var t=Gt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:yt.shift()}null!==At&&Pt(At)&&(At=null),null!==Et&&Pt(Et)&&(Et=null),null!==wt&&Pt(wt)&&(wt=null),xt.forEach(jt),Ct.forEach(jt)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,bt||(bt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Rt)))}function Dt(e){function t(t){return Bt(t,e)}if(0<yt.length){Bt(yt[0],e);for(var n=1;n<yt.length;n++){var r=yt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==At&&Bt(At,e),null!==Et&&Bt(Et,e),null!==wt&&Bt(wt,e),xt.forEach(t),Ct.forEach(t),n=0;n<kt.length;n++)(r=kt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<kt.length&&null===(n=kt[0]).blockedOn;)_t(n),null===n.blockedOn&&kt.shift()}var Ft={},Mt=new Map,zt=new Map,Lt=["abort","abort",qe,"animationEnd",Ye,"animationIteration",Je,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Qe,"transitionEnd","waiting","waiting"];function Ut(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],a="on"+(o[0].toUpperCase()+o.slice(1));a={phasedRegistrationNames:{bubbled:a,captured:a+"Capture"},dependencies:[r],eventPriority:t},zt.set(r,t),Mt.set(r,a),Ft[o]=a}}Ut("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ut("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ut(Lt,2);for(var Ht="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Vt=0;Vt<Ht.length;Vt++)zt.set(Ht[Vt],0);var Wt=a.unstable_UserBlockingPriority,$t=a.unstable_runWithPriority,qt=!0;function Yt(e,t){Jt(t,e,!1)}function Jt(e,t,n){var r=zt.get(t);switch(void 0===r?2:r){case 0:r=Qt.bind(null,t,1,e);break;case 1:r=Kt.bind(null,t,1,e);break;default:r=Xt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Qt(e,t,n,r){M||D();var o=Xt,a=M;M=!0;try{B(o,e,t,n,r)}finally{(M=a)||L()}}function Kt(e,t,n,r){$t(Wt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){if(qt)if(0<yt.length&&-1<St.indexOf(e))e=Tt(null,e,t,n,r),yt.push(e);else{var o=Gt(e,t,n,r);if(null===o)It(e,r);else if(-1<St.indexOf(e))e=Tt(o,e,t,n,r),yt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return At=Nt(At,e,t,n,r,o),!0;case"dragenter":return Et=Nt(Et,e,t,n,r,o),!0;case"mouseover":return wt=Nt(wt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return xt.set(a,Nt(xt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Ct.set(a,Nt(Ct.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){It(e,r),e=dt(e,r,null,t);try{U(pt,e)}finally{ft(e)}}}}function Gt(e,t,n,r){if(null!==(n=On(n=ct(r)))){var o=Ze(n);if(null===o)n=null;else{var a=o.tag;if(13===a){if(null!==(n=et(o)))return n;n=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=dt(e,r,n,t);try{U(pt,e)}finally{ft(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Zt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=Re;function cn(e,t){var n=Ge(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=k[t];for(var r=0;r<t.length;r++)mt(t[r],e,n)}function un(){}function sn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=sn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=sn((e=t.contentWindow).document)}return t}function mn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hn=null,vn=null;function gn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function bn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var yn="function"==typeof setTimeout?setTimeout:void 0,An="function"==typeof clearTimeout?clearTimeout:void 0;function En(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function wn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var xn=Math.random().toString(36).slice(2),Cn="__reactInternalInstance$"+xn,kn="__reactEventHandlers$"+xn,Sn="__reactContainere$"+xn;function On(e){var t=e[Cn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Sn]||n[Cn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=wn(e);null!==e;){if(n=e[Cn])return n;e=wn(e)}return t}n=(e=n).parentNode}return null}function Tn(e){return!(e=e[Cn]||e[Sn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function In(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function Nn(e){return e[kn]||null}function _n(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Pn(e,t){var n=e.stateNode;if(!n)return null;var r=m(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}function jn(e,t,n){(t=Pn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Rn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=_n(t);for(t=n.length;0<t--;)jn(n[t],"captured",e);for(t=0;t<n.length;t++)jn(n[t],"bubbled",e)}}function Bn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Pn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Dn(e){e&&e.dispatchConfig.registrationName&&Bn(e._targetInst,null,e)}function Fn(e){ot(e,Rn)}var Mn=null,zn=null,Ln=null;function Un(){if(Ln)return Ln;var e,t,n=zn,r=n.length,o="value"in Mn?Mn.value:Mn.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Ln=o.slice(e,1<t?1-t:void 0)}function Hn(){return!0}function Vn(){return!1}function Wn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Hn:Vn,this.isPropagationStopped=Vn,this}function $n(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function qn(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Yn(e){e.eventPool=[],e.getPooled=$n,e.release=qn}o(Wn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Hn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Hn)},persist:function(){this.isPersistent=Hn},isPersistent:Vn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Vn,this._dispatchInstances=this._dispatchListeners=null}}),Wn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Wn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return o(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Yn(n),n},Yn(Wn);var Jn=Wn.extend({data:null}),Qn=Wn.extend({data:null}),Kn=[9,13,27,32],Xn=O&&"CompositionEvent"in window,Gn=null;O&&"documentMode"in document&&(Gn=document.documentMode);var Zn=O&&"TextEvent"in window&&!Gn,er=O&&(!Xn||Gn&&8<Gn&&11>=Gn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Kn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ar(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ir=!1;var lr={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Xn)e:{switch(e){case"compositionstart":var a=nr.compositionStart;break e;case"compositionend":a=nr.compositionEnd;break e;case"compositionupdate":a=nr.compositionUpdate;break e}a=void 0}else ir?or(e,n)&&(a=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=nr.compositionStart);return a?(er&&"ko"!==n.locale&&(ir||a!==nr.compositionStart?a===nr.compositionEnd&&ir&&(o=Un()):(zn="value"in(Mn=r)?Mn.value:Mn.textContent,ir=!0)),a=Jn.getPooled(a,t,n,r),o?a.data=o:null!==(o=ar(n))&&(a.data=o),Fn(a),o=a):o=null,(e=Zn?function(e,t){switch(e){case"compositionend":return ar(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ir)return"compositionend"===e||!Xn&&or(e,t)?(e=Un(),Ln=zn=Mn=null,ir=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Qn.getPooled(nr.beforeInput,t,n,r)).data=e,Fn(t)):t=null,null===o?t:null===t?o:[o,t]}},cr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ur(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!cr[e.type]:"textarea"===t}var sr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Wn.getPooled(sr.change,e,t,n)).type="change",P(n),Fn(e),e}var dr=null,pr=null;function mr(e){lt(e)}function hr(e){if(Ee(In(e)))return e}function vr(e,t){if("change"===e)return t}var gr=!1;function br(){dr&&(dr.detachEvent("onpropertychange",yr),pr=dr=null)}function yr(e){if("value"===e.propertyName&&hr(pr))if(e=fr(pr,e,ct(e)),M)lt(e);else{M=!0;try{R(mr,e)}finally{M=!1,L()}}}function Ar(e,t,n){"focus"===e?(br(),pr=n,(dr=t).attachEvent("onpropertychange",yr)):"blur"===e&&br()}function Er(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return hr(pr)}function wr(e,t){if("click"===e)return hr(t)}function xr(e,t){if("input"===e||"change"===e)return hr(t)}O&&(gr=ut("input")&&(!document.documentMode||9<document.documentMode));var Cr={eventTypes:sr,_isInputEventSupported:gr,extractEvents:function(e,t,n,r){var o=t?In(t):window,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type)var i=vr;else if(ur(o))if(gr)i=xr;else{i=Er;var l=Ar}else(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=wr);if(i&&(i=i(e,t)))return fr(i,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Oe(o,"number",o.value)}},kr=Wn.extend({view:null,detail:null}),Sr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Or(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sr[e])&&!!t[e]}function Tr(){return Or}var Ir=0,Nr=0,_r=!1,Pr=!1,jr=kr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Tr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Ir;return Ir=e.screenX,_r?"mousemove"===e.type?e.screenX-t:0:(_r=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Nr;return Nr=e.screenY,Pr?"mousemove"===e.type?e.screenY-t:0:(Pr=!0,0)}}),Rr=jr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Br={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Dr={eventTypes:Br,extractEvents:function(e,t,n,r,o){var a="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(a&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!i&&!a)return null;(a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window,i)?(i=t,null!==(t=(t=n.relatedTarget||n.toElement)?On(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):i=null;if(i===t)return null;if("mouseout"===e||"mouseover"===e)var l=jr,c=Br.mouseLeave,u=Br.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Rr,c=Br.pointerLeave,u=Br.pointerEnter,s="pointer");if(e=null==i?a:In(i),a=null==t?a:In(t),(c=l.getPooled(c,i,n,r)).type=s+"leave",c.target=e,c.relatedTarget=a,(n=l.getPooled(u,t,n,r)).type=s+"enter",n.target=a,n.relatedTarget=e,s=t,(r=i)&&s)e:{for(u=s,i=0,e=l=r;e;e=_n(e))i++;for(e=0,t=u;t;t=_n(t))e++;for(;0<i-e;)l=_n(l),i--;for(;0<e-i;)u=_n(u),e--;for(;i--;){if(l===u||l===u.alternate)break e;l=_n(l),u=_n(u)}l=null}else l=null;for(u=l,l=[];r&&r!==u&&(null===(i=r.alternate)||i!==u);)l.push(r),r=_n(r);for(r=[];s&&s!==u&&(null===(i=s.alternate)||i!==u);)r.push(s),s=_n(s);for(s=0;s<l.length;s++)Bn(l[s],"bubbled",c);for(s=r.length;0<s--;)Bn(r[s],"captured",n);return 0==(64&o)?[c]:[c,n]}};var Fr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Mr=Object.prototype.hasOwnProperty;function zr(e,t){if(Fr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Mr.call(t,n[r])||!Fr(e[n[r]],t[n[r]]))return!1;return!0}var Lr=O&&"documentMode"in document&&11>=document.documentMode,Ur={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Hr=null,Vr=null,Wr=null,$r=!1;function qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return $r||null==Hr||Hr!==sn(n)?null:("selectionStart"in(n=Hr)&&mn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Wr&&zr(Wr,n)?null:(Wr=n,(e=Wn.getPooled(Ur.select,Vr,e,t)).type="select",e.target=Hr,Fn(e),e))}var Yr={eventTypes:Ur,extractEvents:function(e,t,n,r,o,a){if(!(a=!(o=a||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Ge(o),a=k.onSelect;for(var i=0;i<a.length;i++)if(!o.has(a[i])){o=!1;break e}o=!0}a=!o}if(a)return null;switch(o=t?In(t):window,e){case"focus":(ur(o)||"true"===o.contentEditable)&&(Hr=o,Vr=t,Wr=null);break;case"blur":Wr=Vr=Hr=null;break;case"mousedown":$r=!0;break;case"contextmenu":case"mouseup":case"dragend":return $r=!1,qr(n,r);case"selectionchange":if(Lr)break;case"keydown":case"keyup":return qr(n,r)}return null}},Jr=Wn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Qr=Wn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Kr=kr.extend({relatedTarget:null});function Xr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Gr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=kr.extend({key:function(e){if(e.key){var t=Gr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Xr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Tr,charCode:function(e){return"keypress"===e.type?Xr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Xr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=jr.extend({dataTransfer:null}),no=kr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Tr}),ro=Wn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=jr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ao={eventTypes:Ft,extractEvents:function(e,t,n,r){var o=Mt.get(e);if(!o)return null;switch(e){case"keypress":if(0===Xr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Kr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=jr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case qe:case Ye:case Je:e=Jr;break;case Qe:e=ro;break;case"scroll":e=kr;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Qr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Rr;break;default:e=Wn}return Fn(t=e.getPooled(o,t,n,r)),t}};if(b)throw Error(i(101));b=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),A(),m=Nn,h=Tn,v=In,S({SimpleEventPlugin:ao,EnterLeaveEventPlugin:Dr,ChangeEventPlugin:Cr,SelectEventPlugin:Yr,BeforeInputEventPlugin:lr});var io=[],lo=-1;function co(e){0>lo||(e.current=io[lo],io[lo]=null,lo--)}function uo(e,t){lo++,io[lo]=e.current,e.current=t}var so={},fo={current:so},po={current:!1},mo=so;function ho(e,t){var n=e.type.contextTypes;if(!n)return so;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function vo(e){return null!=(e=e.childContextTypes)}function go(){co(po),co(fo)}function bo(e,t,n){if(fo.current!==so)throw Error(i(168));uo(fo,t),uo(po,n)}function yo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,ve(t)||"Unknown",a));return o({},n,{},r)}function Ao(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,mo=fo.current,uo(fo,e),uo(po,po.current),!0}function Eo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=yo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,co(po),co(fo),uo(fo,e)):co(po),uo(po,n)}var wo=a.unstable_runWithPriority,xo=a.unstable_scheduleCallback,Co=a.unstable_cancelCallback,ko=a.unstable_requestPaint,So=a.unstable_now,Oo=a.unstable_getCurrentPriorityLevel,To=a.unstable_ImmediatePriority,Io=a.unstable_UserBlockingPriority,No=a.unstable_NormalPriority,_o=a.unstable_LowPriority,Po=a.unstable_IdlePriority,jo={},Ro=a.unstable_shouldYield,Bo=void 0!==ko?ko:function(){},Do=null,Fo=null,Mo=!1,zo=So(),Lo=1e4>zo?So:function(){return So()-zo};function Uo(){switch(Oo()){case To:return 99;case Io:return 98;case No:return 97;case _o:return 96;case Po:return 95;default:throw Error(i(332))}}function Ho(e){switch(e){case 99:return To;case 98:return Io;case 97:return No;case 96:return _o;case 95:return Po;default:throw Error(i(332))}}function Vo(e,t){return e=Ho(e),wo(e,t)}function Wo(e,t,n){return e=Ho(e),xo(e,t,n)}function $o(e){return null===Do?(Do=[e],Fo=xo(To,Yo)):Do.push(e),jo}function qo(){if(null!==Fo){var e=Fo;Fo=null,Co(e)}Yo()}function Yo(){if(!Mo&&null!==Do){Mo=!0;var e=0;try{var t=Do;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),xo(To,qo),t}finally{Mo=!1}}}function Jo(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Qo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Ko={current:null},Xo=null,Go=null,Zo=null;function ea(){Zo=Go=Xo=null}function ta(e){var t=Ko.current;co(Ko),e.type._context._currentValue=t}function na(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ra(e,t){Xo=e,Zo=Go=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Ni=!0),e.firstContext=null)}function oa(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Go){if(null===Xo)throw Error(i(308));Go=t,Xo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Go=Go.next=t;return e._currentValue}var aa=!1;function ia(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ca(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function ua(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function sa(e,t){var n=e.alternate;null!==n&&la(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function fa(e,t,n,r){var a=e.updateQueue;aa=!1;var i=a.baseQueue,l=a.shared.pending;if(null!==l){if(null!==i){var c=i.next;i.next=l.next,l.next=c}i=l,a.shared.pending=null,null!==(c=e.alternate)&&(null!==(c=c.updateQueue)&&(c.baseQueue=l))}if(null!==i){c=i.next;var u=a.baseState,s=0,f=null,d=null,p=null;if(null!==c)for(var m=c;;){if((l=m.expirationTime)<r){var h={expirationTime:m.expirationTime,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null};null===p?(d=p=h,f=u):p=p.next=h,l>s&&(s=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null}),ac(l,m.suspenseConfig);e:{var v=e,g=m;switch(l=t,h=n,g.tag){case 1:if("function"==typeof(v=g.payload)){u=v.call(h,u,l);break e}u=v;break e;case 3:v.effectTag=-4097&v.effectTag|64;case 0:if(null==(l="function"==typeof(v=g.payload)?v.call(h,u,l):v))break e;u=o({},u,l);break e;case 2:aa=!0}}null!==m.callback&&(e.effectTag|=32,null===(l=a.effects)?a.effects=[m]:l.push(m))}if(null===(m=m.next)||m===c){if(null===(l=a.shared.pending))break;m=i.next=l.next,l.next=c,a.baseQueue=i=l,a.shared.pending=null}}null===p?f=u:p.next=d,a.baseState=f,a.baseQueue=p,ic(s),e.expirationTime=s,e.memoizedState=u}}function da(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(i(191,r));r.call(o)}}}var pa=K.ReactCurrentBatchConfig,ma=(new r.Component).refs;function ha(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var va={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ql(),o=pa.suspense;(o=ca(r=Yl(r,e,o),o)).payload=t,null!=n&&(o.callback=n),ua(e,o),Jl(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ql(),o=pa.suspense;(o=ca(r=Yl(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),ua(e,o),Jl(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ql(),r=pa.suspense;(r=ca(n=Yl(n,e,r),r)).tag=2,null!=t&&(r.callback=t),ua(e,r),Jl(e,n)}};function ga(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!zr(n,r)||!zr(o,a))}function ba(e,t,n){var r=!1,o=so,a=t.contextType;return"object"==typeof a&&null!==a?a=oa(a):(o=vo(t)?mo:fo.current,a=(r=null!=(r=t.contextTypes))?ho(e,o):so),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=va,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ya(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&va.enqueueReplaceState(t,t.state,null)}function Aa(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ma,ia(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=oa(a):(a=vo(t)?mo:fo.current,o.context=ho(e,a)),fa(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ha(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&va.enqueueReplaceState(o,o.state,null),fa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Ea=Array.isArray;function wa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===ma&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function xa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ca(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Sc(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function c(e,t,n,r){return null===t||6!==t.tag?((t=Ic(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=wa(e,t,n),r.return=e,r):((r=Oc(n.type,n.key,n.props,null,e.mode,r)).ref=wa(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Nc(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Tc(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ic(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Oc(t.type,t.key,t.props,null,e.mode,n)).ref=wa(e,null,t),n.return=e,n;case te:return(t=Nc(t,e.mode,n)).return=e,t}if(Ea(t)||he(t))return(t=Tc(t,e.mode,n,null)).return=e,t;xa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:c(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?f(e,t,n.props.children,r,o):u(e,t,n,r):null;case te:return n.key===o?s(e,t,n,r):null}if(Ea(n)||he(n))return null!==o?null:f(e,t,n,r,null);xa(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return c(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,o,r.key):u(t,e,r,o);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Ea(r)||he(r))return f(t,e=e.get(n)||null,r,o,null);xa(t,r)}return null}function h(o,i,l,c){for(var u=null,s=null,f=i,h=i=0,v=null;null!==f&&h<l.length;h++){f.index>h?(v=f,f=null):v=f.sibling;var g=p(o,f,l[h],c);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),i=a(g,i,h),null===s?u=g:s.sibling=g,s=g,f=v}if(h===l.length)return n(o,f),u;if(null===f){for(;h<l.length;h++)null!==(f=d(o,l[h],c))&&(i=a(f,i,h),null===s?u=f:s.sibling=f,s=f);return u}for(f=r(o,f);h<l.length;h++)null!==(v=m(f,o,h,l[h],c))&&(e&&null!==v.alternate&&f.delete(null===v.key?h:v.key),i=a(v,i,h),null===s?u=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),u}function v(o,l,c,u){var s=he(c);if("function"!=typeof s)throw Error(i(150));if(null==(c=s.call(c)))throw Error(i(151));for(var f=s=null,h=l,v=l=0,g=null,b=c.next();null!==h&&!b.done;v++,b=c.next()){h.index>v?(g=h,h=null):g=h.sibling;var y=p(o,h,b.value,u);if(null===y){null===h&&(h=g);break}e&&h&&null===y.alternate&&t(o,h),l=a(y,l,v),null===f?s=y:f.sibling=y,f=y,h=g}if(b.done)return n(o,h),s;if(null===h){for(;!b.done;v++,b=c.next())null!==(b=d(o,b.value,u))&&(l=a(b,l,v),null===f?s=b:f.sibling=b,f=b);return s}for(h=r(o,h);!b.done;v++,b=c.next())null!==(b=m(h,o,v,b.value,u))&&(e&&null!==b.alternate&&h.delete(null===b.key?v:b.key),l=a(b,l,v),null===f?s=b:f.sibling=b,f=b);return e&&h.forEach((function(e){return t(o,e)})),s}return function(e,r,a,c){var u="object"==typeof a&&null!==a&&a.type===ne&&null===a.key;u&&(a=a.props.children);var s="object"==typeof a&&null!==a;if(s)switch(a.$$typeof){case ee:e:{for(s=a.key,u=r;null!==u;){if(u.key===s){switch(u.tag){case 7:if(a.type===ne){n(e,u.sibling),(r=o(u,a.props.children)).return=e,e=r;break e}break;default:if(u.elementType===a.type){n(e,u.sibling),(r=o(u,a.props)).ref=wa(e,u,a),r.return=e,e=r;break e}}n(e,u);break}t(e,u),u=u.sibling}a.type===ne?((r=Tc(a.props.children,e.mode,c,a.key)).return=e,e=r):((c=Oc(a.type,a.key,a.props,null,e.mode,c)).ref=wa(e,r,a),c.return=e,e=c)}return l(e);case te:e:{for(u=a.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Nc(a,e.mode,c)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Ic(a,e.mode,c)).return=e,e=r),l(e);if(Ea(a))return h(e,r,a,c);if(he(a))return v(e,r,a,c);if(s&&xa(e,a),void 0===a&&!u)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return n(e,r)}}var ka=Ca(!0),Sa=Ca(!1),Oa={},Ta={current:Oa},Ia={current:Oa},Na={current:Oa};function _a(e){if(e===Oa)throw Error(i(174));return e}function Pa(e,t){switch(uo(Na,t),uo(Ia,e),uo(Ta,Oa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Fe(null,"");break;default:t=Fe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}co(Ta),uo(Ta,t)}function ja(){co(Ta),co(Ia),co(Na)}function Ra(e){_a(Na.current);var t=_a(Ta.current),n=Fe(t,e.type);t!==n&&(uo(Ia,e),uo(Ta,n))}function Ba(e){Ia.current===e&&(co(Ta),co(Ia))}var Da={current:0};function Fa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ma(e,t){return{responder:e,props:t}}var za=K.ReactCurrentDispatcher,La=K.ReactCurrentBatchConfig,Ua=0,Ha=null,Va=null,Wa=null,$a=!1;function qa(){throw Error(i(321))}function Ya(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Fr(e[n],t[n]))return!1;return!0}function Ja(e,t,n,r,o,a){if(Ua=a,Ha=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,za.current=null===e||null===e.memoizedState?gi:bi,e=n(r,o),t.expirationTime===Ua){a=0;do{if(t.expirationTime=0,!(25>a))throw Error(i(301));a+=1,Wa=Va=null,t.updateQueue=null,za.current=yi,e=n(r,o)}while(t.expirationTime===Ua)}if(za.current=vi,t=null!==Va&&null!==Va.next,Ua=0,Wa=Va=Ha=null,$a=!1,t)throw Error(i(300));return e}function Qa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Wa?Ha.memoizedState=Wa=e:Wa=Wa.next=e,Wa}function Ka(){if(null===Va){var e=Ha.alternate;e=null!==e?e.memoizedState:null}else e=Va.next;var t=null===Wa?Ha.memoizedState:Wa.next;if(null!==t)Wa=t,Va=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Va=e).memoizedState,baseState:Va.baseState,baseQueue:Va.baseQueue,queue:Va.queue,next:null},null===Wa?Ha.memoizedState=Wa=e:Wa=Wa.next=e}return Wa}function Xa(e,t){return"function"==typeof t?t(e):t}function Ga(e){var t=Ka(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Va,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var c=l=a=null,u=o;do{var s=u.expirationTime;if(s<Ua){var f={expirationTime:u.expirationTime,suspenseConfig:u.suspenseConfig,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===c?(l=c=f,a=r):c=c.next=f,s>Ha.expirationTime&&(Ha.expirationTime=s,ic(s))}else null!==c&&(c=c.next={expirationTime:1073741823,suspenseConfig:u.suspenseConfig,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),ac(s,u.suspenseConfig),r=u.eagerReducer===e?u.eagerState:e(r,u.action);u=u.next}while(null!==u&&u!==o);null===c?a=r:c.next=l,Fr(r,t.memoizedState)||(Ni=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=c,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Za(e){var t=Ka(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);Fr(a,t.memoizedState)||(Ni=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function ei(e){var t=Qa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Xa,lastRenderedState:e}).dispatch=hi.bind(null,Ha,e),[t.memoizedState,e]}function ti(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ha.updateQueue)?(t={lastEffect:null},Ha.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ni(){return Ka().memoizedState}function ri(e,t,n,r){var o=Qa();Ha.effectTag|=e,o.memoizedState=ti(1|t,n,void 0,void 0===r?null:r)}function oi(e,t,n,r){var o=Ka();r=void 0===r?null:r;var a=void 0;if(null!==Va){var i=Va.memoizedState;if(a=i.destroy,null!==r&&Ya(r,i.deps))return void ti(t,n,a,r)}Ha.effectTag|=e,o.memoizedState=ti(1|t,n,a,r)}function ai(e,t){return ri(516,4,e,t)}function ii(e,t){return oi(516,4,e,t)}function li(e,t){return oi(4,2,e,t)}function ci(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ui(e,t,n){return n=null!=n?n.concat([e]):null,oi(4,2,ci.bind(null,t,e),n)}function si(){}function fi(e,t){return Qa().memoizedState=[e,void 0===t?null:t],e}function di(e,t){var n=Ka();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ya(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pi(e,t){var n=Ka();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ya(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function mi(e,t,n){var r=Uo();Vo(98>r?98:r,(function(){e(!0)})),Vo(97<r?97:r,(function(){var r=La.suspense;La.suspense=void 0===t?null:t;try{e(!1),n()}finally{La.suspense=r}}))}function hi(e,t,n){var r=ql(),o=pa.suspense;o={expirationTime:r=Yl(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var a=t.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),t.pending=o,a=e.alternate,e===Ha||null!==a&&a===Ha)$a=!0,o.expirationTime=Ua,Ha.expirationTime=Ua;else{if(0===e.expirationTime&&(null===a||0===a.expirationTime)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.eagerReducer=a,o.eagerState=l,Fr(l,i))return}catch(e){}Jl(e,r)}}var vi={readContext:oa,useCallback:qa,useContext:qa,useEffect:qa,useImperativeHandle:qa,useLayoutEffect:qa,useMemo:qa,useReducer:qa,useRef:qa,useState:qa,useDebugValue:qa,useResponder:qa,useDeferredValue:qa,useTransition:qa},gi={readContext:oa,useCallback:fi,useContext:oa,useEffect:ai,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ri(4,2,ci.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ri(4,2,e,t)},useMemo:function(e,t){var n=Qa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Qa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=hi.bind(null,Ha,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Qa().memoizedState=e},useState:ei,useDebugValue:si,useResponder:Ma,useDeferredValue:function(e,t){var n=ei(e),r=n[0],o=n[1];return ai((function(){var n=La.suspense;La.suspense=void 0===t?null:t;try{o(e)}finally{La.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ei(!1),n=t[0];return t=t[1],[fi(mi.bind(null,t,e),[t,e]),n]}},bi={readContext:oa,useCallback:di,useContext:oa,useEffect:ii,useImperativeHandle:ui,useLayoutEffect:li,useMemo:pi,useReducer:Ga,useRef:ni,useState:function(){return Ga(Xa)},useDebugValue:si,useResponder:Ma,useDeferredValue:function(e,t){var n=Ga(Xa),r=n[0],o=n[1];return ii((function(){var n=La.suspense;La.suspense=void 0===t?null:t;try{o(e)}finally{La.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Ga(Xa),n=t[0];return t=t[1],[di(mi.bind(null,t,e),[t,e]),n]}},yi={readContext:oa,useCallback:di,useContext:oa,useEffect:ii,useImperativeHandle:ui,useLayoutEffect:li,useMemo:pi,useReducer:Za,useRef:ni,useState:function(){return Za(Xa)},useDebugValue:si,useResponder:Ma,useDeferredValue:function(e,t){var n=Za(Xa),r=n[0],o=n[1];return ii((function(){var n=La.suspense;La.suspense=void 0===t?null:t;try{o(e)}finally{La.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Za(Xa),n=t[0];return t=t[1],[di(mi.bind(null,t,e),[t,e]),n]}},Ai=null,Ei=null,wi=!1;function xi(e,t){var n=Cc(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ci(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function ki(e){if(wi){var t=Ei;if(t){var n=t;if(!Ci(e,t)){if(!(t=En(n.nextSibling))||!Ci(e,t))return e.effectTag=-1025&e.effectTag|2,wi=!1,void(Ai=e);xi(Ai,n)}Ai=e,Ei=En(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,wi=!1,Ai=e}}function Si(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ai=e}function Oi(e){if(e!==Ai)return!1;if(!wi)return Si(e),wi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!bn(t,e.memoizedProps))for(t=Ei;t;)xi(e,t),t=En(t.nextSibling);if(Si(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ei=En(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ei=null}}else Ei=Ai?En(e.stateNode.nextSibling):null;return!0}function Ti(){Ei=Ai=null,wi=!1}var Ii=K.ReactCurrentOwner,Ni=!1;function _i(e,t,n,r){t.child=null===e?Sa(t,null,n,r):ka(t,e.child,n,r)}function Pi(e,t,n,r,o){n=n.render;var a=t.ref;return ra(t,o),r=Ja(e,t,n,r,a,o),null===e||Ni?(t.effectTag|=1,_i(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ji(e,t,o))}function ji(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||kc(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Oc(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Ri(e,t,i,r,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:zr)(o,r)&&e.ref===t.ref)?Ji(e,t,a):(t.effectTag|=1,(e=Sc(i,r)).ref=t.ref,e.return=t,t.child=e)}function Ri(e,t,n,r,o,a){return null!==e&&zr(e.memoizedProps,r)&&e.ref===t.ref&&(Ni=!1,o<a)?(t.expirationTime=e.expirationTime,Ji(e,t,a)):Di(e,t,n,r,a)}function Bi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Di(e,t,n,r,o){var a=vo(n)?mo:fo.current;return a=ho(t,a),ra(t,o),n=Ja(e,t,n,r,a,o),null===e||Ni?(t.effectTag|=1,_i(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ji(e,t,o))}function Fi(e,t,n,r,o){if(vo(n)){var a=!0;Ao(t)}else a=!1;if(ra(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),ba(t,n,r),Aa(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var c=i.context,u=n.contextType;"object"==typeof u&&null!==u?u=oa(u):u=ho(t,u=vo(n)?mo:fo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||c!==u)&&ya(t,i,r,u),aa=!1;var d=t.memoizedState;i.state=d,fa(t,r,i,o),c=t.memoizedState,l!==r||d!==c||po.current||aa?("function"==typeof s&&(ha(t,n,s,r),c=t.memoizedState),(l=aa||ga(t,n,l,r,d,c,u))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=c),i.props=r,i.state=c,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,la(e,t),l=t.memoizedProps,i.props=t.type===t.elementType?l:Qo(t.type,l),c=i.context,"object"==typeof(u=n.contextType)&&null!==u?u=oa(u):u=ho(t,u=vo(n)?mo:fo.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||c!==u)&&ya(t,i,r,u),aa=!1,c=t.memoizedState,i.state=c,fa(t,r,i,o),d=t.memoizedState,l!==r||c!==d||po.current||aa?("function"==typeof s&&(ha(t,n,s,r),d=t.memoizedState),(s=aa||ga(t,n,l,r,c,d,u))?(f||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,d,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,d,u)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),i.props=r,i.state=d,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),r=!1);return Mi(e,t,n,r,a,o)}function Mi(e,t,n,r,o,a){Bi(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return o&&Eo(t,n,!1),Ji(e,t,a);r=t.stateNode,Ii.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=ka(t,e.child,null,a),t.child=ka(t,null,l,a)):_i(e,t,l,a),t.memoizedState=r.state,o&&Eo(t,n,!0),t.child}function zi(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),Pa(e,t.containerInfo)}var Li,Ui,Hi,Vi={dehydrated:null,retryTime:0};function Wi(e,t,n){var r,o=t.mode,a=t.pendingProps,i=Da.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&i)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),uo(Da,1&i),null===e){if(void 0!==a.fallback&&ki(t),l){if(l=a.fallback,(a=Tc(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Tc(l,o,n,null)).return=t,a.sibling=n,t.memoizedState=Vi,t.child=a,n}return o=a.children,t.memoizedState=null,t.child=Sa(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(a=a.fallback,(n=Sc(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=Sc(o,a)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Vi,t.child=n,o}return n=ka(t,e.child,a.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=a.fallback,(a=Tc(null,o,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Tc(l,o,n,null)).return=t,a.sibling=n,n.effectTag|=2,a.childExpirationTime=0,t.memoizedState=Vi,t.child=a,n}return t.memoizedState=null,t.child=ka(t,e,a.children,n)}function $i(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),na(e.return,t)}function qi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=o,i.lastEffect=a)}function Yi(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(_i(e,t,r.children,n),0!=(2&(r=Da.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&$i(e,n);else if(19===e.tag)$i(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(uo(Da,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Fa(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),qi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Fa(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}qi(t,!0,n,null,a,t.lastEffect);break;case"together":qi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ji(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&ic(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Sc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Sc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Qi(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ki(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vo(t.type)&&go(),null;case 3:return ja(),co(po),co(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Oi(t)||(t.effectTag|=4),null;case 5:Ba(t),n=_a(Na.current);var a=t.type;if(null!==e&&null!=t.stateNode)Ui(e,t,a,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=_a(Ta.current),Oi(t)){r=t.stateNode,a=t.type;var l=t.memoizedProps;switch(r[Cn]=t,r[kn]=l,a){case"iframe":case"object":case"embed":Yt("load",r);break;case"video":case"audio":for(e=0;e<Ke.length;e++)Yt(Ke[e],r);break;case"source":Yt("error",r);break;case"img":case"image":case"link":Yt("error",r),Yt("load",r);break;case"form":Yt("reset",r),Yt("submit",r);break;case"details":Yt("toggle",r);break;case"input":xe(r,l),Yt("invalid",r),cn(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Yt("invalid",r),cn(n,"onChange");break;case"textarea":_e(r,l),Yt("invalid",r),cn(n,"onChange")}for(var c in on(a,l),e=null,l)if(l.hasOwnProperty(c)){var u=l[c];"children"===c?"string"==typeof u?r.textContent!==u&&(e=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(e=["children",""+u]):C.hasOwnProperty(c)&&null!=u&&cn(n,c)}switch(a){case"input":Ae(r),Se(r,l,!0);break;case"textarea":Ae(r),je(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=un)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(c=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=De(a)),e===ln?"script"===a?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(a,{is:r.is}):(e=c.createElement(a),"select"===a&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,a),e[Cn]=t,e[kn]=r,Li(e,t),t.stateNode=e,c=an(a,r),a){case"iframe":case"object":case"embed":Yt("load",e),u=r;break;case"video":case"audio":for(u=0;u<Ke.length;u++)Yt(Ke[u],e);u=r;break;case"source":Yt("error",e),u=r;break;case"img":case"image":case"link":Yt("error",e),Yt("load",e),u=r;break;case"form":Yt("reset",e),Yt("submit",e),u=r;break;case"details":Yt("toggle",e),u=r;break;case"input":xe(e,r),u=we(e,r),Yt("invalid",e),cn(n,"onChange");break;case"option":u=Te(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},u=o({},r,{value:void 0}),Yt("invalid",e),cn(n,"onChange");break;case"textarea":_e(e,r),u=Ne(e,r),Yt("invalid",e),cn(n,"onChange");break;default:u=r}on(a,u);var s=u;for(l in s)if(s.hasOwnProperty(l)){var f=s[l];"style"===l?nn(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ze(e,f):"children"===l?"string"==typeof f?("textarea"!==a||""!==f)&&Le(e,f):"number"==typeof f&&Le(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(C.hasOwnProperty(l)?null!=f&&cn(n,l):null!=f&&X(e,l,f,c))}switch(a){case"input":Ae(e),Se(e,r,!1);break;case"textarea":Ae(e),je(e);break;case"option":null!=r.value&&e.setAttribute("value",""+be(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Ie(e,!!r.multiple,n,!1):null!=r.defaultValue&&Ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof u.onClick&&(e.onclick=un)}gn(a,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Hi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=_a(Na.current),_a(Ta.current),Oi(t)?(n=t.stateNode,r=t.memoizedProps,n[Cn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Cn]=t,t.stateNode=n)}return null;case 13:return co(Da),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Oi(t):(r=null!==(a=e.memoizedState),n||null===a||null!==(a=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=a,a.nextEffect=l):(t.firstEffect=t.lastEffect=a,a.nextEffect=null),a.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Da.current)?Ol===Al&&(Ol=El):(Ol!==Al&&Ol!==El||(Ol=wl),0!==Pl&&null!==Cl&&(jc(Cl,Sl),Rc(Cl,Pl)))),(n||r)&&(t.effectTag|=4),null);case 4:return ja(),null;case 10:return ta(t),null;case 17:return vo(t.type)&&go(),null;case 19:if(co(Da),null===(r=t.memoizedState))return null;if(a=0!=(64&t.effectTag),null===(l=r.rendering)){if(a)Qi(r,!1);else if(Ol!==Al||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=Fa(l))){for(t.effectTag|=64,Qi(r,!1),null!==(a=e.updateQueue)&&(t.updateQueue=a,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(a=r).effectTag&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(e=a.alternate)?(a.childExpirationTime=0,a.expirationTime=l,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null):(a.childExpirationTime=e.childExpirationTime,a.expirationTime=e.expirationTime,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,l=e.dependencies,a.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return uo(Da,1&Da.current|2),t.child}l=l.sibling}}else{if(!a)if(null!==(e=Fa(l))){if(t.effectTag|=64,a=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Qi(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Lo()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,a=!0,Qi(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Lo()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Lo(),n.sibling=null,t=Da.current,uo(Da,a?1&t|2:1&t),n):null}throw Error(i(156,t.tag))}function Xi(e){switch(e.tag){case 1:vo(e.type)&&go();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(ja(),co(po),co(fo),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return Ba(e),null;case 13:return co(Da),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return co(Da),null;case 4:return ja(),null;case 10:return ta(e),null;default:return null}}function Gi(e,t){return{value:e,source:t,stack:ge(t)}}Li=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ui=function(e,t,n,r,a){var i=e.memoizedProps;if(i!==r){var l,c,u=t.stateNode;switch(_a(Ta.current),e=null,n){case"input":i=we(u,i),r=we(u,r),e=[];break;case"option":i=Te(u,i),r=Te(u,r),e=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":i=Ne(u,i),r=Ne(u,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(u.onclick=un)}for(l in on(n,r),n=null,i)if(!r.hasOwnProperty(l)&&i.hasOwnProperty(l)&&null!=i[l])if("style"===l)for(c in u=i[l])u.hasOwnProperty(c)&&(n||(n={}),n[c]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(C.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var s=r[l];if(u=null!=i?i[l]:void 0,r.hasOwnProperty(l)&&s!==u&&(null!=s||null!=u))if("style"===l)if(u){for(c in u)!u.hasOwnProperty(c)||s&&s.hasOwnProperty(c)||(n||(n={}),n[c]="");for(c in s)s.hasOwnProperty(c)&&u[c]!==s[c]&&(n||(n={}),n[c]=s[c])}else n||(e||(e=[]),e.push(l,n)),n=s;else"dangerouslySetInnerHTML"===l?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(e=e||[]).push(l,s)):"children"===l?u===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(l,""+s):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(C.hasOwnProperty(l)?(null!=s&&cn(a,l),e||u===s||(e=[])):(e=e||[]).push(l,s))}n&&(e=e||[]).push("style",n),a=e,(t.updateQueue=a)&&(t.effectTag|=4)}},Hi=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Zi="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ge(n)),null!==n&&ve(n.type),t=t.value,null!==e&&1===e.tag&&ve(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){bc(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(i(163))}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function al(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ol(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Qo(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&da(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}da(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&gn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Dt(n)))));case 19:case 17:case 20:case 21:return}throw Error(i(163))}function il(e,t,n){switch("function"==typeof wc&&wc(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Vo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){bc(o,e)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){bc(e,t)}}(t,n);break;case 5:tl(t);break;case 4:sl(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function cl(e){return 5===e.tag||3===e.tag||4===e.tag}function ul(e){e:{for(var t=e.return;null!==t;){if(cl(t)){var n=t;break e}t=t.return}throw Error(i(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.effectTag&&(Le(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||cl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=un));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,a=5===o||6===o;if(a)t=a?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function sl(e,t,n){for(var r,o,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(i(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var c=e,u=a,s=n,f=u;;)if(il(c,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===u)break e;for(;null===f.sibling;){if(null===f.return||f.return===u)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(c=r,u=a.stateNode,8===c.nodeType?c.parentNode.removeChild(u):c.removeChild(u)):r.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){r=a.stateNode.containerInfo,o=!0,a.child.return=a,a=a.child;continue}}else if(il(e,a,n),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function fl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rl(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[kn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ce(n,r),an(e,o),t=an(e,r),o=0;o<a.length;o+=2){var l=a[o],c=a[o+1];"style"===l?nn(n,c):"dangerouslySetInnerHTML"===l?ze(n,c):"children"===l?Le(n,c):X(n,l,c,t)}switch(e){case"input":ke(n,r);break;case"textarea":Pe(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Ie(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Ie(n,!!r.multiple,r.defaultValue,!0):Ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Dt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Rl=Lo()),null!==n)e:for(e=n;;){if(5===e.tag)a=e.stateNode,r?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,a.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void dl(t);case 19:return void dl(t);case 17:return}throw Error(i(163))}function dl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zi),t.forEach((function(t){var r=Ac.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function ml(e,t,n){(n=ca(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Dl||(Dl=!0,Fl=r),el(e,t)},n}function hl(e,t,n){(n=ca(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return el(e,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ml?Ml=new Set([this]):Ml.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var vl,gl=Math.ceil,bl=K.ReactCurrentDispatcher,yl=K.ReactCurrentOwner,Al=0,El=3,wl=4,xl=0,Cl=null,kl=null,Sl=0,Ol=Al,Tl=null,Il=1073741823,Nl=1073741823,_l=null,Pl=0,jl=!1,Rl=0,Bl=null,Dl=!1,Fl=null,Ml=null,zl=!1,Ll=null,Ul=90,Hl=null,Vl=0,Wl=null,$l=0;function ql(){return 0!=(48&xl)?1073741821-(Lo()/10|0):0!==$l?$l:$l=1073741821-(Lo()/10|0)}function Yl(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Uo();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&xl))return Sl;if(null!==n)e=Jo(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Jo(e,150,100);break;case 97:case 96:e=Jo(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==Cl&&e===Sl&&--e,e}function Jl(e,t){if(50<Vl)throw Vl=0,Wl=null,Error(i(185));if(null!==(e=Ql(e,t))){var n=Uo();1073741823===t?0!=(8&xl)&&0==(48&xl)?Zl(e):(Xl(e),0===xl&&qo()):Xl(e),0==(4&xl)||98!==n&&99!==n||(null===Hl?Hl=new Map([[e,t]]):(void 0===(n=Hl.get(e))||n>t)&&Hl.set(e,t))}}function Ql(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Cl===o&&(ic(t),Ol===wl&&jc(o,Sl)),Rc(o,t)),o}function Kl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Pc(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Xl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=$o(Zl.bind(null,e));else{var t=Kl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=ql();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==jo&&Co(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?$o(Zl.bind(null,e)):Wo(r,Gl.bind(null,e),{timeout:10*(1073741821-t)-Lo()}),e.callbackNode=t}}}function Gl(e,t){if($l=0,t)return Bc(e,t=ql()),Xl(e),null;var n=Kl(e);if(0!==n){if(t=e.callbackNode,0!=(48&xl))throw Error(i(327));if(hc(),e===Cl&&n===Sl||nc(e,n),null!==kl){var r=xl;xl|=16;for(var o=oc();;)try{cc();break}catch(t){rc(e,t)}if(ea(),xl=r,bl.current=o,1===Ol)throw t=Tl,nc(e,n),jc(e,n),Xl(e),t;if(null===kl)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Ol,Cl=null,r){case Al:case 1:throw Error(i(345));case 2:Bc(e,2<n?2:n);break;case El:if(jc(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fc(o)),1073741823===Il&&10<(o=Rl+500-Lo())){if(jl){var a=e.lastPingedTime;if(0===a||a>=n){e.lastPingedTime=n,nc(e,n);break}}if(0!==(a=Kl(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=yn(dc.bind(null,e),o);break}dc(e);break;case wl:if(jc(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fc(o)),jl&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,nc(e,n);break}if(0!==(o=Kl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Nl?r=10*(1073741821-Nl)-Lo():1073741823===Il?r=0:(r=10*(1073741821-Il)-5e3,0>(r=(o=Lo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*gl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=yn(dc.bind(null,e),r);break}dc(e);break;case 5:if(1073741823!==Il&&null!==_l){a=Il;var l=_l;if(0>=(r=0|l.busyMinDurationMs)?r=0:(o=0|l.busyDelayMs,r=(a=Lo()-(10*(1073741821-a)-(0|l.timeoutMs||5e3)))<=o?0:o+r-a),10<r){jc(e,n),e.timeoutHandle=yn(dc.bind(null,e),r);break}}dc(e);break;default:throw Error(i(329))}if(Xl(e),e.callbackNode===t)return Gl.bind(null,e)}}return null}function Zl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&xl))throw Error(i(327));if(hc(),e===Cl&&t===Sl||nc(e,t),null!==kl){var n=xl;xl|=16;for(var r=oc();;)try{lc();break}catch(t){rc(e,t)}if(ea(),xl=n,bl.current=r,1===Ol)throw n=Tl,nc(e,t),jc(e,t),Xl(e),n;if(null!==kl)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Cl=null,dc(e),Xl(e)}return null}function ec(e,t){var n=xl;xl|=1;try{return e(t)}finally{0===(xl=n)&&qo()}}function tc(e,t){var n=xl;xl&=-2,xl|=8;try{return e(t)}finally{0===(xl=n)&&qo()}}function nc(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,An(n)),null!==kl)for(n=kl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&go();break;case 3:ja(),co(po),co(fo);break;case 5:Ba(r);break;case 4:ja();break;case 13:case 19:co(Da);break;case 10:ta(r)}n=n.return}Cl=e,kl=Sc(e.current,null),Sl=t,Ol=Al,Tl=null,Nl=Il=1073741823,_l=null,Pl=0,jl=!1}function rc(e,t){for(;;){try{if(ea(),za.current=vi,$a)for(var n=Ha.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Ua=0,Wa=Va=Ha=null,$a=!1,null===kl||null===kl.return)return Ol=1,Tl=t,kl=null;e:{var o=e,a=kl.return,i=kl,l=t;if(t=Sl,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&i.mode)){var u=i.alternate;u?(i.updateQueue=u.updateQueue,i.memoizedState=u.memoizedState,i.expirationTime=u.expirationTime):(i.updateQueue=null,i.memoizedState=null)}var s=0!=(1&Da.current),f=a;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var m=f.memoizedProps;d=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!s)}}if(d){var h=f.updateQueue;if(null===h){var v=new Set;v.add(c),f.updateQueue=v}else h.add(c);if(0==(2&f.mode)){if(f.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var g=ca(1073741823,null);g.tag=2,ua(i,g)}i.expirationTime=1073741823;break e}l=void 0,i=t;var b=o.pingCache;if(null===b?(b=o.pingCache=new pl,l=new Set,b.set(c,l)):void 0===(l=b.get(c))&&(l=new Set,b.set(c,l)),!l.has(i)){l.add(i);var y=yc.bind(null,o,c,i);c.then(y,y)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);l=Error((ve(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ge(i))}5!==Ol&&(Ol=2),l=Gi(l,i),f=a;do{switch(f.tag){case 3:c=l,f.effectTag|=4096,f.expirationTime=t,sa(f,ml(f,c,t));break e;case 1:c=l;var A=f.type,E=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof A.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Ml||!Ml.has(E)))){f.effectTag|=4096,f.expirationTime=t,sa(f,hl(f,c,t));break e}}f=f.return}while(null!==f)}kl=sc(kl)}catch(e){t=e;continue}break}}function oc(){var e=bl.current;return bl.current=vi,null===e?vi:e}function ac(e,t){e<Il&&2<e&&(Il=e),null!==t&&e<Nl&&2<e&&(Nl=e,_l=t)}function ic(e){e>Pl&&(Pl=e)}function lc(){for(;null!==kl;)kl=uc(kl)}function cc(){for(;null!==kl&&!Ro();)kl=uc(kl)}function uc(e){var t=vl(e.alternate,e,Sl);return e.memoizedProps=e.pendingProps,null===t&&(t=sc(e)),yl.current=null,t}function sc(e){kl=e;do{var t=kl.alternate;if(e=kl.return,0==(2048&kl.effectTag)){if(t=Ki(t,kl,Sl),1===Sl||1!==kl.childExpirationTime){for(var n=0,r=kl.child;null!==r;){var o=r.expirationTime,a=r.childExpirationTime;o>n&&(n=o),a>n&&(n=a),r=r.sibling}kl.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=kl.firstEffect),null!==kl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=kl.firstEffect),e.lastEffect=kl.lastEffect),1<kl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=kl:e.firstEffect=kl,e.lastEffect=kl))}else{if(null!==(t=Xi(kl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=kl.sibling))return t;kl=e}while(null!==kl);return Ol===Al&&(Ol=5),null}function fc(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function dc(e){var t=Uo();return Vo(99,pc.bind(null,e,t)),null}function pc(e,t){do{hc()}while(null!==Ll);if(0!=(48&xl))throw Error(i(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=fc(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Cl&&(kl=Cl=null,Sl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var a=xl;xl|=32,yl.current=null,hn=qt;var l=pn();if(mn(l)){if("selectionStart"in l)var c={start:l.selectionStart,end:l.selectionEnd};else e:{var u=(c=(c=l.ownerDocument)&&c.defaultView||window).getSelection&&c.getSelection();if(u&&0!==u.rangeCount){c=u.anchorNode;var s=u.anchorOffset,f=u.focusNode;u=u.focusOffset;try{c.nodeType,f.nodeType}catch(e){c=null;break e}var d=0,p=-1,m=-1,h=0,v=0,g=l,b=null;t:for(;;){for(var y;g!==c||0!==s&&3!==g.nodeType||(p=d+s),g!==f||0!==u&&3!==g.nodeType||(m=d+u),3===g.nodeType&&(d+=g.nodeValue.length),null!==(y=g.firstChild);)b=g,g=y;for(;;){if(g===l)break t;if(b===c&&++h===s&&(p=d),b===f&&++v===u&&(m=d),null!==(y=g.nextSibling))break;b=(g=b).parentNode}g=y}c=-1===p||-1===m?null:{start:p,end:m}}else c=null}c=c||{start:0,end:0}}else c=null;vn={activeElementDetached:null,focusedElem:l,selectionRange:c},qt=!1,Bl=o;do{try{mc()}catch(e){if(null===Bl)throw Error(i(330));bc(Bl,e),Bl=Bl.nextEffect}}while(null!==Bl);Bl=o;do{try{for(l=e,c=t;null!==Bl;){var A=Bl.effectTag;if(16&A&&Le(Bl.stateNode,""),128&A){var E=Bl.alternate;if(null!==E){var w=E.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&A){case 2:ul(Bl),Bl.effectTag&=-3;break;case 6:ul(Bl),Bl.effectTag&=-3,fl(Bl.alternate,Bl);break;case 1024:Bl.effectTag&=-1025;break;case 1028:Bl.effectTag&=-1025,fl(Bl.alternate,Bl);break;case 4:fl(Bl.alternate,Bl);break;case 8:sl(l,s=Bl,c),ll(s)}Bl=Bl.nextEffect}}catch(e){if(null===Bl)throw Error(i(330));bc(Bl,e),Bl=Bl.nextEffect}}while(null!==Bl);if(w=vn,E=pn(),A=w.focusedElem,c=w.selectionRange,E!==A&&A&&A.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(A.ownerDocument.documentElement,A)){null!==c&&mn(A)&&(E=c.start,void 0===(w=c.end)&&(w=E),"selectionStart"in A?(A.selectionStart=E,A.selectionEnd=Math.min(w,A.value.length)):(w=(E=A.ownerDocument||document)&&E.defaultView||window).getSelection&&(w=w.getSelection(),s=A.textContent.length,l=Math.min(c.start,s),c=void 0===c.end?l:Math.min(c.end,s),!w.extend&&l>c&&(s=c,c=l,l=s),s=dn(A,l),f=dn(A,c),s&&f&&(1!==w.rangeCount||w.anchorNode!==s.node||w.anchorOffset!==s.offset||w.focusNode!==f.node||w.focusOffset!==f.offset)&&((E=E.createRange()).setStart(s.node,s.offset),w.removeAllRanges(),l>c?(w.addRange(E),w.extend(f.node,f.offset)):(E.setEnd(f.node,f.offset),w.addRange(E))))),E=[];for(w=A;w=w.parentNode;)1===w.nodeType&&E.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof A.focus&&A.focus(),A=0;A<E.length;A++)(w=E[A]).element.scrollLeft=w.left,w.element.scrollTop=w.top}qt=!!hn,vn=hn=null,e.current=n,Bl=o;do{try{for(A=e;null!==Bl;){var x=Bl.effectTag;if(36&x&&al(A,Bl.alternate,Bl),128&x){E=void 0;var C=Bl.ref;if(null!==C){var k=Bl.stateNode;switch(Bl.tag){case 5:E=k;break;default:E=k}"function"==typeof C?C(E):C.current=E}}Bl=Bl.nextEffect}}catch(e){if(null===Bl)throw Error(i(330));bc(Bl,e),Bl=Bl.nextEffect}}while(null!==Bl);Bl=null,Bo(),xl=a}else e.current=n;if(zl)zl=!1,Ll=e,Ul=t;else for(Bl=o;null!==Bl;)t=Bl.nextEffect,Bl.nextEffect=null,Bl=t;if(0===(t=e.firstPendingTime)&&(Ml=null),1073741823===t?e===Wl?Vl++:(Vl=0,Wl=e):Vl=0,"function"==typeof Ec&&Ec(n.stateNode,r),Xl(e),Dl)throw Dl=!1,e=Fl,Fl=null,e;return 0!=(8&xl)||qo(),null}function mc(){for(;null!==Bl;){var e=Bl.effectTag;0!=(256&e)&&nl(Bl.alternate,Bl),0==(512&e)||zl||(zl=!0,Wo(97,(function(){return hc(),null}))),Bl=Bl.nextEffect}}function hc(){if(90!==Ul){var e=97<Ul?97:Ul;return Ul=90,Vo(e,vc)}}function vc(){if(null===Ll)return!1;var e=Ll;if(Ll=null,0!=(48&xl))throw Error(i(331));var t=xl;for(xl|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rl(5,n),ol(5,n)}}catch(t){if(null===e)throw Error(i(330));bc(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return xl=t,qo(),!0}function gc(e,t,n){ua(e,t=ml(e,t=Gi(n,t),1073741823)),null!==(e=Ql(e,1073741823))&&Xl(e)}function bc(e,t){if(3===e.tag)gc(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){gc(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ml||!Ml.has(r))){ua(n,e=hl(n,e=Gi(t,e),1073741823)),null!==(n=Ql(n,1073741823))&&Xl(n);break}}n=n.return}}function yc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Cl===e&&Sl===n?Ol===wl||Ol===El&&1073741823===Il&&Lo()-Rl<500?nc(e,Sl):jl=!0:Pc(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Xl(e)))}function Ac(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Yl(t=ql(),e,null)),null!==(e=Ql(e,t))&&Xl(e)}vl=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)Ni=!0;else{if(r<n){switch(Ni=!1,t.tag){case 3:zi(t),Ti();break;case 5:if(Ra(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vo(t.type)&&Ao(t);break;case 4:Pa(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,uo(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Wi(e,t,n):(uo(Da,1&Da.current),null!==(t=Ji(e,t,n))?t.sibling:null);uo(Da,1&Da.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Yi(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),uo(Da,Da.current),!r)return null}return Ji(e,t,n)}Ni=!1}}else Ni=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=ho(t,fo.current),ra(t,n),o=Ja(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vo(r)){var a=!0;Ao(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ia(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&ha(t,r,l,e),o.updater=va,t.stateNode=o,o._reactInternalFiber=t,Aa(t,r,e,n),t=Mi(null,t,r,!0,a,n)}else t.tag=0,_i(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,a=t.tag=function(e){if("function"==typeof e)return kc(e)?1:0;if(null!=e){if((e=e.$$typeof)===ce)return 11;if(e===fe)return 14}return 2}(o),e=Qo(o,e),a){case 0:t=Di(null,t,o,e,n);break e;case 1:t=Fi(null,t,o,e,n);break e;case 11:t=Pi(null,t,o,e,n);break e;case 14:t=ji(null,t,o,Qo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Di(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Fi(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 3:if(zi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,la(e,t),fa(t,r,null,n),(r=t.memoizedState.element)===o)Ti(),t=Ji(e,t,n);else{if((o=t.stateNode.hydrate)&&(Ei=En(t.stateNode.containerInfo.firstChild),Ai=t,o=wi=!0),o)for(n=Sa(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else _i(e,t,r,n),Ti();t=t.child}return t;case 5:return Ra(t),null===e&&ki(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,bn(r,o)?l=null:null!==a&&bn(r,a)&&(t.effectTag|=16),Bi(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(_i(e,t,l,n),t=t.child),t;case 6:return null===e&&ki(t),null;case 13:return Wi(e,t,n);case 4:return Pa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ka(t,null,r,n):_i(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Pi(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 7:return _i(e,t,t.pendingProps,n),t.child;case 8:case 12:return _i(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var c=t.type._context;if(uo(Ko,c._currentValue),c._currentValue=a,null!==l)if(c=l.value,0===(a=Fr(c,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(c,a):1073741823))){if(l.children===o.children&&!po.current){t=Ji(e,t,n);break e}}else for(null!==(c=t.child)&&(c.return=t);null!==c;){var u=c.dependencies;if(null!==u){l=c.child;for(var s=u.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&a)){1===c.tag&&((s=ca(n,null)).tag=2,ua(c,s)),c.expirationTime<n&&(c.expirationTime=n),null!==(s=c.alternate)&&s.expirationTime<n&&(s.expirationTime=n),na(c.return,n),u.expirationTime<n&&(u.expirationTime=n);break}s=s.next}}else l=10===c.tag&&c.type===t.type?null:c.child;if(null!==l)l.return=c;else for(l=c;null!==l;){if(l===t){l=null;break}if(null!==(c=l.sibling)){c.return=l.return,l=c;break}l=l.return}c=l}_i(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,ra(t,n),r=r(o=oa(o,a.unstable_observedBits)),t.effectTag|=1,_i(e,t,r,n),t.child;case 14:return a=Qo(o=t.type,t.pendingProps),ji(e,t,o,a=Qo(o.type,a),r,n);case 15:return Ri(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vo(r)?(e=!0,Ao(t)):e=!1,ra(t,n),ba(t,r,o),Aa(t,r,o,n),Mi(null,t,r,!0,e,n);case 19:return Yi(e,t,n)}throw Error(i(156,t.tag))};var Ec=null,wc=null;function xc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Cc(e,t,n,r){return new xc(e,t,n,r)}function kc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Sc(e,t){var n=e.alternate;return null===n?((n=Cc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Oc(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)kc(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return Tc(n.children,o,a,t);case le:l=8,o|=7;break;case re:l=8,o|=1;break;case oe:return(e=Cc(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=a,e;case ue:return(e=Cc(13,n,t,o)).type=ue,e.elementType=ue,e.expirationTime=a,e;case se:return(e=Cc(19,n,t,o)).elementType=se,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ae:l=10;break e;case ie:l=9;break e;case ce:l=11;break e;case fe:l=14;break e;case de:l=16,r=null;break e;case pe:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Cc(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=a,t}function Tc(e,t,n,r){return(e=Cc(7,e,r,t)).expirationTime=n,e}function Ic(e,t,n){return(e=Cc(6,e,null,t)).expirationTime=n,e}function Nc(e,t,n){return(t=Cc(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function _c(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Pc(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function jc(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Rc(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Bc(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Dc(e,t,n,r){var o=t.current,a=ql(),l=pa.suspense;a=Yl(a,o,l);e:if(n){t:{if(Ze(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(i(170));var c=n;do{switch(c.tag){case 3:c=c.stateNode.context;break t;case 1:if(vo(c.type)){c=c.stateNode.__reactInternalMemoizedMergedChildContext;break t}}c=c.return}while(null!==c);throw Error(i(171))}if(1===n.tag){var u=n.type;if(vo(u)){n=yo(n,u,c);break e}}n=c}else n=so;return null===t.context?t.context=n:t.pendingContext=n,(t=ca(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ua(o,t),Jl(o,a),a}function Fc(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Mc(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function zc(e,t){Mc(e,t),(e=e.alternate)&&Mc(e,t)}function Lc(e,t,n){var r=new _c(e,t,n=null!=n&&!0===n.hydrate),o=Cc(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ia(o),e[Sn]=r.current,n&&0!==t&&function(e,t){var n=Ge(t);St.forEach((function(e){mt(e,t,n)})),Ot.forEach((function(e){mt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Uc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Hc(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Fc(i);l.call(e)}}Dc(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Lc(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var c=o;o=function(){var e=Fc(i);c.call(e)}}tc((function(){Dc(t,i,e,o)}))}return Fc(i)}function Vc(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Wc(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Uc(t))throw Error(i(200));return Vc(e,t,null,n)}Lc.prototype.render=function(e){Dc(e,this._internalRoot,null,null)},Lc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Dc(null,e,null,(function(){t[Sn]=null}))},ht=function(e){if(13===e.tag){var t=Jo(ql(),150,100);Jl(e,t),zc(e,t)}},vt=function(e){13===e.tag&&(Jl(e,3),zc(e,3))},gt=function(e){if(13===e.tag){var t=ql();Jl(e,t=Yl(t,e,null)),zc(e,t)}},T=function(e,t,n){switch(t){case"input":if(ke(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Nn(r);if(!o)throw Error(i(90));Ee(r),ke(r,o)}}}break;case"textarea":Pe(e,n);break;case"select":null!=(t=n.value)&&Ie(e,!!n.multiple,t,!1)}},R=ec,B=function(e,t,n,r,o){var a=xl;xl|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(xl=a)&&qo()}},D=function(){0==(49&xl)&&(function(){if(null!==Hl){var e=Hl;Hl=null,e.forEach((function(e,t){Bc(t,e),Xl(t)})),qo()}}(),hc())},F=function(e,t){var n=xl;xl|=2;try{return e(t)}finally{0===(xl=n)&&qo()}};var $c,qc,Yc={Events:[Tn,In,Nn,S,x,Fn,function(e){ot(e,Dn)},P,j,Xt,lt,hc,{current:!1}]};qc=($c={findFiberByHostInstance:On,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ec=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},wc=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},$c,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:K.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return qc?qc(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Yc,t.createPortal=Wc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&xl))throw Error(i(187));var n=xl;xl|=1;try{return Vo(99,e.bind(null,t))}finally{xl=n,qo()}},t.hydrate=function(e,t,n){if(!Uc(t))throw Error(i(200));return Hc(null,e,t,!0,n)},t.render=function(e,t,n){if(!Uc(t))throw Error(i(200));return Hc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Uc(e))throw Error(i(40));return!!e._reactRootContainer&&(tc((function(){Hc(null,null,e,!1,(function(){e._reactRootContainer=null,e[Sn]=null}))})),!0)},t.unstable_batchedUpdates=ec,t.unstable_createPortal=function(e,t){return Wc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Uc(n))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return Hc(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(49)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,a,i,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,u=null,s=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==c?setTimeout(r,0,e):(c=e,setTimeout(s,0))},o=function(e,t){u=setTimeout(e,t)},a=function(){clearTimeout(u)},i=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,m=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var g=p.now();t.unstable_now=function(){return p.now()-g}}var b=!1,y=null,A=-1,E=5,w=0;i=function(){return t.unstable_now()>=w},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):E=0<e?Math.floor(1e3/e):5};var x=new MessageChannel,C=x.port2;x.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();w=e+E;try{y(!0,e)?C.postMessage(null):(b=!1,y=null)}catch(e){throw C.postMessage(null),e}}else b=!1},r=function(e){y=e,b||(b=!0,C.postMessage(null))},o=function(e,n){A=m((function(){e(t.unstable_now())}),n)},a=function(){h(A),A=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<T(o,t)))break e;e[r]=t,e[n]=o,n=r}}function S(e){return void 0===(e=e[0])?null:e}function O(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,c=e[l];if(void 0!==i&&0>T(i,n))void 0!==c&&0>T(c,i)?(e[r]=c,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==c&&0>T(c,n)))break e;e[r]=c,e[l]=n,r=l}}}return t}return null}function T(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var I=[],N=[],_=1,P=null,j=3,R=!1,B=!1,D=!1;function F(e){for(var t=S(N);null!==t;){if(null===t.callback)O(N);else{if(!(t.startTime<=e))break;O(N),t.sortIndex=t.expirationTime,k(I,t)}t=S(N)}}function M(e){if(D=!1,F(e),!B)if(null!==S(I))B=!0,r(z);else{var t=S(N);null!==t&&o(M,t.startTime-e)}}function z(e,n){B=!1,D&&(D=!1,a()),R=!0;var r=j;try{for(F(n),P=S(I);null!==P&&(!(P.expirationTime>n)||e&&!i());){var l=P.callback;if(null!==l){P.callback=null,j=P.priorityLevel;var c=l(P.expirationTime<=n);n=t.unstable_now(),"function"==typeof c?P.callback=c:P===S(I)&&O(I),F(n)}else O(I);P=S(I)}if(null!==P)var u=!0;else{var s=S(N);null!==s&&o(M,s.startTime-n),u=!1}return u}finally{P=null,j=r,R=!1}}function L(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var U=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){B||R||(B=!0,r(z))},t.unstable_getCurrentPriorityLevel=function(){return j},t.unstable_getFirstCallbackNode=function(){return S(I)},t.unstable_next=function(e){switch(j){case 1:case 2:case 3:var t=3;break;default:t=j}var n=j;j=t;try{return e()}finally{j=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=U,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=j;j=e;try{return t()}finally{j=n}},t.unstable_scheduleCallback=function(e,n,i){var l=t.unstable_now();if("object"==typeof i&&null!==i){var c=i.delay;c="number"==typeof c&&0<c?l+c:l,i="number"==typeof i.timeout?i.timeout:L(e)}else i=L(e),c=l;return e={id:_++,callback:n,priorityLevel:e,startTime:c,expirationTime:i=c+i,sortIndex:-1},c>l?(e.sortIndex=c,k(N,e),null===S(I)&&e===S(N)&&(D?a():D=!0,o(M,c-l))):(e.sortIndex=i,k(I,e),B||R||(B=!0,r(z))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();F(e);var n=S(I);return n!==P&&null!==P&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<P.expirationTime||i()},t.unstable_wrapCallback=function(e){var t=j;return function(){var n=j;j=t;try{return e.apply(this,arguments)}finally{j=n}}}},function(e,t,n){"use strict";var r=n(9),o=n(28),a=n(51),i=n(34);function l(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var c=l(n(31));c.Axios=a,c.create=function(e){return l(i(c.defaults,e))},c.Cancel=n(35),c.CancelToken=n(65),c.isCancel=n(30),c.all=function(e){return Promise.all(e)},c.spread=n(66),e.exports=c,e.exports.default=c},function(e,t,n){"use strict";var r=n(9),o=n(29),a=n(52),i=n(53),l=n(34);function c(e){this.defaults=e,this.interceptors={request:new a,response:new a}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=l(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},c.prototype.getUri=function(e){return e=l(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}})),e.exports=c},function(e,t,n){"use strict";var r=n(9);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(9),o=n(54),a=n(30),i=n(31);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return l(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(l(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(9);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var c,u=[],s=!1,f=-1;function d(){s&&c&&(s=!1,c.length?u=c.concat(u):f=-1,u.length&&p())}function p(){if(!s){var e=l(d);s=!0;for(var t=u.length;t;){for(c=u,u=[];++f<t;)c&&c[f].run();f=-1,t=u.length}c=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new m(e,t)),1!==u.length||s||l(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(9);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(33);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(60),o=n(61);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(9),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},function(e,t,n){"use strict";var r=n(9);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(9);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(a)&&l.push("domain="+a),!0===i&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(35);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=n(68);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,c=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,y=r?Symbol.for("react.fundamental"):60117,A=r?Symbol.for("react.responder"):60118,E=r?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case i:case c:case l:case m:return e;default:switch(e=e&&e.$$typeof){case s:case p:case g:case v:case u:return e;default:return t}}case a:return t}}}function x(e){return w(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=u,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=g,t.Memo=v,t.Portal=a,t.Profiler=c,t.StrictMode=l,t.Suspense=m,t.isAsyncMode=function(e){return x(e)||w(e)===f},t.isConcurrentMode=x,t.isContextConsumer=function(e){return w(e)===s},t.isContextProvider=function(e){return w(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return w(e)===p},t.isFragment=function(e){return w(e)===i},t.isLazy=function(e){return w(e)===g},t.isMemo=function(e){return w(e)===v},t.isPortal=function(e){return w(e)===a},t.isProfiler=function(e){return w(e)===c},t.isStrictMode=function(e){return w(e)===l},t.isSuspense=function(e){return w(e)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===c||e===l||e===m||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===v||e.$$typeof===u||e.$$typeof===s||e.$$typeof===p||e.$$typeof===y||e.$$typeof===A||e.$$typeof===E||e.$$typeof===b)},t.typeOf=w},function(e,t,n){var r=n(14),o=n(73);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(7),o=n.n(r)()(!0);o.push([e.i,"footer {\r\n    background-color: rgba(203, 50, 50, 0.71);\r\n}\r\n\r\n.footer-header {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\nfooter a {\r\n    color: white;\r\n    text-decoration: none;\r\n}\r\n\r\n.footer-header {\r\n    width: 80%;\r\n    margin: auto;\r\n}\r\n\r\ndiv.logo-container {\r\n    position: relative;\r\n    top: 70px;\r\n}\r\n\r\n.link-container {\r\n    border-bottom: 2px white solid;\r\n    width: 80%;\r\n    margin-left: 40px;\r\n    padding-bottom: 20px;\r\n}\r\n\r\n.link-container a {\r\n    display: block;\r\n}\r\n\r\n.link-1 {\r\n    display: inline-block;\r\n    height: 150px;\r\n    border-right: 1px white solid;\r\n    width: 32%;\r\n}\r\n\r\n.link-1 a:nth-child(1) {\r\n    position: relative;\r\n    top: 50px;\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n.link-1 a:nth-child(2) {\r\n    position: relative;\r\n    top: 80px;\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n.link-2 {\r\n    display: inline-block;\r\n    height: 150px;\r\n    border-right: 1px white solid;\r\n    width: 32%;\r\n}\r\n\r\n.link-2 a:nth-child(1) {\r\n    position: relative;\r\n    top: 50px;\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n.link-2 a:nth-child(2) {\r\n    position: relative;\r\n    top: 80px;\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n.link-3 {\r\n    display: inline-block;\r\n    height: 150px;\r\n    width: 20%;\r\n    position: absolute;\r\n    margin-left: 5px;\r\n}\r\n\r\n.networks {\r\n    display: inline-block;\r\n    border-bottom: 1px white solid;\r\n    width: 50%;\r\n    margin: auto;\r\n}\r\n\r\n.networks-child {\r\n    display: inline;\r\n    text-align: center;\r\n    position: relative;\r\n    padding-top: 50px;\r\n    padding-bottom: 50px;\r\n}\r\n\r\n.copyright {\r\n    width: 20%;\r\n    margin: auto;\r\n    font-size: 12px;\r\n}","",{version:3,sources:["footer.css"],names:[],mappings:"AAAA;IACI,yCAAyC;AAC7C;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,qBAAqB;AACzB;;AAEA;IACI,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,SAAS;AACb;;AAEA;IACI,8BAA8B;IAC9B,UAAU;IACV,iBAAiB;IACjB,oBAAoB;AACxB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,qBAAqB;IACrB,aAAa;IACb,6BAA6B;IAC7B,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;IACd,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;IACd,kBAAkB;AACtB;;AAEA;IACI,qBAAqB;IACrB,aAAa;IACb,6BAA6B;IAC7B,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;IACd,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,cAAc;IACd,kBAAkB;AACtB;;AAEA;IACI,qBAAqB;IACrB,aAAa;IACb,UAAU;IACV,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,8BAA8B;IAC9B,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,kBAAkB;IAClB,iBAAiB;IACjB,oBAAoB;AACxB;;AAEA;IACI,UAAU;IACV,YAAY;IACZ,eAAe;AACnB",file:"footer.css",sourcesContent:["footer {\r\n    background-color: rgba(203, 50, 50, 0.71);\r\n}\r\n\r\n.footer-header {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\nfooter a {\r\n    color: white;\r\n    text-decoration: none;\r\n}\r\n\r\n.footer-header {\r\n    width: 80%;\r\n    margin: auto;\r\n}\r\n\r\ndiv.logo-container {\r\n    position: relative;\r\n    top: 70px;\r\n}\r\n\r\n.link-container {\r\n    border-bottom: 2px white solid;\r\n    width: 80%;\r\n    margin-left: 40px;\r\n    padding-bottom: 20px;\r\n}\r\n\r\n.link-container a {\r\n    display: block;\r\n}\r\n\r\n.link-1 {\r\n    display: inline-block;\r\n    height: 150px;\r\n    border-right: 1px white solid;\r\n    width: 32%;\r\n}\r\n\r\n.link-1 a:nth-child(1) {\r\n    position: relative;\r\n    top: 50px;\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n.link-1 a:nth-child(2) {\r\n    position: relative;\r\n    top: 80px;\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n.link-2 {\r\n    display: inline-block;\r\n    height: 150px;\r\n    border-right: 1px white solid;\r\n    width: 32%;\r\n}\r\n\r\n.link-2 a:nth-child(1) {\r\n    position: relative;\r\n    top: 50px;\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n.link-2 a:nth-child(2) {\r\n    position: relative;\r\n    top: 80px;\r\n    display: block;\r\n    text-align: center;\r\n}\r\n\r\n.link-3 {\r\n    display: inline-block;\r\n    height: 150px;\r\n    width: 20%;\r\n    position: absolute;\r\n    margin-left: 5px;\r\n}\r\n\r\n.networks {\r\n    display: inline-block;\r\n    border-bottom: 1px white solid;\r\n    width: 50%;\r\n    margin: auto;\r\n}\r\n\r\n.networks-child {\r\n    display: inline;\r\n    text-align: center;\r\n    position: relative;\r\n    padding-top: 50px;\r\n    padding-bottom: 50px;\r\n}\r\n\r\n.copyright {\r\n    width: 20%;\r\n    margin: auto;\r\n    font-size: 12px;\r\n}"]}]),t.default=o},function(e,t,n){var r=n(14),o=n(75);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(7),o=n.n(r)()(!0);o.push([e.i,".navbar {\r\n    background: rgba(203, 50, 50, 0.71);\r\n    height: 100px;\r\n}\r\n\r\nbody {\r\n    font-family: Cardo;\r\n}\r\n\r\n.name {\r\n    position: absolute;\r\n    width: 250px;\r\n    height: 42px;\r\n    left: 66px;\r\n    top: 39px;\r\n    font-family: Cardo;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 36px;\r\n    line-height: 20px;\r\n    /* or 56% */\r\n    text-align: center;\r\n    color: #FFFFFF;\r\n}\r\n\r\n.logo {\r\n    position: absolute;\r\n    width: 50px;\r\n    height: 55px;\r\n    left: 30px;\r\n    top: 15px;\r\n}\r\n\r\n.titre2 {\r\n    position: absolute;\r\n    width: 178px;\r\n    height: 28px;\r\n    left: 293px;\r\n    top: 42px;\r\n    font-family: Cardo;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 24px;\r\n    line-height: 20px;\r\n    /* or 83% */\r\n    text-align: center;\r\n    color: #FFFFFF;\r\n}","",{version:3,sources:["navbar.css"],names:[],mappings:"AAAA;IACI,mCAAmC;IACnC,aAAa;AACjB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,YAAY;IACZ,UAAU;IACV,SAAS;IACT,kBAAkB;IAClB,kBAAkB;IAClB,mBAAmB;IACnB,eAAe;IACf,iBAAiB;IACjB,WAAW;IACX,kBAAkB;IAClB,cAAc;AAClB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,UAAU;IACV,SAAS;AACb;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,YAAY;IACZ,WAAW;IACX,SAAS;IACT,kBAAkB;IAClB,kBAAkB;IAClB,mBAAmB;IACnB,eAAe;IACf,iBAAiB;IACjB,WAAW;IACX,kBAAkB;IAClB,cAAc;AAClB",file:"navbar.css",sourcesContent:[".navbar {\r\n    background: rgba(203, 50, 50, 0.71);\r\n    height: 100px;\r\n}\r\n\r\nbody {\r\n    font-family: Cardo;\r\n}\r\n\r\n.name {\r\n    position: absolute;\r\n    width: 250px;\r\n    height: 42px;\r\n    left: 66px;\r\n    top: 39px;\r\n    font-family: Cardo;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 36px;\r\n    line-height: 20px;\r\n    /* or 56% */\r\n    text-align: center;\r\n    color: #FFFFFF;\r\n}\r\n\r\n.logo {\r\n    position: absolute;\r\n    width: 50px;\r\n    height: 55px;\r\n    left: 30px;\r\n    top: 15px;\r\n}\r\n\r\n.titre2 {\r\n    position: absolute;\r\n    width: 178px;\r\n    height: 28px;\r\n    left: 293px;\r\n    top: 42px;\r\n    font-family: Cardo;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    font-size: 24px;\r\n    line-height: 20px;\r\n    /* or 83% */\r\n    text-align: center;\r\n    color: #FFFFFF;\r\n}"]}]),t.default=o},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){var r=n(14),o=n(78);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(7),o=n.n(r)()(!0);o.push([e.i,".Modal {\r\n    position: fixed;\r\n    z-index: 500;\r\n    background-color: white;\r\n    width: 100%;\r\n    border: 1px solid #ccc;\r\n    /* box-shadow: 1px 1px 1px black;*/\r\n    padding: 16px;\r\n    left: 15%;\r\n    top: 30%;\r\n    box-sizing: border-box;\r\n    transition: all 0.3s ease-out;\r\n    border-radius: 10px;\r\n}\r\n\r\n@media (min-width: 600px) {\r\n    .Modal {\r\n        width: 500px;\r\n        left: calc(50% - 250px);\r\n    }\r\n}","",{version:3,sources:["modal.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,YAAY;IACZ,uBAAuB;IACvB,WAAW;IACX,sBAAsB;IACtB,kCAAkC;IAClC,aAAa;IACb,SAAS;IACT,QAAQ;IACR,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI;QACI,YAAY;QACZ,uBAAuB;IAC3B;AACJ",file:"modal.css",sourcesContent:[".Modal {\r\n    position: fixed;\r\n    z-index: 500;\r\n    background-color: white;\r\n    width: 100%;\r\n    border: 1px solid #ccc;\r\n    /* box-shadow: 1px 1px 1px black;*/\r\n    padding: 16px;\r\n    left: 15%;\r\n    top: 30%;\r\n    box-sizing: border-box;\r\n    transition: all 0.3s ease-out;\r\n    border-radius: 10px;\r\n}\r\n\r\n@media (min-width: 600px) {\r\n    .Modal {\r\n        width: 500px;\r\n        left: calc(50% - 250px);\r\n    }\r\n}"]}]),t.default=o},function(e,t,n){var r=n(14),o=n(80);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(7),o=n.n(r),a=n(26),i=n.n(a),l=n(42),c=n(43),u=o()(!0),s=i()(l.a),f=i()(c.a);u.push([e.i,"/**********************************page Recherche*************************************************/\r\n\r\n.formRechercheContainer {\r\n    /*background-image: url('../img/caroussel/image3.jpg');*/\r\n    width: 60%;\r\n    margin: auto\r\n}\r\n\r\nh1 {\r\n    margin: auto;\r\n}\r\n\r\n.infolettreDiv {\r\n    background-image: url("+s+");\r\n    /* background-image: url('../img/image_site/images/Dogs_Cats_Rabbits_504758.jpg');*/\r\n    width: 60%;\r\n    height: 50vh;\r\n    margin: auto\r\n}\r\n\r\n.infolettreDiv h1 {\r\n    margin: auto;\r\n    width: 82%;\r\n}\r\n\r\n.resultatRechercheDiv {\r\n    border: solid rgba(203, 50, 50, 0.71);\r\n    /* border-radius: 2%; */\r\n    border-bottom-left-radius: 1%;\r\n    border-bottom-right-radius: 1%;\r\n    display: grid;\r\n    width: 80%;\r\n    box-shadow: gray;\r\n    /* box-shadow: 6px 3px grey; */\r\n    margin: 1%;\r\n    box-shadow: 0 0 7px 1px grey;\r\n}\r\n\r\n.resultatRechercheDiv img {\r\n    width: 100%;\r\n}\r\n\r\n.resultatRechercheDiv h2 {\r\n    margin: auto;\r\n    font-size: 50px;\r\n}\r\n\r\n.resultatRechercheDiv h2 {\r\n    margin: auto;\r\n    font-size: 50px;\r\n}\r\n\r\n.resultatRechercheDiv button {\r\n    background-color: rgba(203, 50, 50, 0.71);\r\n    /* border: none; */\r\n    border-color: 1px solid grey;\r\n    border-color: oldlace;\r\n    border-radius: 5%;\r\n}\r\n\r\nh2, p {\r\n    /* width: 20%;*/\r\n    cursor: pointer;\r\n}\r\n\r\nbutton {\r\n    width: 50%;\r\n}\r\n\r\n/*h1 {\r\n    width: 59%;\r\n}*/\r\n\r\n.divAnnonce {\r\n    margin: 5%;\r\n}\r\n\r\nbody {\r\n    background-color: #f443361f\r\n}\r\n\r\n#divPublicite {\r\n    background-image: url("+f+");\r\n    height: 60vh;\r\n}\r\n\r\n#divPlubicite2 {\r\n    background-image: url("+f+");\r\n    height: 60vh;\r\n    margin-top: 2%\r\n}\r\n\r\n.star {\r\n    cursor: pointer;\r\n    transition: color 200ms;\r\n}\r\n\r\n#infolettre {\r\n    opacity: 0.5;\r\n    width: 40%;\r\n}\r\n\r\n#service1 {\r\n    background-color: rgba(76, 175, 80, 0.3);\r\n}\r\n\r\n#service2 {\r\n    background-color: rgba(76, 175, 80, 0.3);\r\n}\r\n\r\n.greyboxdiv {\r\n    position: absolute;\r\n    top: 20%;\r\n    left: 25%;\r\n    margin-left: 40%;\r\n    width: 100%;\r\n    height: 200px;\r\n    padding-top: 50px;\r\n    color: white;\r\n    opacity: 0.8;\r\n    background-color: grey;\r\n    width: 50%;\r\n    margin: auto;\r\n}\r\n\r\n.serviceProposes {\r\n    background-color: rgba(220, 220, 220, 0.7);\r\n}","",{version:3,sources:["recherche.css"],names:[],mappings:"AAAA,kGAAkG;;AAElG;IACI,wDAAwD;IACxD,UAAU;IACV;AACJ;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,yDAAkH;IAClH,mFAAmF;IACnF,UAAU;IACV,YAAY;IACZ;AACJ;;AAEA;IACI,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,qCAAqC;IACrC,uBAAuB;IACvB,6BAA6B;IAC7B,8BAA8B;IAC9B,aAAa;IACb,UAAU;IACV,gBAAgB;IAChB,8BAA8B;IAC9B,UAAU;IACV,4BAA4B;AAChC;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,yCAAyC;IACzC,kBAAkB;IAClB,4BAA4B;IAC5B,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,UAAU;AACd;;AAEA;;EAEE;;AAEF;IACI,UAAU;AACd;;AAEA;IACI;AACJ;;AAEA;IACI,yDAA8E;IAC9E,YAAY;AAChB;;AAEA;IACI,yDAA8E;IAC9E,YAAY;IACZ;AACJ;;AAEA;IACI,eAAe;IACf,uBAAuB;AAC3B;;AAEA;IACI,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,wCAAwC;AAC5C;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,gBAAgB;IAChB,WAAW;IACX,aAAa;IACb,iBAAiB;IACjB,YAAY;IACZ,YAAY;IACZ,sBAAsB;IACtB,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,0CAA0C;AAC9C",file:"recherche.css",sourcesContent:["/**********************************page Recherche*************************************************/\r\n\r\n.formRechercheContainer {\r\n    /*background-image: url('../img/caroussel/image3.jpg');*/\r\n    width: 60%;\r\n    margin: auto\r\n}\r\n\r\nh1 {\r\n    margin: auto;\r\n}\r\n\r\n.infolettreDiv {\r\n    background-image: url('../img/image_site/images/do-pet-sitters-need-pet-sitter-insurance-the-pet-sitter-blog.jpg');\r\n    /* background-image: url('../img/image_site/images/Dogs_Cats_Rabbits_504758.jpg');*/\r\n    width: 60%;\r\n    height: 50vh;\r\n    margin: auto\r\n}\r\n\r\n.infolettreDiv h1 {\r\n    margin: auto;\r\n    width: 82%;\r\n}\r\n\r\n.resultatRechercheDiv {\r\n    border: solid rgba(203, 50, 50, 0.71);\r\n    /* border-radius: 2%; */\r\n    border-bottom-left-radius: 1%;\r\n    border-bottom-right-radius: 1%;\r\n    display: grid;\r\n    width: 80%;\r\n    box-shadow: gray;\r\n    /* box-shadow: 6px 3px grey; */\r\n    margin: 1%;\r\n    box-shadow: 0 0 7px 1px grey;\r\n}\r\n\r\n.resultatRechercheDiv img {\r\n    width: 100%;\r\n}\r\n\r\n.resultatRechercheDiv h2 {\r\n    margin: auto;\r\n    font-size: 50px;\r\n}\r\n\r\n.resultatRechercheDiv h2 {\r\n    margin: auto;\r\n    font-size: 50px;\r\n}\r\n\r\n.resultatRechercheDiv button {\r\n    background-color: rgba(203, 50, 50, 0.71);\r\n    /* border: none; */\r\n    border-color: 1px solid grey;\r\n    border-color: oldlace;\r\n    border-radius: 5%;\r\n}\r\n\r\nh2, p {\r\n    /* width: 20%;*/\r\n    cursor: pointer;\r\n}\r\n\r\nbutton {\r\n    width: 50%;\r\n}\r\n\r\n/*h1 {\r\n    width: 59%;\r\n}*/\r\n\r\n.divAnnonce {\r\n    margin: 5%;\r\n}\r\n\r\nbody {\r\n    background-color: #f443361f\r\n}\r\n\r\n#divPublicite {\r\n    background-image: url('../img/image_site/images/Dogs_Cats_Rabbits_504758.jpg');\r\n    height: 60vh;\r\n}\r\n\r\n#divPlubicite2 {\r\n    background-image: url('../img/image_site/images/Dogs_Cats_Rabbits_504758.jpg');\r\n    height: 60vh;\r\n    margin-top: 2%\r\n}\r\n\r\n.star {\r\n    cursor: pointer;\r\n    transition: color 200ms;\r\n}\r\n\r\n#infolettre {\r\n    opacity: 0.5;\r\n    width: 40%;\r\n}\r\n\r\n#service1 {\r\n    background-color: rgba(76, 175, 80, 0.3);\r\n}\r\n\r\n#service2 {\r\n    background-color: rgba(76, 175, 80, 0.3);\r\n}\r\n\r\n.greyboxdiv {\r\n    position: absolute;\r\n    top: 20%;\r\n    left: 25%;\r\n    margin-left: 40%;\r\n    width: 100%;\r\n    height: 200px;\r\n    padding-top: 50px;\r\n    color: white;\r\n    opacity: 0.8;\r\n    background-color: grey;\r\n    width: 50%;\r\n    margin: auto;\r\n}\r\n\r\n.serviceProposes {\r\n    background-color: rgba(220, 220, 220, 0.7);\r\n}"]}]),t.default=u},function(e,t,n){var r=n(14),o=n(82);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(7),o=n.n(r)()(!0);o.push([e.i,".modal-body .mx-3 {\r\n    box-sizing: border-box;\r\n}\r\n\r\n#exampleFormControlFile1 {\r\n    background-color: #DCDCDC;\r\n    border-radius: 50%;\r\n    color: white;\r\n    padding: 20px;\r\n    text-align: center;\r\n    text-decoration: overline;\r\n    width: 25%;\r\n}\r\n\r\n.md-form .mb-5 {\r\n    width: 100%;\r\n    padding: 12px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    resize: vertical;\r\n}\r\n\r\nlabel {\r\n    padding: 12px 12px 12px 0;\r\n    display: inline-block;\r\n}\r\n\r\n.col-md-6 .mx-auto {\r\n    width: 1000px;\r\n}\r\n\r\ntr:nth-child(even) {\r\n    background-color: #f2f2f2;\r\n}\r\n\r\ntr:hover {\r\n    background-color: #ddd;\r\n}\r\n\r\ntr td {\r\n    border: 1px solid #ddd;\r\n    padding: 8px;\r\n}\r\n\r\ntr {\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    text-align: left;\r\n}\r\n\r\n#bouton1 {\r\n    display: inline-block;\r\n    color: #252424;\r\n    text-align: center;\r\n    vertical-align: middle;\r\n    text-decoration-color: darkgray;\r\n    background-color: #eb8b8b;\r\n    border: 1px transparent;\r\n    /* padding: 0.375rem -14.25rem;*/\r\n    font-size: 1rem;\r\n    line-height: 1.5;\r\n    border-radius: .25rem;\r\n    position: relative;\r\n    bottom: -708px;\r\n    margin: 0 2%;\r\n    width: 17em;\r\n    align-content: center;\r\n    top: 50%;\r\n    left: 20%;\r\n}\r\n\r\n.image-profil {\r\n    width: 100px;\r\n    height: 100px;\r\n    border-radius: 50%;\r\n    margin-left: 49px;\r\n    margin-bottom: -297px;\r\n}\r\n\r\n.form-control-file {\r\n    width: 100%;\r\n    height: auto;\r\n}\r\n\r\n@media screen and (max-width: 600px) {\r\n    .col-25, .col-75, #bouton1, tr, td, #exampleFormControlFile1, .image-profil, .modal-body .mx-3 {\r\n        width: 100%;\r\n        margin-top: 0;\r\n    }\r\n}","",{version:3,sources:["profil.css"],names:[],mappings:"AAAA;IACI,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,yBAAyB;IACzB,UAAU;AACd;;AAEA;IACI,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,yBAAyB;IACzB,qBAAqB;AACzB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,YAAY;AAChB;;AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,cAAc;IACd,kBAAkB;IAClB,sBAAsB;IACtB,+BAA+B;IAC/B,yBAAyB;IACzB,uBAAuB;IACvB,gCAAgC;IAChC,eAAe;IACf,gBAAgB;IAChB,qBAAqB;IACrB,kBAAkB;IAClB,cAAc;IACd,YAAY;IACZ,WAAW;IACX,qBAAqB;IACrB,QAAQ;IACR,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,iBAAiB;IACjB,qBAAqB;AACzB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI;QACI,WAAW;QACX,aAAa;IACjB;AACJ",file:"profil.css",sourcesContent:[".modal-body .mx-3 {\r\n    box-sizing: border-box;\r\n}\r\n\r\n#exampleFormControlFile1 {\r\n    background-color: #DCDCDC;\r\n    border-radius: 50%;\r\n    color: white;\r\n    padding: 20px;\r\n    text-align: center;\r\n    text-decoration: overline;\r\n    width: 25%;\r\n}\r\n\r\n.md-form .mb-5 {\r\n    width: 100%;\r\n    padding: 12px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    resize: vertical;\r\n}\r\n\r\nlabel {\r\n    padding: 12px 12px 12px 0;\r\n    display: inline-block;\r\n}\r\n\r\n.col-md-6 .mx-auto {\r\n    width: 1000px;\r\n}\r\n\r\ntr:nth-child(even) {\r\n    background-color: #f2f2f2;\r\n}\r\n\r\ntr:hover {\r\n    background-color: #ddd;\r\n}\r\n\r\ntr td {\r\n    border: 1px solid #ddd;\r\n    padding: 8px;\r\n}\r\n\r\ntr {\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    text-align: left;\r\n}\r\n\r\n#bouton1 {\r\n    display: inline-block;\r\n    color: #252424;\r\n    text-align: center;\r\n    vertical-align: middle;\r\n    text-decoration-color: darkgray;\r\n    background-color: #eb8b8b;\r\n    border: 1px transparent;\r\n    /* padding: 0.375rem -14.25rem;*/\r\n    font-size: 1rem;\r\n    line-height: 1.5;\r\n    border-radius: .25rem;\r\n    position: relative;\r\n    bottom: -708px;\r\n    margin: 0 2%;\r\n    width: 17em;\r\n    align-content: center;\r\n    top: 50%;\r\n    left: 20%;\r\n}\r\n\r\n.image-profil {\r\n    width: 100px;\r\n    height: 100px;\r\n    border-radius: 50%;\r\n    margin-left: 49px;\r\n    margin-bottom: -297px;\r\n}\r\n\r\n.form-control-file {\r\n    width: 100%;\r\n    height: auto;\r\n}\r\n\r\n@media screen and (max-width: 600px) {\r\n    .col-25, .col-75, #bouton1, tr, td, #exampleFormControlFile1, .image-profil, .modal-body .mx-3 {\r\n        width: 100%;\r\n        margin-top: 0;\r\n    }\r\n}"]}]),t.default=o},function(e,t,n){"use strict";n.r(t);var r=n(7),o=n.n(r)()(!0);o.push([e.i,'.row {\r\n    display: -ms-flexbox;\r\n    /* IE10 */\r\n    display: flex;\r\n    -ms-flex-wrap: wrap;\r\n    /* IE10 */\r\n    flex-wrap: wrap;\r\n    margin: 0 -16px;\r\n}\r\n\r\n.col-25 {\r\n    -ms-flex: 25%;\r\n    /* IE10 */\r\n    flex: 25%;\r\n}\r\n\r\n.col-50 {\r\n    -ms-flex: 50%;\r\n    /* IE10 */\r\n    flex: 50%;\r\n}\r\n\r\n.col-75 {\r\n    -ms-flex: 75%;\r\n    /* IE10 */\r\n    flex: 75%;\r\n}\r\n\r\n.col-25, .col-50, .col-75 {\r\n    padding: 0 16px;\r\n}\r\n\r\n.containerPayment {\r\n    background-color: white;\r\n    padding: 5px 20px 15px 20px;\r\n    border: 1px solid lightgrey;\r\n    border-radius: 3px;\r\n}\r\n\r\ninput[type=text] {\r\n    width: 100%;\r\n    margin-bottom: 20px;\r\n    padding: 12px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 3px;\r\n}\r\n\r\nlabel {\r\n    margin-bottom: 10px;\r\n    display: block;\r\n}\r\n\r\n.icon-container {\r\n    margin-bottom: 20px;\r\n    padding: 7px 0;\r\n    font-size: 24px;\r\n}\r\n\r\n.btnPayment {\r\n    background-color: #eb8b8b;\r\n    color: white;\r\n    padding: 12px;\r\n    margin: 10px 0;\r\n    border: none;\r\n    width: 100%;\r\n    border-radius: 3px;\r\n    cursor: pointer;\r\n    font-size: 17px;\r\n}\r\n\r\n.btn:hover {\r\n    background-color: pink;\r\n}\r\n\r\nspan.price {\r\n    float: right;\r\n    color: grey;\r\n}\r\n\r\n/* Responsive layout - when the screen is less than 800px wide, make the two columns stack on top of each other instead of next to each other (and change the direction - make the "cart" column go on top) */\r\n\r\n@media (max-width: 800px) {\r\n    .row {\r\n        flex-direction: column-reverse;\r\n    }\r\n    .col-25 {\r\n        margin-bottom: 20px;\r\n    }\r\n}',"",{version:3,sources:["payment.css"],names:[],mappings:"AAAA;IACI,oBAAoB;IACpB,SAAS;IACT,aAAa;IACb,mBAAmB;IACnB,SAAS;IACT,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,SAAS;AACb;;AAEA;IACI,aAAa;IACb,SAAS;IACT,SAAS;AACb;;AAEA;IACI,aAAa;IACb,SAAS;IACT,SAAS;AACb;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uBAAuB;IACvB,2BAA2B;IAC3B,2BAA2B;IAC3B,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,cAAc;AAClB;;AAEA;IACI,mBAAmB;IACnB,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,cAAc;IACd,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,eAAe;IACf,eAAe;AACnB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA,6MAA6M;;AAE7M;IACI;QACI,8BAA8B;IAClC;IACA;QACI,mBAAmB;IACvB;AACJ",file:"payment.css",sourcesContent:['.row {\r\n    display: -ms-flexbox;\r\n    /* IE10 */\r\n    display: flex;\r\n    -ms-flex-wrap: wrap;\r\n    /* IE10 */\r\n    flex-wrap: wrap;\r\n    margin: 0 -16px;\r\n}\r\n\r\n.col-25 {\r\n    -ms-flex: 25%;\r\n    /* IE10 */\r\n    flex: 25%;\r\n}\r\n\r\n.col-50 {\r\n    -ms-flex: 50%;\r\n    /* IE10 */\r\n    flex: 50%;\r\n}\r\n\r\n.col-75 {\r\n    -ms-flex: 75%;\r\n    /* IE10 */\r\n    flex: 75%;\r\n}\r\n\r\n.col-25, .col-50, .col-75 {\r\n    padding: 0 16px;\r\n}\r\n\r\n.containerPayment {\r\n    background-color: white;\r\n    padding: 5px 20px 15px 20px;\r\n    border: 1px solid lightgrey;\r\n    border-radius: 3px;\r\n}\r\n\r\ninput[type=text] {\r\n    width: 100%;\r\n    margin-bottom: 20px;\r\n    padding: 12px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 3px;\r\n}\r\n\r\nlabel {\r\n    margin-bottom: 10px;\r\n    display: block;\r\n}\r\n\r\n.icon-container {\r\n    margin-bottom: 20px;\r\n    padding: 7px 0;\r\n    font-size: 24px;\r\n}\r\n\r\n.btnPayment {\r\n    background-color: #eb8b8b;\r\n    color: white;\r\n    padding: 12px;\r\n    margin: 10px 0;\r\n    border: none;\r\n    width: 100%;\r\n    border-radius: 3px;\r\n    cursor: pointer;\r\n    font-size: 17px;\r\n}\r\n\r\n.btn:hover {\r\n    background-color: pink;\r\n}\r\n\r\nspan.price {\r\n    float: right;\r\n    color: grey;\r\n}\r\n\r\n/* Responsive layout - when the screen is less than 800px wide, make the two columns stack on top of each other instead of next to each other (and change the direction - make the "cart" column go on top) */\r\n\r\n@media (max-width: 800px) {\r\n    .row {\r\n        flex-direction: column-reverse;\r\n    }\r\n    .col-25 {\r\n        margin-bottom: 20px;\r\n    }\r\n}']}]),t.default=o},function(e,t,n){var r=n(14),o=n(85);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){"use strict";n.r(t);var r=n(7),o=n.n(r)()(!0);o.push([e.i,"/********************************** DEMANDE PROFIL **************************************/\r\n\r\n.demandewrapper {\r\n    background-color: white;\r\n}\r\n\r\n.commentBox {\r\n    background-color: rgba(202, 202, 202, 0.5)\r\n}\r\n\r\n.infoSitterWrapper .h2 {\r\n    font-size: 50px;\r\n}\r\n\r\n.infoSitterWrapper .h6 {\r\n    font-size: 24px;\r\n}\r\n\r\n.feedbackComment {\r\n    border-bottom: 1px solid #7b7f81;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.feedbackComment h3 {\r\n    color: red;\r\n    font-size: 36px;\r\n}\r\n\r\n.feedbackComment h4 {\r\n    font-size: 18px;\r\n}\r\n\r\n.feedbackComment p {\r\n    font-size: 24px;\r\n}\r\n\r\n.prixEtServiceWrapper {\r\n    margin-top: -15%;\r\n    position: relative;\r\n    background-color: rgba(202, 202, 202, 0.5);\r\n    width: 40%;\r\n    margin-left: 2%;\r\n    padding-bottom: 12%;\r\n    height: 60vh;\r\n}\r\n\r\n.serviceBox {\r\n    background-color: rgba(202, 202, 202, 0.5);\r\n}\r\n\r\n.payButton {}","",{version:3,sources:["demande.css"],names:[],mappings:"AAAA,yFAAyF;;AAEzF;IACI,uBAAuB;AAC3B;;AAEA;IACI;AACJ;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,gCAAgC;IAChC,mBAAmB;AACvB;;AAEA;IACI,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;IAClB,0CAA0C;IAC1C,UAAU;IACV,eAAe;IACf,mBAAmB;IACnB,YAAY;AAChB;;AAEA;IACI,0CAA0C;AAC9C;;AAEA,YAAY",file:"demande.css",sourcesContent:["/********************************** DEMANDE PROFIL **************************************/\r\n\r\n.demandewrapper {\r\n    background-color: white;\r\n}\r\n\r\n.commentBox {\r\n    background-color: rgba(202, 202, 202, 0.5)\r\n}\r\n\r\n.infoSitterWrapper .h2 {\r\n    font-size: 50px;\r\n}\r\n\r\n.infoSitterWrapper .h6 {\r\n    font-size: 24px;\r\n}\r\n\r\n.feedbackComment {\r\n    border-bottom: 1px solid #7b7f81;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.feedbackComment h3 {\r\n    color: red;\r\n    font-size: 36px;\r\n}\r\n\r\n.feedbackComment h4 {\r\n    font-size: 18px;\r\n}\r\n\r\n.feedbackComment p {\r\n    font-size: 24px;\r\n}\r\n\r\n.prixEtServiceWrapper {\r\n    margin-top: -15%;\r\n    position: relative;\r\n    background-color: rgba(202, 202, 202, 0.5);\r\n    width: 40%;\r\n    margin-left: 2%;\r\n    padding-bottom: 12%;\r\n    height: 60vh;\r\n}\r\n\r\n.serviceBox {\r\n    background-color: rgba(202, 202, 202, 0.5);\r\n}\r\n\r\n.payButton {}"]}]),t.default=o},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),a=n(13),i=n.n(a),l=n(5),c=n.n(l),u=function(e){var t=e.nom,n=e.prenom,r=e.email,a=e.etatCompte;return o.a.createElement("tr",null,o.a.createElement("td",null,t),o.a.createElement("td",null,n),o.a.createElement("td",null,r),o.a.createElement("td",null,a))},s=n(22),f=n.n(s),d=n(6),p=n(2),m=n.n(p),h=n(1);function v(e){return"/"===e.charAt(0)}function g(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var b=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],a=e&&v(e),i=t&&v(t),l=a||i;if(e&&v(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var c=o[o.length-1];n="."===c||".."===c||""===c}else n=!1;for(var u=0,s=o.length;s>=0;s--){var f=o[s];"."===f?g(o,s):".."===f?(g(o,s),u++):u&&(g(o,s),u--)}if(!l)for(;u--;u)o.unshift("..");!l||""===o[0]||o[0]&&v(o[0])||o.unshift("");var d=o.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d};var y=function(e,t){if(!e)throw new Error("Invariant failed")};function A(e){return"/"===e.charAt(0)?e:"/"+e}function E(e){return"/"===e.charAt(0)?e.substr(1):e}function w(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function x(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function C(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function k(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=Object(h.a)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=b(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function S(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var O=!("undefined"==typeof window||!window.document||!window.document.createElement);function T(e,t){t(window.confirm(e))}function I(){try{return window.history.state||{}}catch(e){return{}}}function N(e){void 0===e&&(e={}),O||y(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,i=a.forceRefresh,l=void 0!==i&&i,c=a.getUserConfirmation,u=void 0===c?T:c,s=a.keyLength,f=void 0===s?6:s,d=e.basename?x(A(e.basename)):"";function p(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return d&&(a=w(a,d)),k(a,r,n)}function m(){return Math.random().toString(36).substr(2,f)}var v=S();function g(e){Object(h.a)(z,e),z.length=n.length,v.notifyListeners(z.location,z.action)}function b(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||_(p(e.state))}function E(){_(p(I()))}var N=!1;function _(e){if(N)N=!1,g();else{v.confirmTransitionTo(e,"POP",u,(function(t){t?g({action:"POP",location:e}):function(e){var t=z.location,n=j.indexOf(t.key);-1===n&&(n=0);var r=j.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(N=!0,B(o))}(e)}))}}var P=p(I()),j=[P.key];function R(e){return d+C(e)}function B(e){n.go(e)}var D=0;function F(e){1===(D+=e)&&1===e?(window.addEventListener("popstate",b),o&&window.addEventListener("hashchange",E)):0===D&&(window.removeEventListener("popstate",b),o&&window.removeEventListener("hashchange",E))}var M=!1;var z={length:n.length,action:"POP",location:P,createHref:R,push:function(e,t){var o=k(e,t,m(),z.location);v.confirmTransitionTo(o,"PUSH",u,(function(e){if(e){var t=R(o),a=o.key,i=o.state;if(r)if(n.pushState({key:a,state:i},null,t),l)window.location.href=t;else{var c=j.indexOf(z.location.key),u=j.slice(0,c+1);u.push(o.key),j=u,g({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=k(e,t,m(),z.location);v.confirmTransitionTo(o,"REPLACE",u,(function(e){if(e){var t=R(o),a=o.key,i=o.state;if(r)if(n.replaceState({key:a,state:i},null,t),l)window.location.replace(t);else{var c=j.indexOf(z.location.key);-1!==c&&(j[c]=o.key),g({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:B,goBack:function(){B(-1)},goForward:function(){B(1)},block:function(e){void 0===e&&(e=!1);var t=v.setPrompt(e);return M||(F(1),M=!0),function(){return M&&(M=!1,F(-1)),t()}},listen:function(e){var t=v.appendListener(e);return F(1),function(){F(-1),t()}}};return z}var _={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+E(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:E,decodePath:A},slash:{encodePath:A,decodePath:A}};function P(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function j(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function R(e){window.location.replace(P(window.location.href)+"#"+e)}function B(e){void 0===e&&(e={}),O||y(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?T:r,a=n.hashType,i=void 0===a?"slash":a,l=e.basename?x(A(e.basename)):"",c=_[i],u=c.encodePath,s=c.decodePath;function f(){var e=s(j());return l&&(e=w(e,l)),k(e)}var d=S();function p(e){Object(h.a)(z,e),z.length=t.length,d.notifyListeners(z.location,z.action)}var m=!1,v=null;function g(){var e,t,n=j(),r=u(n);if(n!==r)R(r);else{var a=f(),i=z.location;if(!m&&(t=a,(e=i).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(v===C(a))return;v=null,function(e){if(m)m=!1,p();else{d.confirmTransitionTo(e,"POP",o,(function(t){t?p({action:"POP",location:e}):function(e){var t=z.location,n=N.lastIndexOf(C(t));-1===n&&(n=0);var r=N.lastIndexOf(C(e));-1===r&&(r=0);var o=n-r;o&&(m=!0,B(o))}(e)}))}}(a)}}var b=j(),E=u(b);b!==E&&R(E);var I=f(),N=[C(I)];function B(e){t.go(e)}var D=0;function F(e){1===(D+=e)&&1===e?window.addEventListener("hashchange",g):0===D&&window.removeEventListener("hashchange",g)}var M=!1;var z={length:t.length,action:"POP",location:I,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=P(window.location.href)),n+"#"+u(l+C(e))},push:function(e,t){var n=k(e,void 0,void 0,z.location);d.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=C(n),r=u(l+t);if(j()!==r){v=t,function(e){window.location.hash=e}(r);var o=N.lastIndexOf(C(z.location)),a=N.slice(0,o+1);a.push(t),N=a,p({action:"PUSH",location:n})}else p()}}))},replace:function(e,t){var n=k(e,void 0,void 0,z.location);d.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=C(n),r=u(l+t);j()!==r&&(v=t,R(r));var o=N.indexOf(C(z.location));-1!==o&&(N[o]=t),p({action:"REPLACE",location:n})}}))},go:B,goBack:function(){B(-1)},goForward:function(){B(1)},block:function(e){void 0===e&&(e=!1);var t=d.setPrompt(e);return M||(F(1),M=!0),function(){return M&&(M=!1,F(-1)),t()}},listen:function(e){var t=d.appendListener(e);return F(1),function(){F(-1),t()}}};return z}function D(e,t,n){return Math.min(Math.max(e,t),n)}function F(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,o=void 0===r?["/"]:r,a=t.initialIndex,i=void 0===a?0:a,l=t.keyLength,c=void 0===l?6:l,u=S();function s(e){Object(h.a)(g,e),g.length=g.entries.length,u.notifyListeners(g.location,g.action)}function f(){return Math.random().toString(36).substr(2,c)}var d=D(i,0,o.length-1),p=o.map((function(e){return k(e,void 0,"string"==typeof e?f():e.key||f())})),m=C;function v(e){var t=D(g.index+e,0,g.entries.length-1),r=g.entries[t];u.confirmTransitionTo(r,"POP",n,(function(e){e?s({action:"POP",location:r,index:t}):s()}))}var g={length:p.length,action:"POP",location:p[d],index:d,entries:p,createHref:m,push:function(e,t){var r=k(e,t,f(),g.location);u.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=g.index+1,n=g.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),s({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=k(e,t,f(),g.location);u.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(g.entries[g.index]=r,s({action:"REPLACE",location:r}))}))},go:v,goBack:function(){v(-1)},goForward:function(){v(1)},canGo:function(e){var t=g.index+e;return t>=0&&t<g.entries.length},block:function(e){return void 0===e&&(e=!1),u.setPrompt(e)},listen:function(e){return u.appendListener(e)}};return g}var M=n(23),z=n(24),L=n.n(z),U=(n(36),n(3)),H=n(38),V=n.n(H),W=function(e){var t=Object(M.a)();return t.displayName=e,t}("Router-History"),$=function(e){var t=Object(M.a)();return t.displayName=e,t}("Router"),q=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(d.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o.a.createElement($.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},o.a.createElement(W.Provider,{children:this.props.children||null,value:this.props.history}))},t}(o.a.Component);o.a.Component;o.a.Component;var Y={},J=0;function Q(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,a=void 0!==o&&o,i=n.strict,l=void 0!==i&&i,c=n.sensitive,u=void 0!==c&&c;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=Y[n]||(Y[n]={});if(r[e])return r[e];var o=[],a={regexp:L()(e,o,t),keys:o};return J<1e4&&(r[e]=a,J++),a}(n,{end:a,strict:l,sensitive:u}),o=r.regexp,i=r.keys,c=o.exec(e);if(!c)return null;var s=c[0],f=c.slice(1),d=e===s;return a&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:i.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var K=function(e){function t(){return e.apply(this,arguments)||this}return Object(d.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement($.Consumer,null,(function(t){t||y(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?Q(n.pathname,e.props):t.match,a=Object(h.a)({},t,{location:n,match:r}),i=e.props,l=i.children,c=i.component,u=i.render;return Array.isArray(l)&&0===l.length&&(l=null),o.a.createElement($.Provider,{value:a},a.match?l?"function"==typeof l?l(a):l:c?o.a.createElement(c,a):u?u(a):null:"function"==typeof l?l(a):null)}))},t}(o.a.Component);function X(e){return"/"===e.charAt(0)?e:"/"+e}function G(e,t){if(!e)return t;var n=X(e);return 0!==t.pathname.indexOf(n)?t:Object(h.a)({},t,{pathname:t.pathname.substr(n.length)})}function Z(e){return"string"==typeof e?e:C(e)}function ee(e){return function(){y(!1)}}function te(){}o.a.Component;var ne=function(e){function t(){return e.apply(this,arguments)||this}return Object(d.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement($.Consumer,null,(function(t){t||y(!1);var n,r,a=e.props.location||t.location;return o.a.Children.forEach(e.props.children,(function(e){if(null==r&&o.a.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?Q(a.pathname,Object(h.a)({},e.props,{path:i})):t.match}})),r?o.a.cloneElement(n,{location:a,computedMatch:r}):null}))},t}(o.a.Component);function re(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=Object(U.a)(t,["wrappedComponentRef"]);return o.a.createElement($.Consumer,null,(function(t){return t||y(!1),o.a.createElement(e,Object(h.a)({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,V()(n,e)}o.a.useContext;function oe(e){return(oe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ae(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ie(e,t){return(ie=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function le(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=se(e);if(t){var o=se(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ce(this,n)}}function ce(e,t){return!t||"object"!==oe(t)&&"function"!=typeof t?ue(e):t}function ue(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function se(e){return(se=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var fe=re(function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ie(e,t)}(i,e);var t,n,r,a=le(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).state={isUserAdmin:!1,petSitters:[]},t.handleChangeSinglePost=t.handleChangeSinglePost.bind(ue(t)),t}return t=i,(n=[{key:"componentWillMount",value:function(){var e=this;localStorage.getItem("usertoken")&&1===JSON.parse(localStorage.getItem("usertoken")).utilisateur.id_role?c.a.get("https://pets-friendly.herokuapp.com/utilisateurs/recuperation/petsitters/tout").then((function(t){console.log("res",t),e.setState({petSitters:t.data})})):this.props.history.push("/")}},{key:"checked",value:function(){this.setState({isUserAdmin:!this.state.isUserAdmin}),console.log("isUserAdmin1",this.state.isUserAdmin)}},{key:"handleChangeSinglePost",value:function(e){return console.log("id>>>",e),c.a.put("https://pets-friendly.herokuapp.com/utilisateurs/validation/petsitter/".concat(e)).then((function(e){console.log("Bien Modifier")})).catch((function(e){console.log(e)}))}},{key:"render",value:function(){var e=this;return o.a.createElement("div",{className:"container"},o.a.createElement("h1",null,"Administration "),o.a.createElement("table",{className:"table"},o.a.createElement("thead",null,o.a.createElement("tr",null,o.a.createElement("th",null,"Nom ."),o.a.createElement("th",null,"Prenom ."),o.a.createElement("th",null,"Email"),o.a.createElement("th",null,"Etat du compte ."))),o.a.createElement("tbody",null,this.state.petSitters.map((function(t){return o.a.createElement(u,{nom:t.nom,email:t.email,prenom:t.prenom,etatCompte:t.est_valide?o.a.createElement(f.a,{onlabel:"active",offlabel:"desactive",width:75,height:20,checked:!0,onChange:function(n){return e.handleChangeSinglePost(t.id)},size:"sm"}):o.a.createElement(f.a,{onlabel:"active",offlabel:"desactive",width:75,height:20,checked:!1,onChange:function(n){return e.handleChangeSinglePost(t.id)},size:"sm"}),key:t.id})})))))}}])&&ae(t.prototype,n),r&&ae(t,r),i}(r.Component));n(72);var de=function(e){var t=e.divClass,n=e.classa,r=e.classI;return o.a.createElement("li",{className:t},o.a.createElement("a",{className:n},o.a.createElement("i",{className:r}," ")))};function pe(e){return(pe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function me(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function he(e,t){return(he=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ve(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=be(e);if(t){var o=be(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ge(this,n)}}function ge(e,t){return!t||"object"!==pe(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function be(e){return(be=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ye=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&he(e,t)}(i,e);var t,n,r,a=ve(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).state={icones:[]},t}return t=i,(n=[{key:"componentDidMount",value:function(){var e=this;fetch("icones.json",{method:"GET"}).then((function(e){return e.json()})).then((function(t){e.setState({icones:t})}))}},{key:"render",value:function(){return o.a.createElement("ul",{className:"list-unstyled list-inline text-center"},this.state.icones.map((function(e,t){return o.a.createElement(de,{divClass:"list-inline-item",classa:e.classa,classI:e.classI,key:t})})))}}])&&me(t.prototype,n),r&&me(t,r),i}(r.Component);var Ae=function(e){var t=e.divClass,n=e.classH,r=e.classUl,a=e.titre,i=e.li;return o.a.createElement("div",{className:t},o.a.createElement("h5",{className:n},a),o.a.createElement("ul",{className:r},i.map((function(e,t){return o.a.createElement("li",{key:t},"  ",o.a.createElement("a",{href:"#!"},e)," ")}))))};function Ee(e){return(Ee="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function we(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function xe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ce(e,t){return(Ce=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ke(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Oe(e);if(t){var o=Oe(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Se(this,n)}}function Se(e,t){return!t||"object"!==Ee(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Oe(e){return(Oe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Te=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ce(e,t)}(i,e);var t,n,r,a=ke(i);function i(){return we(this,i),a.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){return o.a.createElement("footer",{className:"page-footer font-small mt-5"},o.a.createElement("div",{className:"container text-center text-md-left"},o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-md-2 mx-auto"},o.a.createElement("div",{className:"view overlay z-depth-1-half"},o.a.createElement("img",{src:"src/img/logo.png",className:"img-fluid",alt:"",width:"100vh",height:"150vh"}),o.a.createElement("a",{href:""},o.a.createElement("div",{className:"mask rgba-white-light"})))),o.a.createElement("hr",{className:"clearfix w-100 d-md-none"}),o.a.createElement("hr",{className:"clearfix w-100 d-md-none"}),o.a.createElement(Ae,{divClass:"col-md-2 mx-auto",classH:"font-weight-bold text-uppercase mt-3 mb-4",classUl:"list-unstyled",titre:"Vous",li:["Connexion","Mon profil","Mes favoris","Tableau de bord"]}),o.a.createElement("hr",{className:"clearfix w-100 d-md-none"}),o.a.createElement(Ae,{divClass:"col-md-2 mx-auto",classH:"font-weight-bold text-uppercase mt-3 mb-4",classUl:"list-unstyled",titre:"A propos de Pets Friendly",li:["A propos de nous","Condition d utilisation","Confidentialite","Nous contacter"]}),o.a.createElement("div",{className:"col-md-2"},o.a.createElement("div",{className:"view overlay z-depth-1-half"},o.a.createElement("img",{src:"src/img/icon_reseaux/Paiement_Logo.png",className:"img-fluid",alt:""}))))),o.a.createElement("hr",null),o.a.createElement(ye,null),o.a.createElement("div",{className:"footer-copyright text-center py-3"},"© 2020 Copyright:"))}}])&&xe(t.prototype,n),r&&xe(t,r),i}(r.Component);var Ie=function(e){var t=e.srcIMG,n=e.classBo;return o.a.createElement("div",null,o.a.createElement("img",{className:n,src:t,alt:t}))},Ne=n(8);var _e=function(e,t){var n=Object(r.useRef)(!0);Object(r.useEffect)((function(){if(!n.current)return e();n.current=!1}),t)},Pe=n(18);function je(e){var t,n,o=(t=e,(n=Object(r.useRef)(t)).current=t,n);Object(r.useEffect)((function(){return function(){return o.current()}}),[])}var Re=Math.pow(2,31)-1;function Be(){var e=Object(Pe.a)(),t=Object(r.useRef)();return je((function(){return clearTimeout(t.current)})),Object(r.useMemo)((function(){var n=function(){return clearTimeout(t.current)};return{set:function(r,o){void 0===o&&(o=0),e()&&(n(),o<=Re?t.current=setTimeout(r,o):function e(t,n,r){var o=r-Date.now();t.current=o<=Re?setTimeout(n,o):setTimeout((function(){return e(t,n,r)}),Re)}(t,r,Date.now()+o))},clear:n}}),[])}var De=n(4),Fe=n.n(De),Me=n(11),ze=n(10);function Le(e,t){return function(e){var t=Object(ze.a)(e);return t&&t.defaultView||window}(e).getComputedStyle(e,t)}var Ue=/([A-Z])/g;var He=/^ms-/;function Ve(e){return function(e){return e.replace(Ue,"-$1").toLowerCase()}(e).replace(He,"-ms-")}var We=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;var $e=function(e,t){var n="",r="";if("string"==typeof t)return e.style.getPropertyValue(Ve(t))||Le(e).getPropertyValue(Ve(t));Object.keys(t).forEach((function(o){var a=t[o];a||0===a?!function(e){return!(!e||!We.test(e))}(o)?n+=Ve(o)+": "+a+";":r+=o+"("+a+") ":e.style.removeProperty(Ve(o))})),r&&(n+="transform: "+r+";"),e.style.cssText+=";"+n},qe=n(16);Me.a&&window;function Ye(e,t,n){void 0===n&&(n=5);var r=!1,o=setTimeout((function(){r||function(e){var t=document.createEvent("HTMLEvents");t.initEvent("transitionend",!0,!0),e.dispatchEvent(t)}(e)}),t+n),a=Object(qe.a)(e,"transitionend",(function(){r=!0}),{once:!0});return function(){clearTimeout(o),a()}}var Je=function(e,t,n){var r,o;null==n&&(r=$e(e,"transitionDuration")||"",o=-1===r.indexOf("ms")?1e3:1,n=parseFloat(r)*o||0);var a=Ye(e,n),i=Object(qe.a)(e,"transitionend",t);return function(){a(),i()}},Qe=!1,Ke=o.a.createContext(null),Xe=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,a=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o="exited",r.appearStatus="entering"):o="entered":o=t.unmountOnExit||t.mountOnEnter?"unmounted":"exited",r.state={status:o},r.nextCallback=null,r}Object(d.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&"unmounted"===t.status?{status:"exited"}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?"entering"!==n&&"entered"!==n&&(t="entering"):"entering"!==n&&"entered"!==n||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),"entering"===t?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&"exited"===this.state.status&&this.setState({status:"unmounted"})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[i.a.findDOMNode(this),r],a=o[0],l=o[1],c=this.getTimeouts(),u=r?c.appear:c.enter;!e&&!n||Qe?this.safeSetState({status:"entered"},(function(){t.props.onEntered(a)})):(this.props.onEnter(a,l),this.safeSetState({status:"entering"},(function(){t.props.onEntering(a,l),t.onTransitionEnd(u,(function(){t.safeSetState({status:"entered"},(function(){t.props.onEntered(a,l)}))}))})))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:i.a.findDOMNode(this);t&&!Qe?(this.props.onExit(r),this.safeSetState({status:"exiting"},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:"exited"},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:i.a.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=o[0],l=o[1];this.props.addEndListener(a,l)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if("unmounted"===e)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,Object(U.a)(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return o.a.createElement(Ke.Provider,{value:null},"function"==typeof n?n(e,r):o.a.cloneElement(o.a.Children.only(n),r))},t}(o.a.Component);function Ge(){}Xe.contextType=Ke,Xe.propTypes={},Xe.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Ge,onEntering:Ge,onEntered:Ge,onExit:Ge,onExiting:Ge,onExited:Ge},Xe.UNMOUNTED="unmounted",Xe.EXITED="exited",Xe.ENTERING="entering",Xe.ENTERED="entered",Xe.EXITING="exiting";var Ze=Xe,et=n(45),tt=/-(.)/g;var nt=o.a.createContext({});nt.Consumer,nt.Provider;function rt(e,t){var n=Object(r.useContext)(nt);return e||n[t]||t}var ot=function(e){return e[0].toUpperCase()+(t=e,t.replace(tt,(function(e,t){return t.toUpperCase()}))).slice(1);var t};function at(e,t){var n=void 0===t?{}:t,r=n.displayName,a=void 0===r?ot(e):r,i=n.Component,l=n.defaultProps,c=o.a.forwardRef((function(t,n){var r=t.className,a=t.bsPrefix,l=t.as,c=void 0===l?i||"div":l,u=Object(U.a)(t,["className","bsPrefix","as"]),s=rt(a,e);return o.a.createElement(c,Object(h.a)({ref:n,className:Fe()(r,s)},u))}));return c.defaultProps=l,c.displayName=a,c}var it=at("carousel-caption"),lt=at("carousel-item");function ct(e,t){var n=0;return o.a.Children.map(e,(function(e){return o.a.isValidElement(e)?t(e,n++):e}))}var ut=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return null!=e})).reduce((function(e,t){if("function"!=typeof t)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?t:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}}),null)};function st(e){return!e||"#"===e.trim()}var ft=o.a.forwardRef((function(e,t){var n=e.as,r=void 0===n?"a":n,a=e.disabled,i=e.onKeyDown,l=Object(U.a)(e,["as","disabled","onKeyDown"]),c=function(e){var t=l.href,n=l.onClick;(a||st(t))&&e.preventDefault(),a?e.stopPropagation():n&&n(e)};return st(l.href)&&(l.role=l.role||"button",l.href=l.href||"#"),a&&(l.tabIndex=-1,l["aria-disabled"]=!0),o.a.createElement(r,Object(h.a)({ref:t},l,{onClick:c,onKeyDown:ut((function(e){" "===e.key&&(e.preventDefault(),c(e))}),i)}))}));ft.displayName="SafeAnchor";var dt=ft;function pt(e){e.offsetHeight}var mt={bsPrefix:m.a.string,as:m.a.elementType,slide:m.a.bool,fade:m.a.bool,controls:m.a.bool,indicators:m.a.bool,activeIndex:m.a.number,onSelect:m.a.func,onSlide:m.a.func,onSlid:m.a.func,interval:m.a.number,keyboard:m.a.bool,pause:m.a.oneOf(["hover",!1]),wrap:m.a.bool,touch:m.a.bool,prevIcon:m.a.node,prevLabel:m.a.string,nextIcon:m.a.node,nextLabel:m.a.string},ht={slide:!0,fade:!1,controls:!0,indicators:!0,defaultActiveIndex:0,interval:5e3,keyboard:!0,pause:"hover",wrap:!0,touch:!0,prevIcon:o.a.createElement("span",{"aria-hidden":"true",className:"carousel-control-prev-icon"}),prevLabel:"Previous",nextIcon:o.a.createElement("span",{"aria-hidden":"true",className:"carousel-control-next-icon"}),nextLabel:"Next"};var vt=o.a.forwardRef((function(e,t){var n=Object(et.a)(e,{activeIndex:"onSelect"}),a=n.as,i=void 0===a?"div":a,l=n.bsPrefix,c=n.slide,u=n.fade,s=n.controls,f=n.indicators,d=n.activeIndex,p=n.onSelect,m=n.onSlide,v=n.onSlid,g=n.interval,b=n.keyboard,y=n.onKeyDown,A=n.pause,E=n.onMouseOver,w=n.onMouseOut,x=n.wrap,C=n.touch,k=n.onTouchStart,S=n.onTouchMove,O=n.onTouchEnd,T=n.prevIcon,I=n.prevLabel,N=n.nextIcon,_=n.nextLabel,P=n.className,j=n.children,R=Object(U.a)(n,["as","bsPrefix","slide","fade","controls","indicators","activeIndex","onSelect","onSlide","onSlid","interval","keyboard","onKeyDown","pause","onMouseOver","onMouseOut","wrap","touch","onTouchStart","onTouchMove","onTouchEnd","prevIcon","prevLabel","nextIcon","nextLabel","className","children"]),B=rt(l,"carousel"),D=Object(r.useRef)(null),F=Object(r.useState)("next"),M=F[0],z=F[1],L=Object(r.useState)(!1),H=L[0],V=L[1],W=Object(r.useState)(d||0),$=W[0],q=W[1];H||d===$||(D.current?(z(D.current),D.current=null):z((d||0)>$?"next":"prev"),c&&V(!0),q(d||0));var Y=o.a.Children.toArray(j).filter(o.a.isValidElement).length,J=Object(r.useCallback)((function(e){if(!H){var t=$-1;if(t<0){if(!x)return;t=Y-1}D.current="prev",p&&p(t,e)}}),[H,$,p,x,Y]),Q=Object(Ne.a)((function(e){if(!H){var t=$+1;if(t>=Y){if(!x)return;t=0}D.current="next",p&&p(t,e)}})),K=Object(r.useRef)();Object(r.useImperativeHandle)(t,(function(){return{element:K.current,prev:J,next:Q}}));var X=Object(Ne.a)((function(){!document.hidden&&function(e){if(!(e&&e.style&&e.parentNode&&e.parentNode.style))return!1;var t=getComputedStyle(e);return"none"!==t.display&&"hidden"!==t.visibility&&"none"!==getComputedStyle(e.parentNode).display}(K.current)&&Q()})),G="next"===M?"left":"right";_e((function(){c||(m&&m($,G),v&&v($,G))}),[$]);var Z=B+"-item-"+M,ee=B+"-item-"+G,te=Object(r.useCallback)((function(e){pt(e),m&&m($,G)}),[m,$,G]),ne=Object(r.useCallback)((function(){V(!1),v&&v($,G)}),[v,$,G]),re=Object(r.useCallback)((function(e){if(b&&!/input|textarea/i.test(e.target.tagName))switch(e.key){case"ArrowLeft":return e.preventDefault(),void J(e);case"ArrowRight":return e.preventDefault(),void Q(e)}y&&y(e)}),[b,y,J,Q]),oe=Object(r.useState)(!1),ae=oe[0],ie=oe[1],le=Object(r.useCallback)((function(e){"hover"===A&&ie(!0),E&&E(e)}),[A,E]),ce=Object(r.useCallback)((function(e){ie(!1),w&&w(e)}),[w]),ue=Object(r.useRef)(0),se=Object(r.useRef)(0),fe=Object(r.useState)(!1),de=fe[0],pe=fe[1],me=Be(),he=Object(r.useCallback)((function(e){ue.current=e.touches[0].clientX,se.current=0,C&&pe(!0),k&&k(e)}),[C,k]),ve=Object(r.useCallback)((function(e){e.touches&&e.touches.length>1?se.current=0:se.current=e.touches[0].clientX-ue.current,S&&S(e)}),[S]),ge=Object(r.useCallback)((function(e){if(C){var t=se.current;if(Math.abs(t)<=40)return;t>0?J(e):Q(e)}me.set((function(){pe(!1)}),g||void 0),O&&O(e)}),[C,J,Q,me,g,O]),be=null!=g&&!ae&&!de&&!H,ye=Object(r.useRef)();Object(r.useEffect)((function(){if(be)return ye.current=window.setInterval(document.visibilityState?X:Q,g||void 0),function(){null!==ye.current&&clearInterval(ye.current)}}),[be,Q,g,X]);var Ae=Object(r.useMemo)((function(){return f&&Array.from({length:Y},(function(e,t){return function(e){p&&p(t,e)}}))}),[f,Y,p]);return o.a.createElement(i,Object(h.a)({ref:K},R,{onKeyDown:re,onMouseOver:le,onMouseOut:ce,onTouchStart:he,onTouchMove:ve,onTouchEnd:ge,className:Fe()(P,B,c&&"slide",u&&B+"-fade")}),f&&o.a.createElement("ol",{className:B+"-indicators"},ct(j,(function(e,t){return o.a.createElement("li",{key:t,className:t===$?"active":void 0,onClick:Ae?Ae[t]:void 0})}))),o.a.createElement("div",{className:B+"-inner"},ct(j,(function(e,t){var n=t===$;return c?o.a.createElement(Ze,{in:n,onEnter:n?te:void 0,onEntered:n?ne:void 0,addEndListener:Je},(function(t){return o.a.cloneElement(e,{className:Fe()(e.props.className,n&&"entered"!==t&&Z,("entered"===t||"exiting"===t)&&"active",("entering"===t||"exiting"===t)&&ee)})})):o.a.cloneElement(e,{className:Fe()(e.props.className,n&&"active")})}))),s&&o.a.createElement(o.a.Fragment,null,(x||0!==d)&&o.a.createElement(dt,{className:B+"-control-prev",onClick:J},T,I&&o.a.createElement("span",{className:"sr-only"},I)),(x||d!==Y-1)&&o.a.createElement(dt,{className:B+"-control-next",onClick:Q},N,_&&o.a.createElement("span",{className:"sr-only"},_))))}));vt.displayName="Carousel",vt.propTypes=mt,vt.defaultProps=ht,vt.Caption=it,vt.Item=lt;var gt=vt;function bt(e){return(bt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function yt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function At(e,t){return(At=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Et(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=xt(e);if(t){var o=xt(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return wt(this,n)}}function wt(e,t){return!t||"object"!==bt(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function xt(e){return(xt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ct=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&At(e,t)}(i,e);var t,n,r,a=Et(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).state={images:[]},t}return t=i,(n=[{key:"componentDidMount",value:function(){var e=this;fetch("images.json",{method:"GET"}).then((function(e){return e.json()})).then((function(t){e.setState({images:t})}))}},{key:"render",value:function(){return o.a.createElement(gt,null,this.state.images.map((function(e,t){return o.a.createElement(gt.Item,{key:t}," ",o.a.createElement(Ie,{srcIMG:e.imgSrc,classBo:"img-caroussel d-block w-100"}))})))}}])&&yt(t.prototype,n),r&&yt(t,r),i}(r.Component);n(74);var kt,St=n(19),Ot=n(17);function Tt(e){if((!kt&&0!==kt||e)&&Me.a){var t=document.createElement("div");t.style.position="absolute",t.style.top="-9999px",t.style.width="50px",t.style.height="50px",t.style.overflow="scroll",document.body.appendChild(t),kt=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return kt}var It=n(39);function Nt(e){void 0===e&&(e=Object(ze.a)());try{var t=e.activeElement;return t&&t.nodeName?t:null}catch(t){return e.body}}var _t=n(25),Pt=n(40);function jt(e,t){e.classList?e.classList.add(t):function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")}(e,t)||("string"==typeof e.className?e.className=e.className+" "+t:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+t))}function Rt(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}function Bt(e,t){e.classList?e.classList.remove(t):"string"==typeof e.className?e.className=Rt(e.className,t):e.setAttribute("class",Rt(e.className&&e.className.baseVal||"",t))}function Dt(e){return"window"in e&&e.window===e?e:"nodeType"in(t=e)&&t.nodeType===document.DOCUMENT_NODE&&e.defaultView||!1;var t}function Ft(e){var t;return Dt(e)||(t=e)&&"body"===t.tagName.toLowerCase()?function(e){var t=Dt(e)?Object(ze.a)():Object(ze.a)(e),n=Dt(e)||t.defaultView;return t.body.clientWidth<n.innerWidth}(e):e.scrollHeight>e.clientHeight}var Mt=["template","script","style"],zt=function(e,t,n){[].forEach.call(e.children,(function(e){var r,o,a;-1===t.indexOf(e)&&(o=(r=e).nodeType,a=r.tagName,1===o&&-1===Mt.indexOf(a.toLowerCase()))&&n(e)}))};function Lt(e,t){t&&(e?t.setAttribute("aria-hidden","true"):t.removeAttribute("aria-hidden"))}var Ut,Ht=function(){function e(e){var t=void 0===e?{}:e,n=t.hideSiblingNodes,r=void 0===n||n,o=t.handleContainerOverflow,a=void 0===o||o;this.hideSiblingNodes=void 0,this.handleContainerOverflow=void 0,this.modals=void 0,this.containers=void 0,this.data=void 0,this.scrollbarSize=void 0,this.hideSiblingNodes=r,this.handleContainerOverflow=a,this.modals=[],this.containers=[],this.data=[],this.scrollbarSize=Tt()}var t=e.prototype;return t.isContainerOverflowing=function(e){var t=this.data[this.containerIndexFromModal(e)];return t&&t.overflowing},t.containerIndexFromModal=function(e){return t=this.data,n=function(t){return-1!==t.modals.indexOf(e)},r=-1,t.some((function(e,t){return!!n(e,t)&&(r=t,!0)})),r;var t,n,r},t.setContainerStyle=function(e,t){var n={overflow:"hidden"};e.style={overflow:t.style.overflow,paddingRight:t.style.paddingRight},e.overflowing&&(n.paddingRight=parseInt($e(t,"paddingRight")||"0",10)+this.scrollbarSize+"px"),$e(t,n)},t.removeContainerStyle=function(e,t){Object.assign(t.style,e.style)},t.add=function(e,t,n){var r=this.modals.indexOf(e),o=this.containers.indexOf(t);if(-1!==r)return r;if(r=this.modals.length,this.modals.push(e),this.hideSiblingNodes&&function(e,t){var n=t.dialog,r=t.backdrop;zt(e,[n,r],(function(e){return Lt(!0,e)}))}(t,e),-1!==o)return this.data[o].modals.push(e),r;var a={modals:[e],classes:n?n.split(/\s+/):[],overflowing:Ft(t)};return this.handleContainerOverflow&&this.setContainerStyle(a,t),a.classes.forEach(jt.bind(null,t)),this.containers.push(t),this.data.push(a),r},t.remove=function(e){var t=this.modals.indexOf(e);if(-1!==t){var n=this.containerIndexFromModal(e),r=this.data[n],o=this.containers[n];if(r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length)r.classes.forEach(Bt.bind(null,o)),this.handleContainerOverflow&&this.removeContainerStyle(r,o),this.hideSiblingNodes&&function(e,t){var n=t.dialog,r=t.backdrop;zt(e,[n,r],(function(e){return Lt(!1,e)}))}(o,e),this.containers.splice(n,1),this.data.splice(n,1);else if(this.hideSiblingNodes){var a=r.modals[r.modals.length-1],i=a.backdrop;Lt(!1,a.dialog),Lt(!1,i)}}},t.isTopModal=function(e){return!!this.modals.length&&this.modals[this.modals.length-1]===e},e}(),Vt=n(41);function Wt(e){var t=e||(Ut||(Ut=new Ht),Ut),n=Object(r.useRef)({dialog:null,backdrop:null});return Object.assign(n.current,{add:function(e,r){return t.add(n.current,e,r)},remove:function(){return t.remove(n.current)},isTopModal:function(){return t.isTopModal(n.current)},setDialogRef:Object(r.useCallback)((function(e){n.current.dialog=e}),[]),setBackdropRef:Object(r.useCallback)((function(e){n.current.backdrop=e}),[])})}var $t=Object(r.forwardRef)((function(e,t){var n=e.show,a=void 0!==n&&n,l=e.role,c=void 0===l?"dialog":l,u=e.className,s=e.style,f=e.children,d=e.backdrop,p=void 0===d||d,m=e.keyboard,v=void 0===m||m,g=e.onBackdropClick,b=e.onEscapeKeyDown,y=e.transition,A=e.backdropTransition,E=e.autoFocus,w=void 0===E||E,x=e.enforceFocus,C=void 0===x||x,k=e.restoreFocus,S=void 0===k||k,O=e.restoreFocusOptions,T=e.renderDialog,I=e.renderBackdrop,N=void 0===I?function(e){return o.a.createElement("div",e)}:I,_=e.manager,P=e.container,j=e.containerClassName,R=e.onShow,B=e.onHide,D=void 0===B?function(){}:B,F=e.onExit,M=e.onExited,z=e.onExiting,L=e.onEnter,H=e.onEntering,V=e.onEntered,W=Object(U.a)(e,["show","role","className","style","children","backdrop","keyboard","onBackdropClick","onEscapeKeyDown","transition","backdropTransition","autoFocus","enforceFocus","restoreFocus","restoreFocusOptions","renderDialog","renderBackdrop","manager","container","containerClassName","onShow","onHide","onExit","onExited","onExiting","onEnter","onEntering","onEntered"]),$=Object(Vt.a)(P),q=Wt(_),Y=Object(Pe.a)(),J=Object(Pt.a)(a),Q=Object(r.useState)(!a),K=Q[0],X=Q[1],G=Object(r.useRef)(null);Object(r.useImperativeHandle)(t,(function(){return q}),[q]),Me.a&&!J&&a&&(G.current=Nt()),y||a||K?a&&K&&X(!1):X(!0);var Z=Object(Ne.a)((function(){if(q.add($,j),ae.current=Object(qe.a)(document,"keydown",re),oe.current=Object(qe.a)(document,"focus",(function(){return setTimeout(te)}),!0),R&&R(),w){var e=Nt(document);q.dialog&&e&&!Object(_t.a)(q.dialog,e)&&(G.current=e,q.dialog.focus())}})),ee=Object(Ne.a)((function(){var e;(q.remove(),null==ae.current||ae.current(),null==oe.current||oe.current(),S)&&(null==(e=G.current)||null==e.focus||e.focus(O),G.current=null)}));Object(r.useEffect)((function(){a&&$&&Z()}),[a,$,Z]),Object(r.useEffect)((function(){K&&ee()}),[K,ee]),je((function(){ee()}));var te=Object(Ne.a)((function(){if(C&&Y()&&q.isTopModal()){var e=Nt();q.dialog&&e&&!Object(_t.a)(q.dialog,e)&&q.dialog.focus()}})),ne=Object(Ne.a)((function(e){e.target===e.currentTarget&&(null==g||g(e),!0===p&&D())})),re=Object(Ne.a)((function(e){v&&27===e.keyCode&&q.isTopModal()&&(null==b||b(e),e.defaultPrevented||D())})),oe=Object(r.useRef)(),ae=Object(r.useRef)(),ie=y;if(!$||!(a||ie&&!K))return null;var le=Object(h.a)({role:c,ref:q.setDialogRef,"aria-modal":"dialog"===c||void 0},W,{style:s,className:u,tabIndex:-1}),ce=T?T(le):o.a.createElement("div",le,o.a.cloneElement(f,{role:"document"}));ie&&(ce=o.a.createElement(ie,{appear:!0,unmountOnExit:!0,in:!!a,onExit:F,onExiting:z,onExited:function(){X(!0);for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];null==M||M.apply(void 0,t)},onEnter:L,onEntering:H,onEntered:V},ce));var ue=null;if(p){var se=A;ue=N({ref:q.setBackdropRef,onClick:ne}),se&&(ue=o.a.createElement(se,{appear:!0,in:!!a},ue))}return o.a.createElement(o.a.Fragment,null,i.a.createPortal(o.a.createElement(o.a.Fragment,null,ue,ce),$))})),qt={show:m.a.bool,container:m.a.any,onShow:m.a.func,onHide:m.a.func,backdrop:m.a.oneOfType([m.a.bool,m.a.oneOf(["static"])]),renderDialog:m.a.func,renderBackdrop:m.a.func,onEscapeKeyDown:m.a.func,onBackdropClick:m.a.func,containerClassName:m.a.string,keyboard:m.a.bool,transition:m.a.elementType,backdropTransition:m.a.elementType,autoFocus:m.a.bool,enforceFocus:m.a.bool,restoreFocus:m.a.bool,restoreFocusOptions:m.a.shape({preventScroll:m.a.bool}),onEnter:m.a.func,onEntering:m.a.func,onEntered:m.a.func,onExit:m.a.func,onExiting:m.a.func,onExited:m.a.func,manager:m.a.instanceOf(Ht)};$t.displayName="Modal",$t.propTypes=qt;var Yt,Jt=Object.assign($t,{Manager:Ht}),Qt=(n(76),n(15)),Kt=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Xt=".sticky-top",Gt=".navbar-toggler",Zt=function(e){function t(){return e.apply(this,arguments)||this}Object(d.a)(t,e);var n=t.prototype;return n.adjustAndStore=function(e,t,n){var r,o=t.style[e];t.dataset[e]=o,$e(t,((r={})[e]=parseFloat($e(t,e))+n+"px",r))},n.restore=function(e,t){var n,r=t.dataset[e];void 0!==r&&(delete t.dataset[e],$e(t,((n={})[e]=r,n)))},n.setContainerStyle=function(t,n){var r=this;if(e.prototype.setContainerStyle.call(this,t,n),t.overflowing){var o=Tt();Object(Qt.a)(n,Kt).forEach((function(e){return r.adjustAndStore("paddingRight",e,o)})),Object(Qt.a)(n,Xt).forEach((function(e){return r.adjustAndStore("marginRight",e,-o)})),Object(Qt.a)(n,Gt).forEach((function(e){return r.adjustAndStore("marginRight",e,o)}))}},n.removeContainerStyle=function(t,n){var r=this;e.prototype.removeContainerStyle.call(this,t,n),Object(Qt.a)(n,Kt).forEach((function(e){return r.restore("paddingRight",e)})),Object(Qt.a)(n,Xt).forEach((function(e){return r.restore("marginRight",e)})),Object(Qt.a)(n,Gt).forEach((function(e){return r.restore("marginRight",e)}))},t}(Ht),en=((Yt={}).entering="show",Yt.entered="show",Yt),tn=o.a.forwardRef((function(e,t){var n=e.className,a=e.children,i=Object(U.a)(e,["className","children"]),l=Object(r.useCallback)((function(e){pt(e),i.onEnter&&i.onEnter(e)}),[i]);return o.a.createElement(Ze,Object(h.a)({ref:t,addEndListener:Je},i,{onEnter:l}),(function(e,t){return o.a.cloneElement(a,Object(h.a)({},t,{className:Fe()("fade",n,a.props.className,en[e])}))}))}));tn.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1},tn.displayName="Fade";var nn=tn,rn=at("modal-body"),on=o.a.createContext({onHide:function(){}}),an=o.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.className,a=e.centered,i=e.size,l=e.children,c=e.scrollable,u=Object(U.a)(e,["bsPrefix","className","centered","size","children","scrollable"]),s=(n=rt(n,"modal"))+"-dialog";return o.a.createElement("div",Object(h.a)({},u,{ref:t,className:Fe()(s,r,i&&n+"-"+i,a&&s+"-centered",c&&s+"-scrollable")}),o.a.createElement("div",{className:n+"-content"},l))}));an.displayName="ModalDialog";var ln=an,cn=at("modal-footer"),un={label:m.a.string.isRequired,onClick:m.a.func},sn=o.a.forwardRef((function(e,t){var n=e.label,r=e.onClick,a=e.className,i=Object(U.a)(e,["label","onClick","className"]);return o.a.createElement("button",Object(h.a)({ref:t,type:"button",className:Fe()("close",a),onClick:r},i),o.a.createElement("span",{"aria-hidden":"true"},"×"),o.a.createElement("span",{className:"sr-only"},n))}));sn.displayName="CloseButton",sn.propTypes=un,sn.defaultProps={label:"Close"};var fn=sn,dn=o.a.forwardRef((function(e,t){var n=e.bsPrefix,a=e.closeLabel,i=e.closeButton,l=e.onHide,c=e.className,u=e.children,s=Object(U.a)(e,["bsPrefix","closeLabel","closeButton","onHide","className","children"]);n=rt(n,"modal-header");var f=Object(r.useContext)(on),d=Object(Ne.a)((function(){f&&f.onHide(),l&&l()}));return o.a.createElement("div",Object(h.a)({ref:t},s,{className:Fe()(c,n)}),u,i&&o.a.createElement(fn,{label:a,onClick:d}))}));dn.displayName="ModalHeader",dn.defaultProps={closeLabel:"Close",closeButton:!1};var pn,mn,hn=dn,vn=at("modal-title",{Component:(pn="h4",o.a.forwardRef((function(e,t){return o.a.createElement("div",Object(h.a)({},e,{ref:t,className:Fe()(e.className,pn)}))})))}),gn={show:!1,backdrop:!0,keyboard:!0,autoFocus:!0,enforceFocus:!0,restoreFocus:!0,animation:!0,dialogAs:ln};function bn(e){return o.a.createElement(nn,e)}function yn(e){return o.a.createElement(nn,e)}var An=o.a.forwardRef((function(e,t){var n=e.bsPrefix,a=e.className,i=e.style,l=e.dialogClassName,c=e.children,u=e.dialogAs,s=e["aria-labelledby"],f=e.show,d=e.animation,p=e.backdrop,m=e.keyboard,v=e.onEscapeKeyDown,g=e.onShow,b=e.onHide,y=e.container,A=e.autoFocus,E=e.enforceFocus,w=e.restoreFocus,x=e.restoreFocusOptions,C=e.onEntered,k=e.onExit,S=e.onExiting,O=e.onEnter,T=e.onEntering,I=e.onExited,N=e.backdropClassName,_=e.manager,P=Object(U.a)(e,["bsPrefix","className","style","dialogClassName","children","dialogAs","aria-labelledby","show","animation","backdrop","keyboard","onEscapeKeyDown","onShow","onHide","container","autoFocus","enforceFocus","restoreFocus","restoreFocusOptions","onEntered","onExit","onExiting","onEnter","onEntering","onExited","backdropClassName","manager"]),j=Object(r.useState)({}),R=j[0],B=j[1],D=Object(r.useState)(!1),F=D[0],M=D[1],z=Object(r.useRef)(!1),L=Object(r.useRef)(!1),H=Object(r.useRef)(null),V=Object(It.a)(),W=V[0],$=V[1],q=Object(Ne.a)(b);n=rt(n,"modal"),Object(r.useImperativeHandle)(t,(function(){return{get _modal(){return W}}}),[W]);var Y=Object(r.useMemo)((function(){return{onHide:q}}),[q]);function J(){return _||(mn||(mn=new Zt),mn)}function Q(e){if(Me.a){var t=J().isContainerOverflowing(W),n=e.scrollHeight>Object(ze.a)(e).documentElement.clientHeight;B({paddingRight:t&&!n?Tt():void 0,paddingLeft:!t&&n?Tt():void 0})}}var K=Object(Ne.a)((function(){W&&Q(W.dialog)}));je((function(){Object(Ot.a)(window,"resize",K),H.current&&H.current()}));var X=function(){z.current=!0},G=function(e){z.current&&W&&e.target===W.dialog&&(L.current=!0),z.current=!1},Z=function(){M(!0),H.current=Je(W.dialog,(function(){M(!1)}))},ee=function(e){"static"!==p?L.current||e.target!==e.currentTarget?L.current=!1:b():function(e){e.target===e.currentTarget&&Z()}(e)},te=Object(r.useCallback)((function(e){return o.a.createElement("div",Object(h.a)({},e,{className:Fe()(n+"-backdrop",N,!d&&"show")}))}),[d,N,n]),ne=Object(h.a)({},i,{},R);d||(ne.display="block");return o.a.createElement(on.Provider,{value:Y},o.a.createElement(Jt,{show:f,ref:$,backdrop:p,container:y,keyboard:!0,autoFocus:A,enforceFocus:E,restoreFocus:w,restoreFocusOptions:x,onEscapeKeyDown:function(e){m||"static"!==p?m&&v&&v(e):(e.preventDefault(),Z())},onShow:g,onHide:b,onEnter:function(e){e&&(e.style.display="block",Q(e));for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];O&&O.apply(void 0,[e].concat(n))},onEntering:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];T&&T.apply(void 0,[e].concat(n)),Object(St.a)(window,"resize",K)},onEntered:C,onExit:function(e){H.current&&H.current();for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];k&&k.apply(void 0,[e].concat(n))},onExiting:S,onExited:function(e){e&&(e.style.display="");for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];I&&I.apply(void 0,n),Object(Ot.a)(window,"resize",K)},manager:J(),containerClassName:n+"-open",transition:d?bn:void 0,backdropTransition:d?yn:void 0,renderBackdrop:te,renderDialog:function(e){return o.a.createElement("div",Object(h.a)({role:"dialog"},e,{style:ne,className:Fe()(a,n,F&&n+"-static"),onClick:p?ee:void 0,onMouseUp:G,"aria-labelledby":s}),o.a.createElement(u,Object(h.a)({},P,{role:"document",onMouseDown:X,className:l}),c))}}))}));An.displayName="Modal",An.defaultProps=gn,An.Body=rn,An.Header=hn,An.Title=vn,An.Footer=cn,An.Dialog=ln,An.TRANSITION_DURATION=300,An.BACKDROP_TRANSITION_DURATION=150;var En=An,wn=o.a.forwardRef((function(e,t){var n=e.bsPrefix,r=e.variant,a=e.size,i=e.active,l=e.className,c=e.block,u=e.type,s=e.as,f=Object(U.a)(e,["bsPrefix","variant","size","active","className","block","type","as"]),d=rt(n,"btn"),p=Fe()(l,d,i&&"active",d+"-"+r,c&&d+"-block",a&&d+"-"+a);if(f.href)return o.a.createElement(dt,Object(h.a)({},f,{as:s,ref:t,className:Fe()(p,f.disabled&&"disabled")}));t&&(f.ref=t),u?f.type=u:s||(f.type="button");var m=s||"button";return o.a.createElement(m,Object(h.a)({},f,{className:p}))}));wn.displayName="Button",wn.defaultProps={variant:"primary",active:!1,disabled:!1};var xn=wn,Cn=function(e){return c.a.post("https://pets-friendly.herokuapp.com/utilisateurs/connexion",{email:e.userName,mot_de_passe:e.password}).then((function(e){return localStorage.setItem("usertoken",JSON.stringify(e.data)),console.log(localStorage.getItem("usertoken")),e.data})).catch((function(e){console.log(e)}))},kn=function(e){var t=e.classCss,n=e.onChangeRadio,r=e.classIcon,a=e.classInput,i=e.type,l=e.id,c=e.name,u=e.value,s=e.min,f=e.onChange,d=e.textLabel,p=e.labelClass,m=e.placeHolder,h=e.onClick;return o.a.createElement("div",{className:t,onChange:n},o.a.createElement("i",{className:r}),o.a.createElement("input",{placeholder:m,className:a,type:i,id:l,name:c,value:u,min:s,onChange:f,onClick:h,required:!0}),o.a.createElement("label",{className:p,"data-error":"wrong","data-success":"right",htmlFor:l},d))};function Sn(e){return(Sn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function On(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Tn(e,t){return(Tn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function In(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Pn(e);if(t){var o=Pn(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Nn(this,n)}}function Nn(e,t){return!t||"object"!==Sn(t)&&"function"!=typeof t?_n(e):t}function _n(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Pn(e){return(Pn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var jn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Tn(e,t)}(i,e);var t,n,r,a=In(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).state={inputs:[]},t.continue=t.continue.bind(_n(t)),t}return t=i,(n=[{key:"continue",value:function(e){e.preventDefault(),this.props.nextStep()}},{key:"componentDidMount",value:function(){var e=this;fetch("inputs.json",{method:"GET"}).then((function(e){return e.json()})).then((function(t){e.setState({inputs:t})}))}},{key:"render",value:function(){var e=this;return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{className:"modal-body mx-3"},this.state.inputs.map((function(t,n){return o.a.createElement(kn,{classCss:t.classCss,onChangeRadio:e.props.onChangeRadio,classIcon:t.classIcon,classInput:t.classInput,type:t.type,id:t.id,name:t.name,min:t.min,onchange:e.props.change,value:t.value,textLabel:t.textLabel,key:n})}))),o.a.createElement("ul",{className:"pager"},o.a.createElement("li",{className:"next"},o.a.createElement("a",{href:"#",onClick:this.props.click},"Next"))))}}])&&On(t.prototype,n),r&&On(t,r),i}(r.Component);function Rn(e){return(Rn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Bn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Dn(e,t){return(Dn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Fn(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=zn(e);if(t){var o=zn(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Mn(this,n)}}function Mn(e,t){return!t||"object"!==Rn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function zn(e){return(zn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Ln=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Dn(e,t)}(i,e);var t,n,r,a=Fn(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).state={inputs:[]},t}return t=i,(n=[{key:"continue",value:function(e){e.preventDefault(),this.props.nextStep()}},{key:"back",value:function(e){e.preventDefault(),this.props.prevStep()}},{key:"componentDidMount",value:function(){var e=this;fetch("adress.json",{method:"GET"}).then((function(e){return e.json()})).then((function(t){e.setState({inputs:t})}))}},{key:"render",value:function(){var e=this;return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{className:"modal-body mx-3"},this.state.inputs.map((function(t,n){return o.a.createElement(kn,{classCss:t.classCss,classIcon:t.classIcon,classInput:t.classInput,type:t.type,id:t.id,name:t.name,min:t.min,onchange:e.props.change,textLabel:t.textLabel,key:n})}))),o.a.createElement("ul",{className:"pagination"},o.a.createElement("li",{className:"page-item"},o.a.createElement("a",{href:"#",onClick:this.props.back},"Previous")),o.a.createElement("li",{className:"page-item"},o.a.createElement("a",{href:"#",onClick:this.props.next},"Next"))))}}])&&Bn(t.prototype,n),r&&Bn(t,r),i}(r.Component);function Un(e){return(Un="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Hn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Vn(e,t){return(Vn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Wn(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Yn(e);if(t){var o=Yn(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return $n(this,n)}}function $n(e,t){return!t||"object"!==Un(t)&&"function"!=typeof t?qn(e):t}function qn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Yn(e){return(Yn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Jn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Vn(e,t)}(i,e);var t,n,r,a=Wn(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).state={inputs:[]},t.continue=t.continue.bind(qn(t)),t}return t=i,(n=[{key:"continue",value:function(e){e.preventDefault(),this.props.nextStep()}},{key:"componentDidMount",value:function(){var e=this;fetch("inputs.json",{method:"GET"}).then((function(e){return e.json()})).then((function(t){e.setState({inputs:t})}))}},{key:"render",value:function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{className:"modal-body mx-3"},o.a.createElement(kn,{classCss:"md-form mb-5",classInput:"form-control validate",type:"text",id:"qst1",name:"qst1",placeHolder:"Pourquoi choisisev vous cette job?",onchange:this.props.change}),o.a.createElement(kn,{classCss:"md-form mb-5",classInput:"form-control validate",type:"text",id:"qst2",name:"qst2",placeHolder:"AVEZ-VOUS UNE RESPONSABILITÉ CIVILE ??",onchange:this.props.change}),o.a.createElement(kn,{classCss:"md-form mb-5",classInput:"form-control validate",type:"text",id:"qst3",name:"qst3",placeHolder:"Avez vous des animaux?",onchange:this.props.change}),o.a.createElement(kn,{classCss:"md-form mb-5",classInput:"form-control validate",type:"text",id:"qst4",name:"qst4",placeHolder:"Es ce que vous avez des antecedents judiciaire ?",onchange:this.props.change}),o.a.createElement(kn,{classCss:"md-form mb-5",classInput:"form-control validate",type:"text",id:"qst5",name:"qst5",placeHolder:"QUELS TYPES D ACTIVITÉS PROPOSEZ-VOUS ?",onchange:this.props.change})),o.a.createElement("ul",{className:"pager"},o.a.createElement("li",{className:"page-item"},o.a.createElement("a",{href:"#",onClick:this.props.back},"Previous"))))}}])&&Hn(t.prototype,n),r&&Hn(t,r),i}(r.Component);function Qn(e){return(Qn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Kn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Xn(e,t){return(Xn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Gn(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=tr(e);if(t){var o=tr(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Zn(this,n)}}function Zn(e,t){return!t||"object"!==Qn(t)&&"function"!=typeof t?er(e):t}function er(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function tr(e){return(tr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var nr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xn(e,t)}(i,e);var t,n,r,a=Gn(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).state={isPasswordShown:!1},t.handletogglePasswordVisiblity=t.handletogglePasswordVisiblity.bind(er(t)),t}return t=i,(n=[{key:"handletogglePasswordVisiblity",value:function(){var e=this.state.isPasswordShown;this.setState({isPasswordShown:!e})}},{key:"render",value:function(){var e=this.state.isPasswordShown;return o.a.createElement("form",{id:"boutton-inscription "},o.a.createElement("div",{className:"modal-body mx-3"},o.a.createElement("div",{className:"md-form mb-5"},o.a.createElement("i",{className:"fas fa-envelope prefix grey-text"}),o.a.createElement("input",{type:"email",id:"defaultForm-email",className:"form-control validate",onChange:this.props.getEmail}),o.a.createElement("label",{"data-error":"wrong","data-success":"right",htmlFor:"defaultForm-email"},"Ton Email")),o.a.createElement("div",{className:"md-form mb-4"},o.a.createElement("div",{className:"form-group"},o.a.createElement("div",{className:"input-group"},o.a.createElement("input",{type:e?"text":"password",id:"defaultForm-pass",className:"form-control validate","data-toggle":"password",onChange:this.props.getPass,onKeyPress:this.props.FonctionEntrer}),o.a.createElement("div",{className:"input-group-append"},o.a.createElement("div",{className:"input-group-text"},o.a.createElement("i",{className:"fa fa-eye password-icon",onClick:this.handletogglePasswordVisiblity}))))),o.a.createElement("label",{"data-error":"wrong","data-success":"right",htmlFor:"defaultForm-pass"},"Ton mot de passe"),"*")))}}])&&Kn(t.prototype,n),r&&Kn(t,r),i}(r.Component);function rr(e){return(rr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function or(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ar(e,t){return(ar=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ir(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ur(e);if(t){var o=ur(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return lr(this,n)}}function lr(e,t){return!t||"object"!==rr(t)&&"function"!=typeof t?cr(e):t}function cr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ur(e){return(ur=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var sr=re(function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ar(e,t)}(i,e);var t,n,r,a=ir(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).state={isPasswordShown:!1,show:!1,email:"",mot_de_passe:"",users:[]},t.handletogglePasswordVisiblity=t.handletogglePasswordVisiblity.bind(cr(t)),t.onHandleChangeName=t.onHandleChangeName.bind(cr(t)),t.onHandleChangePass=t.onHandleChangePass.bind(cr(t)),t.handleShow=t.handleShow.bind(cr(t)),t.onHandleClose=t.onHandleClose.bind(cr(t)),t.onHandleChangeAndEnter=t.onHandleChangeAndEnter.bind(cr(t)),t.onSubmit=t.onSubmit.bind(cr(t)),t.onHandleClose=t.onHandleClose.bind(cr(t)),t}return t=i,(n=[{key:"onHandleClose",value:function(){this.setState({show:!1})}},{key:"handletogglePasswordVisiblity",value:function(){var e=this.state.isPasswordShown;this.setState({isPasswordShown:!e})}},{key:"handleShow",value:function(){this.setState({show:!0})}},{key:"onHandleChangeAndEnter",value:function(e){var t=this;if("Enter"===e.key){e.preventDefault();var n={userName:this.state.email,password:this.state.mot_de_passe};Cn(n).then((function(e){e&&(console.log("test",e.utilisateur.id_role),t.setState({users:e}),1===e.utilisateur.id_role&&t.props.history.push("/admin"),t.props.onHandleClose(),t.setState({userName:t.state.users.utilisateur.nom}))}))}}},{key:"onHandleChangeName",value:function(e){this.setState({email:e.target.value})}},{key:"onHandleChangePass",value:function(e){this.setState({mot_de_passe:e.target.value})}},{key:"onSubmit",value:function(e){var t=this;e.preventDefault();var n={userName:this.state.email,password:this.state.mot_de_passe};Cn(n).then((function(e){e&&(console.log("email",e.utilisateur.id_role),t.setState({users:e}),1===e.utilisateur.id_role&&t.props.history.push("/admin"),t.props.onHandleClose(),console.log("test",t.state.users.utilisateur.nom),t.setState({userName:t.state.users.utilisateur.nom}))}))}},{key:"render",value:function(){return o.a.createElement(En,{show:this.props.show,onHide:this.props.onHandleClose},o.a.createElement(En.Header,{closeButton:!0},o.a.createElement(En.Title,null,"Page Connexion")),o.a.createElement(En.Body,null,o.a.createElement(nr,{FonctionEntrer:this.onHandleChangeAndEnter,getPass:this.onHandleChangePass,getEmail:this.onHandleChangeName})),o.a.createElement(En.Footer,null,o.a.createElement(xn,{variant:"secondary",onClick:this.onHandleClose},"Annuler"),o.a.createElement(xn,{variant:"primary",onClick:this.onSubmit},"Se connecter")))}}])&&or(t.prototype,n),r&&or(t,r),i}(r.Component)),fr=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=N(t.props),t}return Object(d.a)(t,e),t.prototype.render=function(){return o.a.createElement(q,{history:this.history,children:this.props.children})},t}(o.a.Component);o.a.Component;var dr=function(e,t){return"function"==typeof e?e(t):e},pr=function(e,t){return"string"==typeof e?k(e,null,null,t):e},mr=function(e){return e},hr=o.a.forwardRef;void 0===hr&&(hr=mr);var vr=hr((function(e,t){var n=e.innerRef,r=e.navigate,a=e.onClick,i=Object(U.a)(e,["innerRef","navigate","onClick"]),l=i.target,c=Object(h.a)({},i,{onClick:function(e){try{a&&a(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return c.ref=mr!==hr&&t||n,o.a.createElement("a",c)}));var gr=hr((function(e,t){var n=e.component,r=void 0===n?vr:n,a=e.replace,i=e.to,l=e.innerRef,c=Object(U.a)(e,["component","replace","to","innerRef"]);return o.a.createElement($.Consumer,null,(function(e){e||y(!1);var n=e.history,u=pr(dr(i,e.location),e.location),s=u?n.createHref(u):"",f=Object(h.a)({},c,{href:s,navigate:function(){var t=dr(i,e.location);(a?n.replace:n.push)(t)}});return mr!==hr?f.ref=t||l:f.innerRef=l,o.a.createElement(r,f)}))})),br=function(e){return e},yr=o.a.forwardRef;void 0===yr&&(yr=br);yr((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,a=e.activeClassName,i=void 0===a?"active":a,l=e.activeStyle,c=e.className,u=e.exact,s=e.isActive,f=e.location,d=e.sensitive,p=e.strict,m=e.style,v=e.to,g=e.innerRef,b=Object(U.a)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return o.a.createElement($.Consumer,null,(function(e){e||y(!1);var n=f||e.location,a=pr(dr(v,n),n),A=a.pathname,E=A&&A.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),w=E?Q(n.pathname,{path:E,exact:u,sensitive:d,strict:p}):null,x=!!(s?s(w,n):w),C=x?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(c,i):c,k=x?Object(h.a)({},m,{},l):m,S=Object(h.a)({"aria-current":x&&r||null,className:C,style:k,to:a},b);return br!==yr?S.ref=t||g:S.innerRef=g,o.a.createElement(gr,S)}))}));function Ar(e){return(Ar="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Er(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function wr(e,t){return(wr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function xr(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Sr(e);if(t){var o=Sr(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Cr(this,n)}}function Cr(e,t){return!t||"object"!==Ar(t)&&"function"!=typeof t?kr(e):t}function kr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Sr(e){return(Sr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Or=re(function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&wr(e,t)}(i,e);var t,n,r,a=xr(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).state={step:1,qs1:"",qs2:"",qs3:"",qs4:"",qs5:"",id_role:0,nom:"",prenom:"",age:"",email:"",mot_de_passe:"",sexe:"if",telephone:"",numero_rue:"",nom_rue:"",code_postal:"",ville:"",province:"",pays:"",numero_appt:"",show:!1,showInscription:!1,user:[],newUser:[]},t.onHandleChangeName=t.onHandleChangeName.bind(kr(t)),t.onHandleChangePass=t.onHandleChangePass.bind(kr(t)),t.handleShow=t.handleShow.bind(kr(t)),t.handleShowInsc=t.handleShowInsc.bind(kr(t)),t.onHandleClose=t.onHandleClose.bind(kr(t)),t.handleCloseInsc=t.handleCloseInsc.bind(kr(t)),t.getValues=t.getValues.bind(kr(t)),t.getValuesRadio=t.getValuesRadio.bind(kr(t)),t.onHandleChangeAndEnter=t.onHandleChangeAndEnter.bind(kr(t)),t.showStep=t.showStep.bind(kr(t)),t.nextStep=t.nextStep.bind(kr(t)),t.prevStep=t.prevStep.bind(kr(t)),t}return t=i,(n=[{key:"onSubmitRegister",value:function(e){var t=this;this.handleCloseInsc(),console.log("new User",this.state),e.preventDefault(),function(e){return c.a.post("https://pets-friendly.herokuapp.com/utilisateurs/creation",{utilisateur:{id_role:e.id_role,nom:e.nom,prenom:e.prenom,age:e.age,email:e.email,mot_de_passe:e.mot_de_passe,sexe:e.sexe,telephone:e.telephone},adresse:{numero_rue:e.numero_rue,nom_rue:e.nom_rue,code_postal:e.code_postal,ville:e.ville,province:e.province,pays:e.pays,numero_appt:e.numero_appt}}).then((function(e){console.log("Registered",e)}))}({id_role:this.state.id_role,nom:this.state.nom,prenom:this.state.prenom,age:this.state.age,email:this.state.email,mot_de_passe:this.state.mot_de_passe,sexe:this.state.sexe,telephone:this.state.telephone,numero_rue:this.state.numero_rue,nom_rue:this.state.nom_rue,code_postal:this.state.code_postal,ville:this.state.ville,province:this.state.province,pays:this.state.pays,numero_appt:this.state.numero_appt}).then((function(e){e&&(alert(" Bien Ajouter"),console.log("test",e),t.setState({users:e}),t.handleCloseInsc(),console.log("test",t.state.users.utilisateur.nom),t.setState({userName:t.state.users.utilisateur.nom}))}))}},{key:"nextStep",value:function(e){console.log("step",this.state.step),e.preventDefault(),this.setState({step:this.state.step+1})}},{key:"prevStep",value:function(e){var t=this.state.step;e.preventDefault(),this.setState({step:t-1})}},{key:"showStep",value:function(){return 1===this.state.step?o.a.createElement(jn,{onChangeRadio:this.getValuesRadio,change:this.getValues,click:this.nextStep}):2===this.state.step?o.a.createElement(Ln,{change:this.getValues,next:this.nextStep,back:this.prevStep}):3===this.state.step?o.a.createElement(Jn,{change:this.getValues,back:this.prevStep}):void 0}},{key:"handleShow",value:function(){this.setState({show:!0})}},{key:"handleShowInsc",value:function(){this.setState({showInscription:!0})}},{key:"onHandleClose",value:function(){this.setState({show:!1})}},{key:"handleCloseInsc",value:function(){this.setState({showInscription:!1})}},{key:"onSubmit",value:function(e){var t=this;console.log("email",this.state.utilisateur),e.preventDefault();var n={userName:this.state.email,password:this.state.mot_de_passe};Cn(n).then((function(e){e&&(console.log("Email"),t.setState({users:e}),t.onHandleClose(),console.log("test",t.state.users.utilisateur.nom),t.setState({userName:t.state.users.utilisateur.nom}))}))}},{key:"onHandleChangeName",value:function(e){this.setState({email:e.target.value})}},{key:"onHandleChangePass",value:function(e){this.setState({mot_de_passe:e.target.value})}},{key:"logOut",value:function(e){e.preventDefault(),localStorage.removeItem("usertoken"),console.log("disconnected"),console.log(localStorage.getItem("usertoken")),this.props.history.push("/")}},{key:"onHandleChangeAndEnter",value:function(e){var t=this;if("Enter"===e.key){e.preventDefault();var n={userName:this.state.email,password:this.state.mot_de_passe};Cn(n).then((function(e){e&&(console.log("test",e.utilisateur.id_role),t.setState({users:e}),3===e.utilisateur.id_role&&t.props.history.push("/admin"),t.onHandleClose(),t.setState({userName:t.state.users.utilisateur.nom}))}))}}},{key:"getValues",value:function(e){var t,n,r;this.setState((t={},n=e.target.name,r=e.target.value,n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t))}},{key:"getValuesRadio",value:function(e){"sexe"===e.target.name?(console.log("sexe",e.target.value),this.setState({sexe:e.target.value})):"id_role"===e.target.name&&this.setState({id_role:e.target.value})}},{key:"render",value:function(){var e=o.a.createElement("div",{className:"collapse navbar-collapse",id:"bs-example-navbar-collapse-1"},o.a.createElement("ul",{className:"navbar-nav ml-auto"},o.a.createElement("li",{className:"nav-item active"},o.a.createElement("a",{className:"nav-link",onClick:this.handleShow},"Se connecter")),o.a.createElement("li",{className:"nav-item"},o.a.createElement("a",{className:"nav-link",onClick:this.handleShowInsc}," S'inscrire")))),t=o.a.createElement("div",{className:"collapse navbar-collapse",id:"navbarResponsive"},o.a.createElement("ul",{className:"navbar-nav ml-auto"},o.a.createElement("li",{className:"nav-item active"},o.a.createElement("a",{className:"navbar-brand",href:"#"},o.a.createElement("img",{className:"rounded-circle",src:"src/img/avatar.jpg",width:"30",height:"30"}))),o.a.createElement("li",{className:"nav-item active"},o.a.createElement(gr,{to:"/profil",className:"nav-link"}," ",localStorage.usertoken?JSON.parse(localStorage.getItem("usertoken")).utilisateur.nom:"")),o.a.createElement("li",{className:"nav-item active"},o.a.createElement(gr,{to:"/search",className:"nav-link"},"chercher")),o.a.createElement("li",{className:"nav-item active"},o.a.createElement("a",{className:"nav-link",onClick:this.logOut.bind(this)},"Se deconnecter"))));return o.a.createElement("div",{className:"collapse navbar-collapse",id:"navbarResponsive"},localStorage.usertoken?t:e,o.a.createElement(sr,{show:this.state.show,onHandleClose:this.onHandleClose}),o.a.createElement(En,{show:this.state.showInscription,onHide:this.handleCloseInsc},o.a.createElement(En.Header,{closeButton:!0},o.a.createElement(En.Title,null,"Page Inscription")),o.a.createElement(En.Body,null,this.showStep()),o.a.createElement(En.Footer,null,o.a.createElement(xn,{variant:"secondary",onClick:this.handleCloseInsc},"Annuler"),o.a.createElement(xn,{variant:"primary",onClick:this.onSubmitRegister.bind(this)},"Creer votre compte"))))}}])&&Er(t.prototype,n),r&&Er(t,r),i}(r.Component));var Tr=function(e){var t=e.title1,n=e.title2;return o.a.createElement(gr,{to:"/",className:"navbar-brand"},o.a.createElement("img",{className:"logo",src:"src/img/logo.png",alt:""}),o.a.createElement("span",{className:"name"},t),o.a.createElement("span",{className:"titre2"},n))};var Ir=function(){return o.a.createElement("nav",{className:"navbar navbar-expand-lg navbar-dark navbar-fixed-top"},o.a.createElement("div",{className:"container"},o.a.createElement(Tr,{title1:"Pets Friendly",title2:"Devenir Sitter ?"}),o.a.createElement(Or,{param1:"Se connecter",param2:"S'inscrire"})))},Nr=function(e){var t=e.classCss,n=e.titre;return o.a.createElement("div",{className:t},o.a.createElement(gr,{to:"/search"},o.a.createElement(xn,{variant:"danger mt-3"},n)),o.a.createElement("p",{className:"text-light mx-auto"},"En savoir plus "))},_r=function(e){var t=e.classDiv,n=e.src,r=e.classCss,a=e.titre;return o.a.createElement("div",{className:t},o.a.createElement("img",{src:n,className:r,width:"200",height:"200"}),o.a.createElement("span",{className:" pl-sm-5 justify-content-center"},a))};function Pr(e){return(Pr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function jr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Rr(e,t){return(Rr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Br(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Fr(e);if(t){var o=Fr(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Dr(this,n)}}function Dr(e,t){return!t||"object"!==Pr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Fr(e){return(Fr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Mr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Rr(e,t)}(i,e);var t,n,r,a=Br(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).state={images:[]},t}return t=i,(n=[{key:"render",value:function(){return o.a.createElement("div",{className:"row mb-3"},o.a.createElement(_r,{classDiv:"col-lg-4",src:"src/img/image_site/icone/logo-garantie.png",classCss:"rounded-circle mx-auto d-block",titre:"lisez les avis vérifiés et choisissez le gardien parfait"}),o.a.createElement(_r,{classDiv:"col-lg-4",src:"src/img/image_site/icone/money-icon-76.png",classCss:"rounded-circle mx-auto d-block",titre:"réserver et payer en toute securité  via le site web ou l application"}),o.a.createElement(_r,{classDiv:"col-lg-4",src:"src/img/image_site/icone/avis.png",classCss:"rounded-circle mx-auto d-block ",titre:"beneficier de la garantie rover d une assistance 24/7 et d une protection de reservation"}))}}])&&jr(t.prototype,n),r&&jr(t,r),i}(r.Component);function zr(e){return(zr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Lr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ur(e,t){return(Ur=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Hr(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Wr(e);if(t){var o=Wr(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Vr(this,n)}}function Vr(e,t){return!t||"object"!==zr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Wr(e){return(Wr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var $r=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ur(e,t)}(i,e);var t,n,r,a=Hr(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).state={titres:[]},t}return t=i,(n=[{key:"componentWillMount",value:function(){var e=this;fetch("titres.json",{method:"GET"}).then((function(e){return e.json()})).then((function(t){e.setState({titres:t})}))}},{key:"render",value:function(){return o.a.createElement("div",null,o.a.createElement("div",null,o.a.createElement("main",{id:"divContainer"},o.a.createElement(Ct,null),o.a.createElement("div",{className:"block"},o.a.createElement("span",{className:"SpanTitre"},"Nous considérons votre animal comme un membre de notre famille"))),o.a.createElement("div",{className:"row bg-dark"},this.state.titres.map((function(e,t){return o.a.createElement(Nr,{classCss:"h-100 p-3 col-lg-4 text-center ",titre:e.titreBtn,key:t})}))),o.a.createElement(Mr,null),o.a.createElement("div",{className:"infolettreDiv mt-3"},o.a.createElement("h1",{className:"h1"},"Laissez nous vous prévenir des nouveautés"),o.a.createElement("h6",{className:"h6"},"Restez informé"),o.a.createElement("form",null,o.a.createElement(kn,{classCss:"form-group",classInput:"form-control",textLabel:"Entrez votre email",type:"email",id:"infolettre",name:"infolettre",onChange:this.handleChange}),o.a.createElement(kn,{classInput:"btn btn-outline-danger",type:"submit",id:"infolettreButton",name:"Envoyer ",value:"Envoyer"})))))}}])&&Lr(t.prototype,n),r&&Lr(t,r),i}(r.Component),qr=function(e){var t=e.classCss,n=e.classInput,r=e.textLabel,a=e.id,i=e.name,l=e.value,c=e.options,u=e.onChange;return o.a.createElement("div",{className:t},o.a.createElement("label",{htmlFor:a},r),o.a.createElement("select",{name:i,value:l,onChange:u,className:n},c.map((function(e,t){return o.a.createElement("option",{value:e.value,key:t},e.label)}))))},Yr=function(e){var t=e.text,n=e.className;return o.a.createElement("li",{className:n},t)},Jr=function(e){var t=e.urlPhoto,n=e.className,r=e.nom,a=e.rating,i=e.onClickProfil,l=e.classInput,c=(e.classInput2,e.onClickEnvoyer,e.textBoutonProfil),u=(e.textBoutonEnvoyer,e.servicesSitter),s=e.servicesTotal,f=e.id;e.link;return o.a.createElement("div",{className:n},o.a.createElement("img",{className:"img-fluid img-thumbnail rounded-circle m-20",style:{heigth:"30vh",width:"75%"},src:"https://pets-friendly.herokuapp.com/images/images_profiles/"+t,alt:t}),o.a.createElement("h2",{className:" w-25 p-3 mx-auto"},r),o.a.createElement("ul",{className:"list-group"},u.map((function(e,t){return o.a.createElement("li",{key:t,className:"list-group-item list-group-item-danger"},s[e-1].description_service," ",s[e-1].prix_service,o.a.createElement("i",{className:"fas fa-dollar-sign"}))})),o.a.createElement("p",{className:" w-25 p-3 mx-auto"},a),o.a.createElement("button",{type:"button",name:f,onClick:i,className:l},c," ")))};n(77);function Qr(e){return(Qr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Kr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Xr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Gr(e,t){return(Gr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Zr(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=to(e);if(t){var o=to(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return eo(this,n)}}function eo(e,t){return!t||"object"!==Qr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function to(e){return(to=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var no=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Gr(e,t)}(i,e);var t,n,r,a=Zr(i);function i(){return Kr(this,i),a.apply(this,arguments)}return t=i,(n=[{key:"render",value:function(){return this.props.show?o.a.createElement("div",{className:"Modal shadow-lg p-3 mb-5 bg-white rounded border border-danger"},o.a.createElement("div",{className:"modal-dialog",role:"document"},o.a.createElement("div",{className:"modal-content"},o.a.createElement("div",{className:"modal-header"},o.a.createElement("h1",{className:"w-50 mx-auto modal-title "},"ATTENTION")),o.a.createElement("div",{className:"modal-body"},o.a.createElement("h5",{className:"mx-auto"},this.props.children)),o.a.createElement("div",{className:"modal-footer"},o.a.createElement("button",{className:"btn btn-outline-danger w-50",onClick:this.props.onHandleonClose},"Close"))))):null}}])&&Xr(t.prototype,n),r&&Xr(t,r),i}(o.a.Component);n(79);function ro(e){return(ro="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function oo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ao(e,t){return(ao=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function io(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=uo(e);if(t){var o=uo(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return lo(this,n)}}function lo(e,t){return!t||"object"!==ro(t)&&"function"!=typeof t?co(e):t}function co(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function uo(e){return(uo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var so=re(function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ao(e,t)}(i,e);var t,n,r,a=io(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).state={servicesRechercher:[],numero_rue:"",nom_rue:"",code_postal:"",ville:"",pays:"",dateDebut:"",dateFin:"",typeAnimal:"",infolettre:"",resultatRecherche:!0,infosRecherche:[],recherche:!1,resultat:[],province:"",servicesTotal:[],show:!1,message:""},t.handleAddOnClick=t.handleAddOnClick.bind(co(t)),t.handleSaveOnClick=t.handleSaveOnClick.bind(co(t)),t.handleChange=t.handleChange.bind(co(t)),t.handleChangeSelect=t.handleChangeSelect.bind(co(t)),t.handleSubmit=t.handleSubmit.bind(co(t)),t.handleAfficherSitterOnClick=t.handleAfficherSitterOnClick.bind(co(t)),t.handleEnvoyerDemandeOnClick=t.handleEnvoyerDemandeOnClick.bind(co(t)),t.showModal=t.showModal.bind(co(t)),t.onHandleonClose=t.onHandleonClose.bind(co(t)),t}return t=i,(n=[{key:"showModal",value:function(){this.setState({show:!0})}},{key:"onHandleonClose",value:function(){this.setState({show:!1})}},{key:"componentDidMount",value:function(){var e=this;return c.a.get("https://pets-friendly.herokuapp.com/services/recuperation/tout").then((function(t){var n=[];t.data.map((function(e,t){return n.push(e)})),console.log("services",n),localStorage.setItem("servicestotal",JSON.stringify(n)),e.setState({servicesTotal:n})})).catch((function(e){console.log("erreur recherche:",e)}))}},{key:"handleChangeSelect",value:function(e){this.setState({typeAnimal:e.target.value})}},{key:"handleChange",value:function(e){switch(e.target.id){case"garderChezPetsitter":this.state.servicesRechercher[0]=1;break;case"garderChezVous":this.state.servicesRechercher[0]=2;break;case"dateDebut":this.setState({dateDebut:e.target.value});break;case"dateFin":this.setState({dateFin:e.target.value});break;case"promenade":3===this.state.servicesRechercher[1]?this.state.servicesRechercher.splice(1,1):this.state.servicesRechercher[1]=3;break;case"numeroRue":console.log(e.target.value),this.setState({numero_rue:e.target.value});break;case"nomRue":this.setState({nom_rue:e.target.value});break;case"secteurAction":this.setState({code_postal:e.target.value});break;case"province":this.setState({province:e.target.value});break;case"ville":this.setState({ville:e.target.value});break;case"pays":this.setState({pays:e.target.value});break;case"infolettre":this.setState({infolettre:e.target.value})}}},{key:"handleSubmit",value:function(e){var t=this;return c.a.post("https://pets-friendly.herokuapp.com/recherche",{services:this.state.servicesRechercher,adresse:{numero_rue:this.state.nom_rue,nom_rue:this.state.nom_rue,code_postal:this.state.code_postal,ville:this.state.ville,province:this.state.province,pays:this.state.pays}}).then((function(e){t.setState({resultat:e.data})})).catch((function(e){console.log("erreur recherche:",e)}))}},{key:"handleAddOnClick",value:function(){this.setState({resultatRecherche:!0})}},{key:"handleSaveOnClick",value:function(){this.setState({resultatRecherche:!1})}},{key:"handleAfficherSitterOnClick",value:function(e){localStorage.getItem("usertoken")&&3===JSON.parse(localStorage.getItem("usertoken")).utilisateur.id_role?(this.state.message="Vous deves etre un proprietaire pour utiliser notres services de recherche ",this.showModal()):localStorage.getItem("usertoken")?localStorage.getItem("usertoken")&&2===JSON.parse(localStorage.getItem("usertoken")).utilisateur.id_role&&(console.log(this.state.resultat[e.target.name]),console.log(this.state.dateDebut),console.log(this.state.dateFin),localStorage.setItem("serviceRecherche",JSON.stringify(this.state.servicesRechercher)),localStorage.setItem("dateDebut",JSON.stringify(this.state.dateDebut)),localStorage.setItem("dateFin",JSON.stringify(this.state.dateFin)),localStorage.setItem("sitter",JSON.stringify(this.state.resultat[e.target.name])),this.props.history.push("/demande")):(this.state.message="Veuillez vous connecter ou inscrire pour continuer",console.log("dans le if non user"),this.showModal())}},{key:"handleEnvoyerDemandeOnClick",value:function(e){localStorage.setItem("sitter",JSON.stringify(this.state.resultat[e.target.name]))}},{key:"render",value:function(){var e=this;return console.log("state :",this.state),console.log("codepostal",this.state.code_postal.length),o.a.createElement("div",null,o.a.createElement("div",{id:"divPublicite"},o.a.createElement("div",{className:"greyboxdiv"},o.a.createElement("h1",{className:"h1"},"Gagnez temps et tranquilité d'esprit. Recherchez ce qu'il vous faut, on s'occupe du reste! "))),o.a.createElement("h1",{className:"w-25 p-3 mx-auto"},"Recherche Petsitter"),o.a.createElement("div",{className:"w-50 p-3 mx-auto img-fluid img-thumbnail"},o.a.createElement(kn,{classCss:"form-check",classInput:"form-form-check-input",labelClass:"form-check-label",type:"radio",textLabel:"Garder Chez le PetSitter",id:"garderChezPetsitter",name:"gardeMaison",value:this.state.garderChezPetsitter,onChange:this.handleChange}),o.a.createElement(kn,{classCss:"form-check",classInput:"form-form-check-input",labelClass:"form-check-label",type:"radio",textLabel:"Garder chez vous",id:"garderChezVous",name:"gardeMaison",value:this.state.garderChezVous,onChange:this.handleChange}),o.a.createElement(kn,{classCss:"form-check",classInput:"form-form-check-input",labelClass:"form-check-label",type:"checkbox",textLabel:"Promenade",id:"promenade",name:"Promenade",value:this.state.promenade,onChange:this.handleChange}),o.a.createElement(kn,{classCss:"form-group",classInput:"form-control",textLabel:"Date de debut",type:"date",id:"dateDebut",name:"dateDebut",onChange:this.handleChange}),o.a.createElement(kn,{classCss:"form-group",classInput:"form-control",textLabel:"Date de fin",type:"date",id:"dateFin",name:"dateFin",onChange:this.handleChange}),o.a.createElement(kn,{classCss:"form-group",classInput:"form-control",textLabel:"Numero",type:"number",id:"numeroRue",name:"numero",min:0,onChange:this.handleChange}),o.a.createElement(kn,{classCss:"form-group",classInput:"form-control",textLabel:"Nom de la rue",type:"text",id:"nomRue",name:"nom de la rue",onChange:this.handleChange}),o.a.createElement(kn,{classCss:"form-group",classInput:"form-control",textLabel:"Code postal",type:"text",id:"secteurAction",name:"secteurAction",onChange:this.handleChange}),o.a.createElement(kn,{classCss:"form-group",classInput:"form-control",textLabel:"Ville",type:"text",id:"ville",name:"ville",onChange:this.handleChange}),o.a.createElement(kn,{classCss:"form-group",classInput:"form-control",textLabel:"Province",type:"text",id:"province",name:"province",onChange:this.handleChange}),o.a.createElement(kn,{classCss:"form-group",classInput:"form-control",textLabel:"pays",type:"text",id:"pays",name:"pays",onChange:this.handleChange}),o.a.createElement(qr,{classCss:"form-group",classInput:"form-control",textLabel:"Type de animal:",id:"typeAnimal",name:"TypeAnimal",options:[{label:"Chien",value:"Chien "},{label:"Chat",value:"Chat"}],onChange:this.handleChangeSelect,value:this.state.typeAnimal}),o.a.createElement(kn,{classInput:"btn btn-outline-success",type:"submit",id:"rechercher",name:"Rechercher ",value:"rechercher",onClick:this.handleSubmit})),o.a.createElement(no,{onHandleonClose:this.onHandleonClose,show:this.state.show},this.state.message),this.state.resultatRecherche?"":o.a.createElement("h1",{className:"text-danger"},"Aucun sitter n'a été retrouvé selon vos critères. Veuillez changer vos critères de sélection ou nous contacter"),o.a.createElement("div",{className:"row"},this.state.resultat?this.state.resultat.map((function(t,n){return null===t.url_photo&&"masculin"===t.sexe?t.url_photo="image_profile_default_homme.jpg":null===t.url_photo&&"feminin"===t.sexe&&(t.url_photo="image_profile_default_femme.jpg"),o.a.createElement(Jr,{urlPhoto:t.url_photo,nom:t.nom,rating:(r=t.rating,a="",r>0&&r<50?a="Debutant":r>=50&&r<100?a="Normal":r>=100&&r<200?a="Intermediare":r>=200&&r<400?a="Proffesionel":r>=400&&(a="Expert"),a),className:"col-lg-4 mt-3 ",key:n,onClickProfil:e.handleAfficherSitterOnClick,onClickEnvoyer:e.handleEnvoyerDemandeOnClick,classInput:"fas fa-heart btn btn-outline-danger w-100 p-3 mx-auto",classInput2:"fas fa-paper-plane btn btn-outline-success mx-auto",textBoutonProfil:"Acceder au Profil",textBoutonEnvoyer:"Envoyer une demande",servicesTotal:e.state.servicesTotal,servicesSitter:e.state.servicesRechercher,id:n,link:"/demande"});var r,a})):""),o.a.createElement("div",{id:"divPlubicite2"},o.a.createElement("h1",{className:"w-50 p-3 mx-auto h1"},"Des services sur mesure pour un animal d'exeption "),o.a.createElement("div",{className:"row divAnnonce"},o.a.createElement("div",{className:"col-lg-4 mx-auto border border-danger rounded serviceProposes"},o.a.createElement(Yr,{text:"Faites garder votre animal à votre domicile ou à celui du Pet Sitter",className:"fas fa-check"}),o.a.createElement(Yr,{text:"Partez à votre rendez-vous sans vous soucier de la promenade de votre chien",className:"fas fa-check"}),o.a.createElement(Yr,{text:"Besoin de flexibilité? Choisissez les horaires et périodes qui vous conviennent",className:"fas fa-check"})),o.a.createElement("div",{className:"col-lg-4 mx-auto border border-danger rounded serviceProposes"},o.a.createElement(Yr,{text:"Tous les nouveaux gardiens passent une vérification des antécédents de base",className:"fas fa-check"}),o.a.createElement(Yr,{text:"Tous les gardiens fournissent un profil détaillé et des informations personnelles ",className:"fas fa-check"}),o.a.createElement(Yr,{text:"Tous les Pet Sitter sont agréés par notre équipe de spécialistes chez Pets Friendly",className:"fas fa-check"})))),o.a.createElement("div",{className:"infolettreDiv mt-3"},o.a.createElement("h1",{className:"h1"},"Laissez nous vous prévenir de nos nouveautés"),o.a.createElement("h6",{className:"h6"},"Restez informé"),o.a.createElement("form",null,o.a.createElement(kn,{classCss:"form-group",classInput:"form-control",textLabel:"Entrez votre email",type:"email",id:"infolettre",name:"infolettre",onChange:this.handleChange}),o.a.createElement(kn,{classInput:"btn btn-outline-danger",type:"submit",id:"infolettreButton",name:"Envoyer ",value:"Envoyer"}))))}}])&&oo(t.prototype,n),r&&oo(t,r),i}(r.Component)),fo=n(44),po=n.n(fo);n(81);function mo(e){return(mo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ho(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function vo(e,t){return(vo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function go(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Ao(e);if(t){var o=Ao(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return bo(this,n)}}function bo(e,t){return!t||"object"!==mo(t)&&"function"!=typeof t?yo(e):t}function yo(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ao(e){return(Ao=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Eo=re(function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&vo(e,t)}(i,e);var t,n,r,a=go(i);function i(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(e=a.call(this)).state={user:[],address:[],nom:"",urlImg:"",prenom:"",age:"",email:"",sexe:"",telephone:"",est_valide:!1,selectedFile:"",errors:{}},e.fileSelected=e.fileSelected.bind(yo(e)),e.fileUpload=e.fileUpload.bind(yo(e)),e}return t=i,(n=[{key:"componentDidMount",value:function(){localStorage.getItem("usertoken")?this.setState({user:JSON.parse(localStorage.getItem("usertoken")).utilisateur,address:JSON.parse(localStorage.getItem("usertoken")).adresse,nom:JSON.parse(localStorage.getItem("usertoken")).utilisateur.nom,prenom:JSON.parse(localStorage.getItem("usertoken")).utilisateur.prenom,age:JSON.parse(localStorage.getItem("usertoken")).utilisateur.age,sexe:JSON.parse(localStorage.getItem("usertoken")).utilisateur.sexe,telephone:JSON.parse(localStorage.getItem("usertoken")).utilisateur.telephone,est_valide:JSON.parse(localStorage.getItem("usertoken")).utilisateur.est_valide,email:JSON.parse(localStorage.getItem("usertoken")).utilisateur.email,urlImg:"https://pets-friendly.herokuapp.com/images/images_profiles/"+JSON.parse(localStorage.getItem("usertoken")).utilisateur.url_photo}):this.props.history.push("/")}},{key:"fileSelected",value:function(e){this.setState({selectedFile:e.target.files[0]}),console.log(e.target.files[0])}},{key:"fileUpload",value:function(e){var t=this,n=this.state.selectedFile;e.preventDefault();var r=new po.a;r.append("file",n),console.log("filename",n),console.log("data",r);var o=JSON.parse(localStorage.getItem("usertoken")).utilisateur.id;c.a.post("https://pets-friendly.herokuapp.com/photos/profile/ajout/utilisateur/".concat(o),r,{headers:{"Content-Type":"multipart/form-data"}}).then((function(e){return console.log(e.data),t.setState({imgUrl:e.data}),console.log(localStorage.getItem("usertoken")),e.data})).catch((function(e){console.log(e)}))}},{key:"render",value:function(){return console.log("image",this.state.urlImg),o.a.createElement("div",{className:"container"},o.a.createElement("img",{src:this.state.urlImg,className:"image-profil",alt:"Cinque Terre"}),o.a.createElement("div",{className:"jumbotron mt-5 bg-light"},o.a.createElement("div",{className:"col-sm-8 mx-auto"},this.state.est_valide?o.a.createElement("h3",{className:"text-center text-success "}," Votre profil est activé, vous pouvez accéder aux services"):o.a.createElement("h3",{className:"text-center text-danger "},"Votre profil n'est pas encore valide , vous n'avez pas l'acces a nos services"),o.a.createElement("h1",{className:"text-center"},"PROFIL ")),o.a.createElement(gr,{to:"/update"}," ",o.a.createElement(xn,{id:"bouton1"},"Update Profil")),o.a.createElement(gr,{to:"/contrats"}," ",o.a.createElement(xn,{id:"bouton1"},"Afficher les contrat")),o.a.createElement("table",{className:"table col-md-6 mx-auto"},o.a.createElement("tbody",null,o.a.createElement("tr",null,o.a.createElement("td",null,"Prénom"),o.a.createElement("td",null,this.state.user.nom)),o.a.createElement("tr",null,o.a.createElement("td",null,"Nom"),o.a.createElement("td",null,this.state.user.prenom)),o.a.createElement("tr",null,o.a.createElement("td",null,"Email"),o.a.createElement("td",null,this.state.user.email)),o.a.createElement("tr",null,o.a.createElement("td",null,"Âge"),o.a.createElement("td",null,this.state.user.age)),o.a.createElement("tr",null,o.a.createElement("td",null,"Sexe"),o.a.createElement("td",null,this.state.user.sexe)),o.a.createElement("tr",null,o.a.createElement("td",null,"Téléphone"),o.a.createElement("td",null,this.state.user.telephone)),o.a.createElement("tr",null,o.a.createElement("td",null,"Numéro de la rue"),o.a.createElement("td",null,this.state.address.numero_rue)),o.a.createElement("tr",null,o.a.createElement("td",null,"Nom de la rue"),o.a.createElement("td",null,this.state.address.nom_rue)),o.a.createElement("tr",null,o.a.createElement("td",null,"Code Postal"),o.a.createElement("td",null,this.state.address.code_postal)),o.a.createElement("tr",null,o.a.createElement("td",null,"Ville"),o.a.createElement("td",null,this.state.address.ville)),o.a.createElement("tr",null,o.a.createElement("td",null,"Province"),o.a.createElement("td",null,this.state.address.province)),o.a.createElement("tr",null,o.a.createElement("td",null,"Pays"),o.a.createElement("td",null,this.state.address.pays)),o.a.createElement("tr",null,o.a.createElement("td",null,"Numéro appartement"),o.a.createElement("td",null,this.state.address.numero_appt))))),o.a.createElement("div",{id:"divPlubicite2"},o.a.createElement("h1",{className:"w-50 p-3 mx-auto h1"},"Des services sur mesure pour un animal d'exeption "),o.a.createElement("div",{className:"row divAnnonce"},o.a.createElement("div",{className:"col-lg-4 mx-auto border border-danger rounded serviceProposes"},o.a.createElement(Yr,{text:"Faites garder votre animal à votre domicile ou à celui du Pet Sitter",className:"fas fa-check"}),o.a.createElement(Yr,{text:"Partez à votre rendez-vous sans vous soucier de la promenade de votre chien",className:"fas fa-check"}),o.a.createElement(Yr,{text:"Besoin de flexibilité? Choisissez les horaires et périodes qui vous conviennent",className:"fas fa-check"})),o.a.createElement("div",{className:"col-lg-4 mx-auto border border-danger rounded serviceProposes"},o.a.createElement(Yr,{text:"Tous les nouveaux gardiens passent une vérification des antécédents de base",className:"fas fa-check"}),o.a.createElement(Yr,{text:"Tous les gardiens fournissent un profil détaillé et des informations personnelles ",className:"fas fa-check"}),o.a.createElement(Yr,{text:"Tous les Pet Sitter sont agréés par notre équipe de spécialistes chez Pets Friendly",className:"fas fa-check"})))),o.a.createElement("div",{className:"infolettreDiv mt-3"},o.a.createElement("h1",{className:"h1"},"Laissez nous vous prévenir de nos nouveautés"),o.a.createElement("h6",{className:"h6"},"Restez informé"),o.a.createElement("form",null,o.a.createElement(kn,{classCss:"form-group",classInput:"form-control",textLabel:"Entrez votre email",type:"email",id:"infolettre",name:"infolettre",onChange:this.handleChange}),o.a.createElement(kn,{classInput:"btn btn-outline-danger",type:"submit",id:"infolettreButton",name:"Envoyer ",value:"Envoyer"}))))}}])&&ho(t.prototype,n),r&&ho(t,r),i}(r.Component));n(37);function wo(e){return(wo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function xo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Co(e,t){return(Co=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ko(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=To(e);if(t){var o=To(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return So(this,n)}}function So(e,t){return!t||"object"!==wo(t)&&"function"!=typeof t?Oo(e):t}function Oo(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function To(e){return(To=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Io=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Co(e,t)}(i,e);var t,n,r,a=ko(i);function i(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(e=a.call(this)).state={id:"",id_role:"",id_adress:"",nom:"",mot_de_passe:"",urlImg:"",prenom:"",age:"",email:"",sexe:"",telephone:"",numero_rue:"",nom_rue:"",code_postal:"",ville:"",province:"",pays:"",numero_appt:"",user:[],address:[],est_valide:!1,selectedFile:"",errors:{}},e.onTodoChange=e.onTodoChange.bind(Oo(e)),e.submitModifier=e.submitModifier.bind(Oo(e)),e.fileSelected=e.fileSelected.bind(Oo(e)),e.fileUpload=e.fileUpload.bind(Oo(e)),e}return t=i,(n=[{key:"componentDidMount",value:function(){localStorage.getItem("usertoken")?this.setState({user:JSON.parse(localStorage.getItem("usertoken")).utilisateur,address:JSON.parse(localStorage.getItem("usertoken")).adresse,id:JSON.parse(localStorage.getItem("usertoken")).utilisateur.id,mot_de_passe:JSON.parse(localStorage.getItem("usertoken")).utilisateur.mot_de_passe,id_adress:JSON.parse(localStorage.getItem("usertoken")).adresse.id,numero_rue:JSON.parse(localStorage.getItem("usertoken")).adresse.numero_rue,nom_rue:JSON.parse(localStorage.getItem("usertoken")).adresse.nom_rue,id_role:JSON.parse(localStorage.getItem("usertoken")).utilisateur.id_role,code_postal:JSON.parse(localStorage.getItem("usertoken")).adresse.code_postal,ville:JSON.parse(localStorage.getItem("usertoken")).adresse.ville,province:JSON.parse(localStorage.getItem("usertoken")).adresse.province,pays:JSON.parse(localStorage.getItem("usertoken")).adresse.pays,numero_appt:JSON.parse(localStorage.getItem("usertoken")).adresse.numero_appt,nom:JSON.parse(localStorage.getItem("usertoken")).utilisateur.nom,prenom:JSON.parse(localStorage.getItem("usertoken")).utilisateur.prenom,age:JSON.parse(localStorage.getItem("usertoken")).utilisateur.age,sexe:JSON.parse(localStorage.getItem("usertoken")).utilisateur.sexe,telephone:JSON.parse(localStorage.getItem("usertoken")).utilisateur.telephone,est_valide:JSON.parse(localStorage.getItem("usertoken")).utilisateur.est_valide,email:JSON.parse(localStorage.getItem("usertoken")).utilisateur.email,urlImg:"http://pets-friendly.herokuapp.com/images/images_profiles/"+JSON.parse(localStorage.getItem("usertoken")).utilisateur.url_photo}):this.props.history.push("/")}},{key:"fileSelected",value:function(e){this.setState({selectedFile:e.target.files[0]}),console.log(e.target.files[0])}},{key:"submitModifier",value:function(){c.a.put("https://pets-friendly.herokuapp.com/utilisateurs/configuration",{utilisateur:{id:this.state.id,id_role:this.state.id_role,nom:this.state.nom,prenom:this.state.prenom,age:this.state.age,email:this.state.email,mot_de_passe:this.state.mot_de_passe,sexe:this.state.sexe,telephone:this.state.telephone},adresse:{id:this.state.id_adress,numero_rue:this.state.numero_rue,nom_rue:this.state.nom_rue,code_postal:this.state.code_postal,ville:this.state.ville,province:this.state.province,pays:this.state.pays,numero_appt:this.state.numero_appt}}).then((function(e){console.log("Bien Modifier",e)}))}},{key:"onTodoChange",value:function(e){var t,n,r;this.setState((t={},n=e.target.name,r=e.target.value,n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t))}},{key:"fileUpload",value:function(e){var t=this,n=this.state.selectedFile;e.preventDefault();var r=new FormData;r.append("file",n),console.log("filename",n),console.log("data",r);var o=JSON.parse(localStorage.getItem("usertoken")).utilisateur.id;c.a.post("https://pets-friendly.herokuapp.com/photos/profile/ajout/utilisateur/".concat(o),r,{headers:{"Content-Type":"multipart/form-data"}}).then((function(e){return console.log(e.data),t.setState({imgUrl:e.data}),console.log(localStorage.getItem("usertoken")),e.data})).catch((function(e){console.log(e)}))}},{key:"render",value:function(){return console.log("state",this.state.urlImg),o.a.createElement("div",{className:"container"},o.a.createElement("form",{method:"post",encType:"multipart/form-data"},o.a.createElement("div",{className:"form-group"},o.a.createElement("label",{htmlFor:"exampleFormControlFile1",id:"label1"},"Mettre une photo de profil"),o.a.createElement("input",{name:"image",type:"file",className:"form-control-file btnPayment",style:{backgroundColor:"pink"},id:"exampleFormControlFile1",onChange:this.fileSelected}),o.a.createElement(xn,{className:"btnPayment",onClick:this.fileUpload},"Upload"))),o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-75"},o.a.createElement("div",{className:"containerPayment"},o.a.createElement("div",{className:"col-50"},o.a.createElement("div",{className:"md-form mb-5"},o.a.createElement("label",{"data-error":"wrong","data-success":"right",htmlFor:"defaultForm-email"},"Ton Nom"),o.a.createElement("input",{type:"text",className:"form-control validate",name:"nom",value:this.state.nom,onChange:this.onTodoChange})),o.a.createElement("div",{className:"md-form mb-5"},o.a.createElement("label",{"data-error":"wrong","data-success":"right",htmlFor:"defaultForm-email"},"Ton Prenom"),o.a.createElement("input",{type:"text",className:"form-control validate",name:"prenom",value:this.state.prenom,onChange:this.onTodoChange})),o.a.createElement("div",{className:"md-form mb-5"},o.a.createElement("label",{"data-error":"wrong","data-success":"right",htmlFor:"defaultForm-email"},"Ton sexe"),o.a.createElement("input",{type:"text",className:"form-control validate",name:"sexe",value:this.state.sexe,onChange:this.onTodoChange})),o.a.createElement("div",{className:"md-form mb-5"},o.a.createElement("label",{"data-error":"wrong","data-success":"right",htmlFor:"defaultForm-email"},"Ton numero de telephone "),o.a.createElement("input",{type:"tel",className:"form-control validate",name:"telephone",value:this.state.telephone,onChange:this.onTodoChange})),o.a.createElement("div",{className:"md-form mb-5"},o.a.createElement("label",{"data-error":"wrong","data-success":"right",htmlFor:"defaultForm-email"},"Ton Email"),o.a.createElement("input",{type:"email",className:"form-control validate",name:"email",value:this.state.email,onChange:this.onTodoChange}))),o.a.createElement("div",{className:"col-50"},o.a.createElement("div",{className:"md-form mb-5"},o.a.createElement("label",{"data-error":"wrong","data-success":"right",htmlFor:"defaultForm-email"},"Numero de rue"),o.a.createElement("input",{type:"number",className:"form-control validate",name:"numero_rue",value:this.state.numero_rue,onChange:this.onTodoChange})),o.a.createElement("div",{className:"md-form mb-5"},o.a.createElement("label",{"data-error":"wrong","data-success":"right",htmlFor:"defaultForm-email"},"Nom de rue"),o.a.createElement("input",{type:"text",className:"form-control validate",name:"nom_rue",value:this.state.nom_rue,onChange:this.onTodoChange})),o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-50"},o.a.createElement("label",{"data-error":"wrong","data-success":"right",htmlFor:"defaultForm-email"},"Code Postal"),o.a.createElement("input",{type:"text",className:"form-control validate",name:"code_postal",value:this.state.code_postal,onChange:this.onTodoChange})),o.a.createElement("div",{className:"col-50"},o.a.createElement("label",{"data-error":"wrong","data-success":"right",htmlFor:"defaultForm-email"},"Ville"),o.a.createElement("input",{type:"text",className:"form-control validate",name:"ville",value:this.state.ville,onChange:this.onTodoChange}))),o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-50"},o.a.createElement("label",{"data-error":"wrong","data-success":"right",htmlFor:"defaultForm-email"},"Province"),o.a.createElement("input",{type:"text",className:"form-control validate",name:"province",value:this.state.province,onChange:this.onTodoChange})),o.a.createElement("div",{className:"col-50"},o.a.createElement("label",{"data-error":"wrong","data-success":"right",htmlFor:"defaultForm-email"},"Pays"),o.a.createElement("input",{type:"text",className:"form-control validate",name:"pays",value:this.state.pays,onChange:this.onTodoChange}))),o.a.createElement("div",{className:"md-form mb-5"},o.a.createElement("label",{"data-error":"wrong","data-success":"right",htmlFor:"defaultForm-email"},"Numero appartement"),o.a.createElement("input",{type:"number",className:"form-control validate",name:"numero_appt",value:this.state.numero_appt,onChange:this.onTodoChange})),o.a.createElement(xn,{className:"btnPayment ",onClick:this.fileUpload},"Annuler "),o.a.createElement(xn,{className:"btnPayment ",onClick:this.submitModifier},"Update "))))))}}])&&xo(t.prototype,n),r&&xo(t,r),i}(r.Component);function No(e){return(No="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Po(e,t){return(Po=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function jo(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=Bo(e);if(t){var o=Bo(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Ro(this,n)}}function Ro(e,t){return!t||"object"!==No(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Bo(e){return(Bo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Do=re(function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Po(e,t)}(i,e);var t,n,r,a=jo(i);function i(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(e=a.call(this)).state={id:"",contrats:[]},e}return t=i,(n=[{key:"componentDidMount",value:function(){var e=this;this.setState({id:JSON.parse(localStorage.getItem("usertoken")).utilisateur.id}),localStorage.getItem("usertoken")?c.a.get("https://pets-friendly.herokuapp.com/contrats/recuperation/utilisateur/".concat(JSON.parse(localStorage.getItem("usertoken")).utilisateur.id),{}).then((function(t){console.log("response",t),e.setState({contrats:t.data})})):this.props.history.push("/")}},{key:"accepterContrat",value:function(e){c.a.post("https://pets-friendly.herokuapp.com/contrats/acceptation",{utilisateur:{id_proprietaire:e.id_proprietaire,id_petsitter:e.id_petsitter},contrat:{id_contrat:e.id_contrat,date_debut:e.date_debut,date_fin:e.date_fin}}).then((function(e){console.log("Contrat Acceptee",e)}))}},{key:"render",value:function(){var e=this;return console.log("response",this.state.id),console.log("contrat",this.state.contrats),o.a.createElement("div",{className:""},o.a.createElement("h1",null,"Bonjour"),o.a.createElement("table",{className:"table"},o.a.createElement("thead",null,o.a.createElement("tr",null,o.a.createElement("th",null,"id_contrat"),o.a.createElement("th",null,"Proprietaire"),o.a.createElement("th",null,"Petsitter"),o.a.createElement("th",null,"date debut"),o.a.createElement("th",null,"date fin"),o.a.createElement("th",null,"est_accepte"),o.a.createElement("th",null,"est_termine"))),o.a.createElement("tbody",null,this.state.contrats.map((function(t,n){return o.a.createElement("tr",{key:n},o.a.createElement("td",null,t.id_contrat),o.a.createElement("td",null,t.nom_proprietaire+","+t.prenom_proprietaire),o.a.createElement("td",null,t.nom_petsitter+","+t.prenom_petsitter),o.a.createElement("td",null," ",t.date_debut),o.a.createElement("td",null,t.date_fin),o.a.createElement("td",null,t.est_accepte?o.a.createElement(xn,null,"Annuler"):o.a.createElement(xn,{onClick:function(n){return e.accepterContrat(t)}},"Accepter")),o.a.createElement("td",null,t.est_termine?"Terminee ":"Pas Encore Terminee"))})))))}}])&&_o(t.prototype,n),r&&_o(t,r),i}(r.Component)),Fo=function(e){var t=e.classNameLi,n=e.classIcone,r=e.servicesSitter,a=e.servicesTotal;return r.map((function(e,r){return o.a.createElement("li",{className:t,key:r},a[e-1].description_service,o.a.createElement("p",null,a[e-1].prix_service,o.a.createElement("i",{className:n})))}))},Mo=function(e){var t=e.nomProprietaire,n=e.dateCommentaire,r=e.commentaire,a=e.divClass;return o.a.createElement("div",{className:a},o.a.createElement("h3",null,t),o.a.createElement("h4",null,n),o.a.createElement("p",null,r))},zo=function(e){var t=e.text,n=e.className,r=e.classNameText;e.servicesSitter,e.servicesTotal;return o.a.createElement("p",{className:r},t,o.a.createElement("i",{className:n}))};n(84);function Lo(e){return(Lo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Uo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ho(e,t){return(Ho=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Vo(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=qo(e);if(t){var o=qo(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Wo(this,n)}}function Wo(e,t){return!t||"object"!==Lo(t)&&"function"!=typeof t?$o(e):t}function $o(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function qo(e){return(qo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Yo=re(function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ho(e,t)}(i,e);var t,n,r,a=Vo(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).state={recherche:!1,resultat:[],prixSitter:[],service:JSON.parse(localStorage.getItem("serviceRecherche")),servicesTotal:JSON.parse(localStorage.getItem("servicestotal")),dateDebut:JSON.parse(localStorage.getItem("dateDebut")),dateFin:JSON.parse(localStorage.getItem("dateFin")),sitter:JSON.parse(localStorage.getItem("sitter")),proprietaire:JSON.parse(localStorage.getItem("usertoken"))},t.handleClick=t.handleClick.bind($o(t)),t.setProprietaire=t.setProprietaire.bind($o(t)),t.unsetProprietaire=t.unsetProprietaire($o(t)),t}return t=i,(n=[{key:"setProprietaire",value:function(){this.setState({proprietaire:JSON.parse(localStorage.getItem("usertoken"))})}},{key:"unsetProprietaire",value:function(){this.setState({proprietaire:!1})}},{key:"handleClick",value:function(){this.props.history.push("/payment")}},{key:"handleSubmit",value:function(){}},{key:"render",value:function(){var e,t,n,r=JSON.parse(localStorage.getItem("servicestotal"));function a(e){var t=0;return e.map((function(n,o){return console.log(e),console.log(r[n-1].prix_service),t+=r[n-1].prix_service})),t}function i(e){return 5*a(e)/100}function l(e){return Math.ceil(9.975*a(e)/100)}return console.log("sitter",this.state),console.log("service",JSON.parse(localStorage.getItem("serviceRecherche"))),o.a.createElement("div",{className:"demandewrapper"},o.a.createElement("div",null,o.a.createElement("h1",{className:"h1 w-25 p-3 mx-auto"},"Demande Service ")),o.a.createElement("div",{className:"row m-5 bg-white border border-danger rounded shadow"},o.a.createElement("img",{src:"../src/img/caroussel/image1.jpeg",alt:"Carlos",className:"img-fluid rounded-circle w-25 p-3"}),o.a.createElement("div",{className:"m-5 infoSitterWrapper"},o.a.createElement("h2",{className:"h2"},this.state.sitter.nom),o.a.createElement("h3",{className:"h6"},this.state.sitter.secteur_action),o.a.createElement("h6",{className:"h6"},(t=this.state.sitter.rating,n="",t>0&&t<50?n="Debutant":t>=50&&t<100?n="Normal":t>=100&&t<200?n="Intermediare":t>=200&&t<400?n="Proffesionel":t>=400&&(n="Expert"),n)),o.a.createElement("input",{type:"button",value:"Contacter",className:"btn btn-success m-2 boutonPetsitter"}),o.a.createElement("input",{type:"button",value:"Aimer",className:"btn btn-danger m-2 boutonPetsitter"}))),o.a.createElement("div",{className:"clearfix "},o.a.createElement("div",{className:"m-5 w-25 p3 float-left border border-danger rounded shadow serviceBox"},o.a.createElement("h3",{className:"h3 w-25 p-3 mx-auto"},o.a.createElement("strong",null,"Services")," "),o.a.createElement("ul",{className:"list-group"},o.a.createElement(Fo,{classNameLi:"list-group-item serviceBox",servicesTotal:this.state.servicesTotal,servicesSitter:this.state.service,classIcone:"fas fa-dollar-sign"}))),o.a.createElement("div",{className:" m-5 w-50 p-3 float-right border border-danger rounded shadow commentBox"},o.a.createElement("h1",{className:"w-25 p-3 mx-auto"},o.a.createElement("strong",null,"Commentaires")),[{nameProprietaire:"Carlos",dateCommentaire:"21/05/2020",commentaire:"Bonne sitter, excellent service je la recommande"},{nameProprietaire:"Maria",dateCommentaire:"21/08/2019",commentaire:"Bonne sitter, excellent service je la recommande. Elle a vraiment bien pris soin de notre chat "},{nameProprietaire:"Ricardo",dateCommentaire:"21/04/2018",commentaire:"Bonne sitter, mais mauvaise attitude"},{nameProprietaire:"Stefanie",dateCommentaire:"21/05/2020",commentaire:"Bonne sitter, excellent service , tres  bonne attitude , je ferai encore affaire avec elle"}].map((function(e,t){return o.a.createElement(Mo,{nomProprietaire:e.nameProprietaire,dateCommentaire:e.dateCommentaire,commentaire:e.commentaire,key:t,divClass:" m-2 feedbackComment"})})))),o.a.createElement("div",{className:"border border-danger rounded shadow prixEtServiceWrapper"},o.a.createElement("h2",{className:" h2 w-25 p-3 mx-auto"},"Prix des services"),o.a.createElement("div",null,o.a.createElement("div",{className:"float-left m-2 w-25 p-3"},["Total hors taxes :","TPS : ","TVQ : ","TOTAL avec taxes :"].map((function(e,t){return o.a.createElement(zo,{text:e,key:t})}))),o.a.createElement("div",{className:"float-right m-2 w-25 p-3"},o.a.createElement("p",null,o.a.createElement("strong",null,a(this.state.service)),o.a.createElement("i",{className:"fas fa-dollar-sign"}),o.a.createElement("i",{className:"fab fa-canadian-maple-leaf"})),o.a.createElement("p",null,i(this.state.service),o.a.createElement("i",{className:"fas fa-dollar-sign"}),o.a.createElement("i",{className:"fab fa-canadian-maple-leaf"})),o.a.createElement("p",null,l(this.state.service),o.a.createElement("i",{className:"fas fa-dollar-sign"}),o.a.createElement("i",{className:"fab fa-canadian-maple-leaf"})),o.a.createElement("p",null,o.a.createElement("strong",null,(e=this.state.service,Math.ceil(a(e)+l(e)+i(e)))),o.a.createElement("i",{className:"fas fa-dollar-sign"}),o.a.createElement("i",{className:"fab fa-canadian-maple-leaf"})),o.a.createElement(gr,{to:"/payment"}," ",o.a.createElement("input",{type:"button",value:"Envoyer Demande",className:"btn btn-success payButton"}))))))}}])&&Uo(t.prototype,n),r&&Uo(t,r),i}(r.Component));function Jo(e){return(Jo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ko(e,t){return(Ko=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Xo(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ea(e);if(t){var o=ea(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Go(this,n)}}function Go(e,t){return!t||"object"!==Jo(t)&&"function"!=typeof t?Zo(e):t}function Zo(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ea(e){return(ea=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ta=re(function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ko(e,t)}(i,e);var t,n,r,a=Xo(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).state={service:JSON.parse(localStorage.getItem("serviceRecherche")),servicesTotal:JSON.parse(localStorage.getItem("servicestotal")),dateDebut:JSON.parse(localStorage.getItem("dateDebut")),dateFin:JSON.parse(localStorage.getItem("dateFin")),sitter:JSON.parse(localStorage.getItem("sitter")),proprietaire:JSON.parse(localStorage.getItem("usertoken")),paimentFait:"",show:!1,message:""},t.handleClick=t.handleClick.bind(Zo(t)),t.showModal=t.showModal.bind(Zo(t)),t.onHandleonClose=t.onHandleonClose.bind(Zo(t)),t}return t=i,(n=[{key:"showModal",value:function(){this.setState({show:!0})}},{key:"onHandleonClose",value:function(){this.setState({show:!1})}},{key:"handleClick",value:function(){var e=this;return c.a.post("https://pets-friendly.herokuapp.com/contrats/creation",{utilisateur:{id_proprietaire:this.state.proprietaire.utilisateur.id,id_petsitter:this.state.sitter.id},contrat:{date_debut:this.state.dateDebut,date_fin:this.state.dateFin},service:this.state.service,promotion:{id_promotion:1}}).then((function(t){0===Object.keys(t.data).length?(e.state.message="Demande pas envoyee ",e.showModal(),e.props.history.push("/")):(e.state.message="Demande pas envoye veuillez communiquer avec nous",e.showModal())})).catch((function(e){alert("Demande pas envoye veuillez communiquer avec nous"),console.log("erreur recherche:",e)}))}},{key:"render",value:function(){return console.log(this.state),o.a.createElement("div",{className:"row"},o.a.createElement(no,{onHandleonClose:this.onHandleonClose,show:this.state.show},this.state.message),o.a.createElement("div",{className:"col-75"},o.a.createElement("div",{className:"containerPayment"},o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-50"},o.a.createElement("h3",null,"Adresse de facturation"),o.a.createElement("label",{htmlFor:"fname"},o.a.createElement("i",{className:"fa fa-user"})," Nom et prénom"),o.a.createElement("input",{type:"text",id:"fname",name:"firstname",placeholder:"John M. Doe"}),o.a.createElement("label",{htmlFor:"email"},o.a.createElement("i",{className:"fa fa-envelope"})," Email"),o.a.createElement("input",{type:"text",id:"email",name:"email",placeholder:"john@example.com"}),o.a.createElement("label",{htmlFor:"adr"},o.a.createElement("i",{className:"fa fa-address-card-o"})," Addresse"),o.a.createElement("input",{type:"text",id:"adr",name:"address",placeholder:"542 W. 15th Street"}),o.a.createElement("label",{htmlFor:"city"},o.a.createElement("i",{className:"fa fa-institution"})," Ville"),o.a.createElement("input",{type:"text",id:"city",name:"city",placeholder:"New York"}),o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-50"},o.a.createElement("label",{htmlFor:"state"},"Province"),o.a.createElement("input",{type:"text",id:"state",name:"state",placeholder:"NY"})),o.a.createElement("div",{className:"col-50"},o.a.createElement("label",{htmlFor:"zip"},"Code-Postal"),o.a.createElement("input",{type:"text",id:"zip",name:"zip",placeholder:"10001"})))),o.a.createElement("div",{className:"col-50"},o.a.createElement("h3",null,"Paiement"),o.a.createElement("label",{htmlFor:"fname"},"Cartes acceptées"),o.a.createElement("div",{className:"icon-container"},o.a.createElement("i",{className:"fab fa-cc-visa",style:{color:"navy"}}),o.a.createElement("i",{className:"fab fa-cc-amex",style:{color:"blue"}}),o.a.createElement("i",{className:"fab fa-cc-mastercard",style:{color:"red"}}),o.a.createElement("i",{className:"fab fa-cc-discover",style:{color:"orange"}})),o.a.createElement("label",{htmlFor:"cname"},"Nom dans la carte"),o.a.createElement("input",{type:"text",id:"cname",name:"cardname",placeholder:"Nom dans la carte"}),o.a.createElement("label",{htmlFor:"ccnum"},"Numéro de carte "),o.a.createElement("input",{type:"text",id:"ccnum",name:"cardnumber",placeholder:"1111-2222-3333-4444"}),o.a.createElement("label",{htmlFor:"expmonth"}," Date d'expiration (mois)"),o.a.createElement("input",{type:"text",id:"expmonth",name:"expmonth",placeholder:"September"}),o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col-50"},o.a.createElement("label",{htmlFor:"expyear"},"Date d'expiration (année)"),o.a.createElement("input",{type:"text",id:"expyear",name:"expyear",placeholder:"2018"})),o.a.createElement("div",{className:"col-50"},o.a.createElement("label",{htmlFor:"cvv"},"CVV"),o.a.createElement("input",{type:"text",id:"cvv",name:"cvv",placeholder:"352"}))))),o.a.createElement("input",{type:"button",value:"Envoyer demande",className:"btnPayment",onClick:this.handleClick}))))}}])&&Qo(t.prototype,n),r&&Qo(t,r),i}(r.Component));function na(e){return(na="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ra(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function oa(e,t){return(oa=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function aa(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=ca(e);if(t){var o=ca(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return ia(this,n)}}function ia(e,t){return!t||"object"!==na(t)&&"function"!=typeof t?la(e):t}function la(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ca(e){return(ca=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ua=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&oa(e,t)}(i,e);var t,n,r,a=aa(i);function i(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(t=a.call(this,e)).setupBeforeUnloadListener=t.setupBeforeUnloadListener.bind(la(t)),t}return t=i,(n=[{key:"setupBeforeUnloadListener",value:function(){window.addEventListener("beforeunload",(function(e){e.preventDefault(),localStorage.removeItem("usertoken")}))}},{key:"componentDidMount",value:function(){}},{key:"render",value:function(){return o.a.createElement(fr,null,o.a.createElement(Ir,null),o.a.createElement(ne,null,o.a.createElement(K,{exact:!0,path:"/search",component:so}),o.a.createElement(K,{exact:!0,path:"/admin",component:fe}),o.a.createElement(K,{exact:!0,path:"/",component:$r}),o.a.createElement(K,{exact:!0,path:"/profil",component:Eo}),o.a.createElement(K,{exact:!0,path:"/update",component:Io}),o.a.createElement(K,{exact:!0,path:"/demande",component:Yo}),o.a.createElement(K,{exact:!0,path:"/payment",component:ta}),o.a.createElement(K,{exact:!0,path:"/contrats",component:Do}),o.a.createElement(K,{exact:!0,path:"/demande",component:Yo}),o.a.createElement(K,{exact:!0,path:"/payment",component:ta})),o.a.createElement(Te,null))}}])&&ra(t.prototype,n),r&&ra(t,r),i}(r.Component);a.render(r.createElement(ua,null),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVzdGFydC9ob29rcy9lc20vdXNlQ29tbWl0dGVkUmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVzdGFydC9ob29rcy9lc20vdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2NhblVzZURPTS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL3F1ZXJ5U2VsZWN0b3JBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9saXN0ZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9yZW1vdmVFdmVudExpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVzdGFydC9ob29rcy9lc20vdXNlTW91bnRlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2FkZEV2ZW50TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib290c3RyYXAtc3dpdGNoLWJ1dHRvbi1yZWFjdC9saWIvYm9vdHN0cmFwLXN3aXRjaC1idXR0b24tcmVhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9jb250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY3NzL3BheW1lbnQuY3NzP2ZjMzAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVzdGFydC9ob29rcy9lc20vdXNlQ2FsbGJhY2tSZWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L2hvb2tzL2VzbS91c2VQcmV2aW91cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvZXNtL3VzZVdhaXRGb3JET01SZWYuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9pbWFnZV9zaXRlL2ltYWdlcy9kby1wZXQtc2l0dGVycy1uZWVkLXBldC1zaXR0ZXItaW5zdXJhbmNlLXRoZS1wZXQtc2l0dGVyLWJsb2cuanBnIiwid2VicGFjazovLy8uL3NyYy9pbWcvaW1hZ2Vfc2l0ZS9pbWFnZXMvRG9nc19DYXRzX1JhYmJpdHNfNTA0NzU4LmpwZyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZm9ybS1kYXRhL2xpYi9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmNvbnRyb2xsYWJsZS9lc20vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3VuY29udHJvbGxhYmxlL2VzbS9ob29rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9lbmhhbmNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvb3Rlci5jc3M/ODFkNyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9vdGVyLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvbmF2YmFyLmNzcz85MjMzIiwid2VicGFjazovLy8uL3NyYy9uYXZiYXIuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Nzcy9tb2RhbC5jc3M/ZjM4MSIsIndlYnBhY2s6Ly8vLi9zcmMvY3NzL21vZGFsLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY3NzL3JlY2hlcmNoZS5jc3M/NGZmMSIsIndlYnBhY2s6Ly8vLi9zcmMvY3NzL3JlY2hlcmNoZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Nzcy9wcm9maWwuY3NzPzYwOTkiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Nzcy9wcm9maWwuY3NzIiwid2VicGFjazovLy8uL3NyYy9jc3MvcGF5bWVudC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Nzcy9kZW1hbmRlLmNzcz84Mjc4Iiwid2VicGFjazovLy8uL3NyYy9jc3MvZGVtYW5kZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC90ZC1jb21wb3NhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbnktaW52YXJpYW50L2Rpc3QvdGlueS1pbnZhcmlhbnQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXNtL3JlYWN0LXJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVyL2FkbWluLWNvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2ljb24tc29jaWFsLW1lZGlhLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXIvbGlzdC1uZXR3b3JrLWNvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2Zvb3Rlci1saW5rcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L0Zvb3Rlci9Gb290ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9pbWctY29tcG9zYW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVzdGFydC9ob29rcy9lc20vdXNlVXBkYXRlRWZmZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVzdGFydC9ob29rcy9lc20vdXNlV2lsbFVubW91bnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0ByZXN0YXJ0L2hvb2tzL2VzbS91c2VVcGRhdGVkUmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVzdGFydC9ob29rcy9lc20vdXNlVGltZW91dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2dldENvbXB1dGVkU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9vd25lcldpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2h5cGhlbmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2h5cGhlbmF0ZVN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vaXNUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9jc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS90cmFuc2l0aW9uRW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9jYW1lbGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL2NyZWF0ZVdpdGhCc1ByZWZpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9DYXJvdXNlbENhcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vQ2Fyb3VzZWxJdGVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0VsZW1lbnRDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9jcmVhdGVDaGFpbmVkRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vU2FmZUFuY2hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS90cmlnZ2VyQnJvd3NlclJlZmxvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9DYXJvdXNlbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVyL2Nhcm91c2VsLWNvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L3NwYW4tY29tcG9zYW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vc2Nyb2xsYmFyU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2FjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9hZGRDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2hhc0NsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9lc20vcmVtb3ZlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2VzbS9pc1dpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXNtL2lzRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL2VzbS9pc092ZXJmbG93aW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy9lc20vbWFuYWdlQXJpYUhpZGRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvZXNtL01vZGFsTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvZXNtL01vZGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0ZhZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vQm9vdHN0cmFwTW9kYWxNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL01vZGFsQm9keS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Nb2RhbENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vTW9kYWxEaWFsb2cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vTW9kYWxGb290ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vQ2xvc2VCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vTW9kYWxIZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vZGl2V2l0aENsYXNzTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Nb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Nb2RhbFRpdGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9uY3Rpb25zL1VzZXJGdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9pbnB1dC1jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lci9pbnNjcmlwdGlvbi1jb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lci9hZHJlc3MtaW5zY3JpcHRpb24tY29udGFpbmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXIvcXN0LXZhbGlkYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lci9jb25uZWN0aW9uLWNvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVyL21vZGFsLWNueC1jb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9uYXZiYXItbGlua3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9uYXZiYXItdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVyL25hdmJhci1jb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9kaXYtYm91dG9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2ltYWdlLXRpdHJlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXIvaW1hZ2UtdGl0cmUtY29udGFpbmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXIvZm9ybS1jb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9zZWxlY3QtY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvbGlzdC1pdGVtLWNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L3ZpZ25ldHRlLWNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L21vZGFsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXIvcmVjaGVyY2hlcGV0c2l0dGVyLWNvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVyL3Byb2ZpbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVyL3VwZGF0ZS1wcm9maWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lci9saXN0LWNvbnRyYXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9zZXJ2aWNlcy1kZW1hbmRlLWNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2ZlZWRiYWNrLWNvbW1lbnRhaXJlLWNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L2ZhY3R1cmUtZGVtYW5kZS1jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lci9wcm9maWwtZGVtYW5kZS1wZXR0c2l0dGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250YWluZXIvcGF5bWVudC1mb3JtLWNvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVyL3BhZ2UtcHJpbmNpcGFsLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJ0aGlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJrZXlzIiwiaW5kZXhPZiIsImhhc093biIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJnIiwiYXJnVHlwZSIsInB1c2giLCJBcnJheSIsImlzQXJyYXkiLCJpbm5lciIsImpvaW4iLCJkZWZhdWx0IiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIl9fcHJvdG9fXyIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJ0b1N0cmluZyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsImNvbmNhdCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImlkIiwiX2kiLCJyZWYiLCJjdXJyZW50IiwidXNlRXZlbnRDYWxsYmFjayIsImZuIiwidmFsIiwiaXNVbmRlZmluZWQiLCJpc09iamVjdCIsImlzRnVuY3Rpb24iLCJmb3JFYWNoIiwib2JqIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsIndpbmRvdyIsImRvY3VtZW50IiwibWVyZ2UiLCJyZXN1bHQiLCJhc3NpZ25WYWx1ZSIsImRlZXBNZXJnZSIsImV4dGVuZCIsImEiLCJiIiwidGhpc0FyZyIsInRyaW0iLCJzdHIiLCJyZXBsYWNlIiwib3duZXJEb2N1bWVudCIsIm5vZGUiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsIm1lbW8iLCJpc09sZElFIiwiQm9vbGVhbiIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJjc3MiLCJtZWRpYSIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsInNwbGljZSIsInRvQXJyYXkiLCJGdW5jdGlvbiIsInNsaWNlIiwicXNhIiwiZWxlbWVudCIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsImV2ZW50TmFtZSIsImhhbmRsZXIiLCJjYXB0dXJlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9fb25jZSIsInVzZU1vdW50ZWQiLCJtb3VudGVkIiwiaXNNb3VudGVkIiwib3B0aW9uc1N1cHBvcnRlZCIsIm9uY2VTdXBwb3J0ZWQiLCJhZGRFdmVudExpc3RlbmVyIiwib25jZSIsIndyYXBwZWRIYW5kbGVyIiwib25jZUhhbmRsZXIiLCJldmVudCIsImNvbmRpdGlvbiIsImZvcm1hdCIsImYiLCJ1bmRlZmluZWQiLCJhcmdzIiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsIml0ZXJhdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiUmVmZXJlbmNlRXJyb3IiLCJ1IiwiVHlwZUVycm9yIiwic3RhdGUiLCJjaGVja2VkIiwib2ZmIiwib24iLCJkaXNhYmxlZCIsInNldFN0YXRlIiwicHJvcHMiLCJvbkNoYW5nZSIsIndpZHRoIiwiaGVpZ2h0IiwibGluZUhlaWdodCIsImNsYXNzTmFtZSIsIm9uc3R5bGUiLCJvZmZzdHlsZSIsInNpemUiLCJvbkNsaWNrIiwidG9nZ2xlIiwib25sYWJlbCIsIm9mZmxhYmVsIiwiQ29tcG9uZW50IiwiaG1yIiwidHJhbnNmb3JtIiwiaW5zZXJ0SW50byIsImxvY2FscyIsInJlZnMiLCJwYXJ0cyIsInkiLCJoIiwiaW5zZXJ0QXQiLCJuZXh0U2libGluZyIsImJlZm9yZSIsImciLCJhdHRycyIsInR5cGUiLCJuYyIsInciLCJTIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsInJlbCIsIkUiLCJocmVmIiwiVCIsIkRFQlVHIiwidiIsIk8iLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdCIsInBhdGhuYW1lIiwidGVzdCIsImNvbW1vbmpzR2xvYmFsIiwiZ2xvYmFsVGhpcyIsImdsb2JhbCIsImNyZWF0ZUV2ZW50RW1pdHRlciIsImhhbmRsZXJzIiwic2V0IiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsImNyZWF0ZUNvbnRleHQiLCJkZWZhdWx0VmFsdWUiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiUHJvdmlkZXIiLCJfQ29tcG9uZW50IiwiX3RoaXMiLCJlbWl0dGVyIiwiX3Byb3RvIiwiZ2V0Q2hpbGRDb250ZXh0IiwiX3JlZiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJvbGRWYWx1ZSIsIngiLCJyZW5kZXIiLCJjaGlsZHJlbiIsImNoaWxkQ29udGV4dFR5cGVzIiwiaXNSZXF1aXJlZCIsIkNvbnN1bWVyIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJnZXRWYWx1ZSIsIm9uVXBkYXRlIiwib2JzZXJ2ZWRCaXRzIiwiX3Byb3RvMiIsImNvbXBvbmVudERpZE1vdW50IiwiY29udGV4dCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY29udGV4dFR5cGVzIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwiUmVnRXhwIiwicmVzIiwidG9rZW5zIiwicGF0aCIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJleGVjIiwiZXNjYXBlZCIsIm9mZnNldCIsIm5leHQiLCJwcmVmaXgiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJwYXR0ZXJuIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJzdWJzdHIiLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJjaGFyQ29kZUF0IiwidG9VcHBlckNhc2UiLCJtYXRjaGVzIiwiZmxhZ3MiLCJvcHRzIiwiZW5jb2RlIiwicHJldHR5IiwidG9rZW4iLCJzZWdtZW50IiwiaiIsImF0dGFjaEtleXMiLCJyZSIsInNlbnNpdGl2ZSIsInN0cmljdCIsImVuZCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJtYXRjaCIsInJlZ2V4cFRvUmVnZXhwIiwiYXJyYXlUb1JlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsInVybCIsImhhc2giLCJuZWVkUXVvdGVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwic3BsaXQiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvIiwidXRpbHMiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInRvSVNPU3RyaW5nIiwiaGFzaG1hcmtJbmRleCIsIl9fQ0FOQ0VMX18iLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJwcm9jZXNzIiwidHJhbnNmb3JtUmVxdWVzdCIsInRyYW5zZm9ybVJlc3BvbnNlIiwidGltZW91dCIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJjb21tb24iLCJtZXRob2QiLCJzZXR0bGUiLCJidWlsZFVSTCIsImJ1aWxkRnVsbFBhdGgiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJ0b0xvd2VyQ2FzZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwidGhlbiIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImVuaGFuY2VFcnJvciIsIm1lc3NhZ2UiLCJjb2RlIiwiY29uZmlnMSIsImNvbmZpZzIiLCJ2YWx1ZUZyb21Db25maWcyS2V5cyIsIm1lcmdlRGVlcFByb3BlcnRpZXNLZXlzIiwiZGVmYXVsdFRvQ29uZmlnMktleXMiLCJwcm9wIiwiYXhpb3NLZXlzIiwib3RoZXJLZXlzIiwiQ2FuY2VsIiwiYXBpIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjb250ZXh0VHlwZSIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwiTWVtbyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwidXNlQ2FsbGJhY2tSZWYiLCJ1c2VQcmV2aW91cyIsInJlc29sdmVDb250YWluZXJSZWYiLCJib2R5Iiwibm9kZVR5cGUiLCJ1c2VXYWl0Rm9yRE9NUmVmIiwib25SZXNvbHZlZCIsIl91c2VTdGF0ZSIsInJlc29sdmVkUmVmIiwic2V0UmVmIiwiZWFybHlSZWYiLCJuZXh0UmVmIiwic2VsZiIsImRlZmF1bHRLZXkiLCJjaGFyQXQiLCJfdG9Qcm9wZXJ0eUtleSIsImlucHV0IiwiaGludCIsInByaW0iLCJ0b1ByaW1pdGl2ZSIsIk51bWJlciIsIl90b1ByaW1pdGl2ZSIsInVzZVVuY29udHJvbGxlZCIsInJlZHVjZSIsImZpZWxkTmFtZSIsIl9leHRlbmRzMiIsInByb3BzVmFsdWUiLCJyZXN0IiwiaGFuZGxlck5hbWUiLCJfdXNlVW5jb250cm9sbGVkUHJvcCIsInByb3BWYWx1ZSIsIndhc1Byb3BSZWYiLCJzdGF0ZVZhbHVlIiwiaXNQcm9wIiwid2FzUHJvcCIsIl9sZW4iLCJfa2V5IiwidXNlVW5jb250cm9sbGVkUHJvcCIsImNvbXBvbmVudFdpbGxNb3VudCIsInByZXZTdGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJuZXh0U3RhdGUiLCJwcmV2UHJvcHMiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWciLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdCIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyIsImZvciIsInEiLCJ6IiwiQSIsIkIiLCJDIiwiRCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJGIiwiRyIsIkgiLCJpc1JlYWN0Q29tcG9uZW50IiwiZm9yY2VVcGRhdGUiLCJJIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJKIiwiSyIsIkwiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCJrIiwiJCR0eXBlb2YiLCJfb3duZXIiLCJQIiwiUSIsIlIiLCJwb3AiLCJrZXlQcmVmaXgiLCJmdW5jIiwiViIsIlUiLCJkb25lIiwiZXNjYXBlIiwiVyIsImFhIiwiWCIsIk4iLCJZIiwiWiIsImJhIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwic3VzcGVuc2UiLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiQ2hpbGRyZW4iLCJvbmx5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsImNsb25lRWxlbWVudCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIl9jb250ZXh0IiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidmVyc2lvbiIsIm9uRXJyb3IiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJsYSIsIm1hIiwibmEiLCJvYSIsImN1cnJlbnRUYXJnZXQiLCJrYSIsInBhIiwicWEiLCJyYSIsInNhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJ0YSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidWEiLCJyZWdpc3RyYXRpb25OYW1lIiwidmEiLCJ3YSIsImRlcGVuZGVuY2llcyIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsInN0YXRlTm9kZSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJVYSIsIlZhIiwieGxpbmtIcmVmIiwiV2EiLCJYYSIsIlNhIiwiaXNOYU4iLCJUYSIsIlJhIiwic2V0QXR0cmlidXRlTlMiLCJZYSIsIlphIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIm5iIiwicGIiLCJxYiIsInRhZyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmV0dXJuIiwicmIiLCJzYiIsIm5vZGVOYW1lIiwieGIiLCJfdmFsdWVUcmFja2VyIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJ0YiIsInliIiwiemIiLCJkZWZhdWx0Q2hlY2tlZCIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkFiIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIkJiIiwiQ2IiLCJEYiIsIkViIiwiYWN0aXZlRWxlbWVudCIsIkdiIiwiRmIiLCJIYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiSWIiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkpiIiwiS2IiLCJMYiIsInRleHRDb250ZW50IiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiUmIiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJTYiIsIlRiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVWIiLCJWYiIsIldiIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsIldlYWtNYXAiLCJNYXAiLCJjYyIsImRjIiwiYWx0ZXJuYXRlIiwiZWZmZWN0VGFnIiwiZWMiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImZjIiwiaGMiLCJjaGlsZCIsInNpYmxpbmciLCJnYyIsImljIiwiamMiLCJrYyIsImxjIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwibWMiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJvYyIsInBjIiwicWMiLCJ0b3BMZXZlbFR5cGUiLCJuYXRpdmVFdmVudCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJyYyIsImV2ZW50U3lzdGVtRmxhZ3MiLCJzYyIsImNvbnRhaW5lckluZm8iLCJ0YyIsInVjIiwiaGFzIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIktjIiwiYmxvY2tlZE9uIiwiY29udGFpbmVyIiwiTGMiLCJkZWxldGUiLCJwb2ludGVySWQiLCJNYyIsIk5jIiwiUGMiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJRYyIsIlJjIiwiU2MiLCJUYyIsInNoaWZ0IiwiVWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJWYyIsIldjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJldmVudFByaW9yaXR5IiwiYmQiLCJjZCIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsIk9jIiwiamQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwia2QiLCJsZCIsIm1kIiwic2V0UHJvcGVydHkiLCJzdWJzdHJpbmciLCJuZCIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIm9kIiwicGQiLCJpcyIsInFkIiwicmQiLCJzZCIsInRkIiwidWQiLCJ2ZCIsInhkIiwiY29udGVudFdpbmRvdyIsInlkIiwiY29udGVudEVkaXRhYmxlIiwiRGQiLCJFZCIsIkZkIiwiYXV0b0ZvY3VzIiwiR2QiLCJfX2h0bWwiLCJIZCIsInNldFRpbWVvdXQiLCJJZCIsImNsZWFyVGltZW91dCIsIkpkIiwiS2QiLCJwcmV2aW91c1NpYmxpbmciLCJMZCIsIk1hdGgiLCJyYW5kb20iLCJNZCIsIk5kIiwiT2QiLCJQZCIsIlFkIiwiUmQiLCJTZCIsIlRkIiwiZGlzcGF0Y2hDb25maWciLCJVZCIsIl90YXJnZXRJbnN0IiwiVmQiLCJXZCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImNlIiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiZWUiLCJldmVudFBvb2wiLCJmZSIsImRlc3RydWN0b3IiLCJkZSIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJnZSIsImhlIiwiaWUiLCJqZSIsImtlIiwiZG9jdW1lbnRNb2RlIiwibGUiLCJtZSIsIm5lIiwib2UiLCJiZWZvcmVJbnB1dCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwicGUiLCJxZSIsImtleUNvZGUiLCJkZXRhaWwiLCJzZSIsInZlIiwibG9jYWxlIiwid2hpY2giLCJ0ZSIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsInVlIiwid2UiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsInhlIiwieWUiLCJjaGFuZ2UiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiZGV0YWNoRXZlbnQiLCJIZSIsIkllIiwiYXR0YWNoRXZlbnQiLCJKZSIsIktlIiwiTGUiLCJNZSIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJOZSIsInZpZXciLCJPZSIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZSIsImdldE1vZGlmaWVyU3RhdGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIldlIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlhlIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJZZSIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsInNlbGVjdCIsImVmIiwiZmYiLCJnZiIsImhmIiwiamYiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0Iiwia2YiLCJvblNlbGVjdCIsImxmIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm1mIiwiY2xpcGJvYXJkRGF0YSIsIm5mIiwib2YiLCJjaGFyQ29kZSIsInBmIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInFmIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInJmIiwic2YiLCJkYXRhVHJhbnNmZXIiLCJ0ZiIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ1ZiIsInZmIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ3ZiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRGYiLCJFZiIsIkZmIiwiR2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIkhmIiwiSWYiLCJKZiIsIktmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJMZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIk1mIiwidW5zdGFibGVfbm93IiwiTmYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIk9mIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJQZiIsIlFmIiwiUmYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIlNmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiVGYiLCJVZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwicWciLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsInJnIiwic2ciLCJyZXNwb25kZXJzIiwidGciLCJ1ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiYmFzZVF1ZXVlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ2ZyIsIndnIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJ4ZyIsInlnIiwiemciLCJjYSIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkpnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIkdnIiwiSGciLCJJZyIsIktnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiTGciLCJNZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiTmciLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiT2ciLCJQZyIsIl9zdHJpbmdSZWYiLCJRZyIsIlJnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIlNnIiwiVGciLCJlbGVtZW50VHlwZSIsIlVnIiwiaW1wbGVtZW50YXRpb24iLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJlaCIsImZoIiwiZ2giLCJoaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImloIiwicmVzcG9uZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInF1ZXVlIiwidWgiLCJ2aCIsIndoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJkZXN0cm95IiwiZGVwcyIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsInBlbmRpbmdQcm9wcyIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJnaSIsImhpIiwicGVuZGluZ0NvbnRleHQiLCJuaSIsInBpIiwicWkiLCJpaSIsInJldHJ5VGltZSIsImppIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsImtpIiwibGkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbEV4cGlyYXRpb24iLCJ0YWlsTW9kZSIsIm1pIiwicmkiLCJzaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsInN0YWNrIiwiQmkiLCJXZWFrU2V0IiwiU2V0IiwiQ2kiLCJGaSIsIkVpIiwiR2kiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIkhpIiwiSWkiLCJKaSIsImZvY3VzIiwiS2kiLCJMaSIsIkRpIiwiTWkiLCJOaSIsIk9pIiwiUGkiLCJRaSIsImluc3RhbmNlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlJpIiwiU2kiLCJUaSIsImRpc3BsYXkiLCJVaSIsIlZpIiwiYWRkIiwiV2kiLCJYaSIsIllpIiwiWmkiLCIkaSIsImNvbXBvbmVudERpZENhdGNoIiwiYWoiLCJjb21wb25lbnRTdGFjayIsIlJqIiwiYmoiLCJjZWlsIiwiY2oiLCJkaiIsImtqIiwibGoiLCJtaiIsIm5qIiwib2oiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ3aiIsInRpbWVvdXRNcyIsInhqIiwieWoiLCJ6aiIsImxhc3RFeHBpcmVkVGltZSIsIkFqIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQaW5nZWRUaW1lIiwibmV4dEtub3duUGVuZGluZ0xldmVsIiwiY2FsbGJhY2tFeHBpcmF0aW9uVGltZSIsImNhbGxiYWNrUHJpb3JpdHkiLCJjYWxsYmFja05vZGUiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIklqIiwidGltZW91dEhhbmRsZSIsIkpqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIktqIiwiTWoiLCJOaiIsInBpbmdDYWNoZSIsIk9qIiwidWIiLCJQaiIsIlhjIiwiUWoiLCJTaiIsImZpcnN0U3VzcGVuZGVkVGltZSIsInJhbmdlQ291bnQiLCJ3YiIsImFjdGl2ZUVsZW1lbnREZXRhY2hlZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJUaiIsIndkIiwibWluIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJ2YiIsIlVqIiwiVmoiLCJXaiIsImhpZGRlbiIsIm9iIiwiWGoiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJaaiIsInBlbmRpbmdDaGlsZHJlbiIsImFrIiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsIkpjIiwiX2ludGVybmFsUm9vdCIsImdrIiwiaWsiLCJoYXNBdHRyaWJ1dGUiLCJoayIsImprIiwia2siLCJ1bm1vdW50IiwiZm9ybSIsIkxqIiwibGsiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiWWoiLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJheGlvcyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsInByb21pc2VzIiwic3ByZWFkIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsImdldFVyaSIsInVzZSIsImVqZWN0IiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwicmVhc29uIiwiZm5zIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJub29wIiwibmV4dFRpY2siLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIm5vcm1hbGl6ZWROYW1lIiwiaXNBeGlvc0Vycm9yIiwidG9KU09OIiwiZGVzY3JpcHRpb24iLCJjb2x1bW5OdW1iZXIiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwicGFyc2VkIiwibGluZSIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJob3N0bmFtZSIsInBvcnQiLCJyZXF1ZXN0VVJMIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwiYXJyIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiUG9ydGFsIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJ3YXJuaW5nIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18iLCJUZENvbXBvc2FudCIsIm5vbSIsInByZW5vbSIsImV0YXRDb21wdGUiLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwiaGFzVHJhaWxpbmdTbGFzaCIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsInVwIiwicGFydCIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImNyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsImxpc3RlbmVyIiwibm90aWZ5TGlzdGVuZXJzIiwiY2FuVXNlRE9NIiwiZ2V0Q29uZmlybWF0aW9uIiwiY29uZmlybSIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwidHJhbnNpdGlvbk1hbmFnZXIiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwib2siLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwicmV2ZXJ0UG9wIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImlzQmxvY2tlZCIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJzdHJpcEhhc2giLCJnZXRIYXNoUGF0aCIsInJlcGxhY2VIYXNoUGF0aCIsImNyZWF0ZUhhc2hIaXN0b3J5IiwiX3Byb3BzJGhhc2hUeXBlIiwiaGFzaFR5cGUiLCJfSGFzaFBhdGhDb2RlcnMkaGFzaFQiLCJpZ25vcmVQYXRoIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJhbGxQYXRocyIsImxhc3RJbmRleE9mIiwiYmFzZVRhZyIsImdldEF0dHJpYnV0ZSIsInB1c2hIYXNoUGF0aCIsIm5leHRQYXRocyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJtYXgiLCJjcmVhdGVNZW1vcnlIaXN0b3J5IiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwiZW50cmllcyIsImVudHJ5IiwibmV4dEluZGV4IiwibmV4dEVudHJpZXMiLCJjYW5HbyIsImhpc3RvcnlDb250ZXh0IiwiY3JlYXRlTmFtZWRDb250ZXh0JDEiLCJfUmVhY3QkQ29tcG9uZW50IiwiUm91dGVyIiwiX2lzTW91bnRlZCIsIl9wZW5kaW5nTG9jYXRpb24iLCJzdGF0aWNDb250ZXh0IiwiY29tcHV0ZVJvb3RNYXRjaCIsImlzRXhhY3QiLCJjYWNoZSQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIm1hdGNoZWQiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsInBhdGhDYWNoZSIsInJlZ2V4cCIsImNvbXBpbGVQYXRoJDEiLCJ2YWx1ZXMiLCJSb3V0ZSIsImNvbnRleHQkMSIsImNvbXB1dGVkTWF0Y2giLCJfdGhpcyRwcm9wcyIsImNyZWF0ZVVSTCIsInN0YXRpY0hhbmRsZXIiLCJtZXRob2ROYW1lIiwiU3dpdGNoIiwid2l0aFJvdXRlciIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsIldyYXBwZWRDb21wb25lbnQiLCJpc1VzZXJBZG1pbiIsInBldFNpdHRlcnMiLCJoYW5kbGVDaGFuZ2VTaW5nbGVQb3N0IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInV0aWxpc2F0ZXVyIiwiaWRfcm9sZSIsImxvZyIsInB1dCIsInBldFNpdHRlciIsImVzdF92YWxpZGUiLCJTb2NpYWxNZWRpYUljb24iLCJkaXZDbGFzcyIsImNsYXNzYSIsImNsYXNzSSIsIkxpc3ROZXR3b3JrcyIsImljb25lcyIsImZldGNoIiwianNvbiIsImljb24iLCJGb290ZXJMaW5rcyIsImNsYXNzSCIsImNsYXNzVWwiLCJ0aXRyZSIsIkZvb3RlciIsInNyYyIsImFsdCIsIkltZ0NvbXBvc2FudCIsInNyY0lNRyIsImNsYXNzQm8iLCJpc0ZpcnN0IiwidXNlV2lsbFVubW91bnQiLCJ2YWx1ZVJlZiIsIm9uVW5tb3VudCIsIk1BWF9ERUxBWV9NUyIsInBvdyIsInVzZVRpbWVvdXQiLCJoYW5kbGVSZWYiLCJjbGVhciIsImRlbGF5TXMiLCJzZXRDaGFpbmVkVGltZW91dCIsInRpbWVvdXRBdE1zIiwicHN1ZWRvRWxlbWVudCIsImRvYyIsIm93bmVyV2luZG93IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInJVcHBlciIsIm1zUGF0dGVybiIsImh5cGhlbmF0ZVN0eWxlTmFtZSIsImh5cGhlbmF0ZSIsInN1cHBvcnRlZFRyYW5zZm9ybXMiLCJ0cmFuc2Zvcm1zIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImlzVHJhbnNmb3JtIiwicmVtb3ZlUHJvcGVydHkiLCJlbXVsYXRlVHJhbnNpdGlvbkVuZCIsImR1cmF0aW9uIiwicGFkZGluZyIsImNhbGxlZCIsImhhbmRsZSIsImV2dCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInRyaWdnZXJUcmFuc2l0aW9uRW5kIiwibXVsdCIsInBhcnNlRmxvYXQiLCJyZW1vdmVFbXVsYXRlIiwiVHJhbnNpdGlvbiIsImluaXRpYWxTdGF0dXMiLCJhcHBlYXIiLCJpc01vdW50aW5nIiwiZW50ZXIiLCJhcHBlYXJTdGF0dXMiLCJpbiIsInVubW91bnRPbkV4aXQiLCJtb3VudE9uRW50ZXIiLCJuZXh0Q2FsbGJhY2siLCJ1cGRhdGVTdGF0dXMiLCJuZXh0U3RhdHVzIiwiY2FuY2VsTmV4dENhbGxiYWNrIiwiZ2V0VGltZW91dHMiLCJleGl0IiwibW91bnRpbmciLCJwZXJmb3JtRW50ZXIiLCJwZXJmb3JtRXhpdCIsImFwcGVhcmluZyIsIl9yZWYyIiwibm9kZVJlZiIsIm1heWJlTm9kZSIsIm1heWJlQXBwZWFyaW5nIiwidGltZW91dHMiLCJlbnRlclRpbWVvdXQiLCJzYWZlU2V0U3RhdGUiLCJvbkVudGVyZWQiLCJvbkVudGVyIiwib25FbnRlcmluZyIsIm9uVHJhbnNpdGlvbkVuZCIsIl90aGlzMyIsIm9uRXhpdCIsIm9uRXhpdGluZyIsIm9uRXhpdGVkIiwic2V0TmV4dENhbGxiYWNrIiwiX3RoaXM0IiwiYWN0aXZlIiwiZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciIsImFkZEVuZExpc3RlbmVyIiwiX3JlZjMiLCJtYXliZU5leHRDYWxsYmFjayIsImNoaWxkUHJvcHMiLCJUcmFuc2l0aW9uR3JvdXBDb250ZXh0IiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiRVhJVElORyIsInJIeXBoZW4iLCJUaGVtZUNvbnRleHQiLCJ1c2VCb290c3RyYXBQcmVmaXgiLCJkZWZhdWx0UHJlZml4IiwicHJlZml4ZXMiLCJfIiwiY2hyIiwiY3JlYXRlV2l0aEJzUHJlZml4IiwiX3RlbXAiLCJfcmVmJGRpc3BsYXlOYW1lIiwiQnNDb21wb25lbnQiLCJic1ByZWZpeCIsIl9yZWYyJGFzIiwiYXMiLCJUYWciLCJyZXNvbHZlZFByZWZpeCIsImZ1bmNzIiwiYWNjIiwiX2xlbjIiLCJfa2V5MiIsImlzVHJpdmlhbEhyZWYiLCJTYWZlQW5jaG9yIiwiX3JlZiRhcyIsIm9uS2V5RG93biIsImhhbmRsZUNsaWNrIiwicm9sZSIsInRhYkluZGV4IiwidHJpZ2dlckJyb3dzZXJSZWZsb3ciLCJvZmZzZXRIZWlnaHQiLCJzbGlkZSIsImZhZGUiLCJjb250cm9scyIsImluZGljYXRvcnMiLCJhY3RpdmVJbmRleCIsIm9uU2xpZGUiLCJvblNsaWQiLCJpbnRlcnZhbCIsImtleWJvYXJkIiwicGF1c2UiLCJ3cmFwIiwidG91Y2giLCJwcmV2SWNvbiIsInByZXZMYWJlbCIsIm5leHRJY29uIiwibmV4dExhYmVsIiwiZGVmYXVsdEFjdGl2ZUluZGV4IiwiQ2Fyb3VzZWwiLCJ1bmNvbnRyb2xsZWRQcm9wcyIsIl91c2VVbmNvbnRyb2xsZWQiLCJfdXNlVW5jb250cm9sbGVkJGFzIiwib25Nb3VzZU92ZXIiLCJvbk1vdXNlT3V0Iiwib25Ub3VjaFN0YXJ0Iiwib25Ub3VjaE1vdmUiLCJvblRvdWNoRW5kIiwibmV4dERpcmVjdGlvblJlZiIsImRpcmVjdGlvbiIsInNldERpcmVjdGlvbiIsIl91c2VTdGF0ZTIiLCJpc1NsaWRpbmciLCJzZXRJc1NsaWRpbmciLCJfdXNlU3RhdGUzIiwicmVuZGVyZWRBY3RpdmVJbmRleCIsInNldFJlbmRlcmVkQWN0aXZlSW5kZXgiLCJudW1DaGlsZHJlbiIsInByZXYiLCJuZXh0QWN0aXZlSW5kZXgiLCJlbGVtZW50UmVmIiwibmV4dFdoZW5WaXNpYmxlIiwiZWxlbWVudFN0eWxlIiwidmlzaWJpbGl0eSIsImlzVmlzaWJsZSIsInNsaWRlRGlyZWN0aW9uIiwib3JkZXJDbGFzc05hbWUiLCJkaXJlY3Rpb25hbENsYXNzTmFtZSIsImhhbmRsZUVudGVyIiwiaGFuZGxlRW50ZXJlZCIsImhhbmRsZUtleURvd24iLCJfdXNlU3RhdGU0IiwicGF1c2VkT25Ib3ZlciIsInNldFBhdXNlZE9uSG92ZXIiLCJoYW5kbGVNb3VzZU92ZXIiLCJoYW5kbGVNb3VzZU91dCIsInRvdWNoU3RhcnRYUmVmIiwidG91Y2hEZWx0YVhSZWYiLCJfdXNlU3RhdGU1IiwicGF1c2VkT25Ub3VjaCIsInNldFBhdXNlZE9uVG91Y2giLCJ0b3VjaFVucGF1c2VUaW1lb3V0IiwiaGFuZGxlVG91Y2hTdGFydCIsImhhbmRsZVRvdWNoTW92ZSIsImhhbmRsZVRvdWNoRW5kIiwidG91Y2hEZWx0YVgiLCJhYnMiLCJzaG91bGRQbGF5IiwiaW50ZXJ2YWxIYW5kbGVSZWYiLCJzZXRJbnRlcnZhbCIsInZpc2liaWxpdHlTdGF0ZSIsImNsZWFySW50ZXJ2YWwiLCJpbmRpY2F0b3JPbkNsaWNrcyIsIl9jaGlsZCIsIkNhcHRpb24iLCJDYXJvdXNlbENhcHRpb24iLCJDYXJvdXNlbEl0ZW0iLCJDYXJvdXNlbENvbnRhaW5lciIsImltYWdlcyIsImltYWdlIiwiaW1nU3JjIiwiU3BhbkNvbXBvbmVudCIsInNjcm9sbGJhclNpemUiLCJyZWNhbGMiLCJzY3JvbGxEaXYiLCJwb3NpdGlvbiIsIm92ZXJmbG93Iiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsImFkZENsYXNzIiwiY2xhc3NMaXN0IiwiYmFzZVZhbCIsImhhc0NsYXNzIiwicmVwbGFjZUNsYXNzTmFtZSIsIm9yaWdDbGFzcyIsImNsYXNzVG9SZW1vdmUiLCJyZW1vdmVDbGFzcyIsImlzV2luZG93IiwiRE9DVU1FTlRfTk9ERSIsImlzT3ZlcmZsb3dpbmciLCJ3aW4iLCJpbm5lcldpZHRoIiwiYm9keUlzT3ZlcmZsb3dpbmciLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJCTEFDS0xJU1QiLCJzaWJsaW5ncyIsImV4Y2x1ZGUiLCJhcmlhSGlkZGVuIiwiaGlkZSIsIm1hbmFnZXIiLCJNb2RhbE1hbmFnZXIiLCJfcmVmJGhpZGVTaWJsaW5nTm9kZXMiLCJoaWRlU2libGluZ05vZGVzIiwiX3JlZiRoYW5kbGVDb250YWluZXJPIiwiaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3ciLCJtb2RhbHMiLCJjb250YWluZXJzIiwiaXNDb250YWluZXJPdmVyZmxvd2luZyIsIm1vZGFsIiwiY29udGFpbmVySW5kZXhGcm9tTW9kYWwiLCJvdmVyZmxvd2luZyIsImlkeCIsInNvbWUiLCJzZXRDb250YWluZXJTdHlsZSIsImNvbnRhaW5lclN0YXRlIiwicGFkZGluZ1JpZ2h0IiwicGFyc2VJbnQiLCJyZW1vdmVDb250YWluZXJTdHlsZSIsIm1vZGFsSWR4IiwiY29udGFpbmVySWR4IiwiZGlhbG9nIiwiYmFja2Ryb3AiLCJoaWRlU2libGluZ3MiLCJzaG93U2libGluZ3MiLCJfZGF0YSRtb2RhbHMiLCJpc1RvcE1vZGFsIiwidXNlTW9kYWxNYW5hZ2VyIiwicHJvdmlkZWQiLCJtb2RhbE1hbmFnZXIiLCJzZXREaWFsb2dSZWYiLCJzZXRCYWNrZHJvcFJlZiIsIl9yZWYkc2hvdyIsInNob3ciLCJfcmVmJHJvbGUiLCJfcmVmJGJhY2tkcm9wIiwiX3JlZiRrZXlib2FyZCIsIm9uQmFja2Ryb3BDbGljayIsIm9uRXNjYXBlS2V5RG93biIsImJhY2tkcm9wVHJhbnNpdGlvbiIsIl9yZWYkYXV0b0ZvY3VzIiwiX3JlZiRlbmZvcmNlRm9jdXMiLCJlbmZvcmNlRm9jdXMiLCJfcmVmJHJlc3RvcmVGb2N1cyIsInJlc3RvcmVGb2N1cyIsInJlc3RvcmVGb2N1c09wdGlvbnMiLCJyZW5kZXJEaWFsb2ciLCJfcmVmJHJlbmRlckJhY2tkcm9wIiwicmVuZGVyQmFja2Ryb3AiLCJwcm92aWRlZE1hbmFnZXIiLCJjb250YWluZXJSZWYiLCJjb250YWluZXJDbGFzc05hbWUiLCJvblNob3ciLCJfcmVmJG9uSGlkZSIsIm9uSGlkZSIsInByZXZTaG93IiwiZXhpdGVkIiwic2V0RXhpdGVkIiwibGFzdEZvY3VzUmVmIiwiaGFuZGxlU2hvdyIsInJlbW92ZUtleWRvd25MaXN0ZW5lclJlZiIsImhhbmRsZURvY3VtZW50S2V5RG93biIsInJlbW92ZUZvY3VzTGlzdGVuZXJSZWYiLCJoYW5kbGVFbmZvcmNlRm9jdXMiLCJjdXJyZW50QWN0aXZlRWxlbWVudCIsImhhbmRsZUhpZGUiLCJfbGFzdEZvY3VzUmVmJGN1cnJlbnQiLCJoYW5kbGVCYWNrZHJvcENsaWNrIiwiZGlhbG9nUHJvcHMiLCJiYWNrZHJvcEVsZW1lbnQiLCJCYWNrZHJvcFRyYW5zaXRpb24iLCJwcmV2ZW50U2Nyb2xsIiwiX2ZhZGVTdHlsZXMiLCJNYW5hZ2VyIiwiU2VsZWN0b3IiLCJfTW9kYWxNYW5hZ2VyIiwiQm9vdHN0cmFwTW9kYWxNYW5hZ2VyIiwiYWRqdXN0QW5kU3RvcmUiLCJhZGp1c3QiLCJfY3NzIiwiYWN0dWFsIiwiZGF0YXNldCIsInJlc3RvcmUiLCJfY3NzMiIsImVsIiwiZmFkZVN0eWxlcyIsIkZhZGUiLCJpbm5lclByb3BzIiwiTW9kYWxEaWFsb2ciLCJjZW50ZXJlZCIsInNjcm9sbGFibGUiLCJkaWFsb2dDbGFzcyIsImxhYmVsIiwiQ2xvc2VCdXR0b24iLCJNb2RhbEhlYWRlciIsImNsb3NlTGFiZWwiLCJjbG9zZUJ1dHRvbiIsImRpYWxvZ0FzIiwiRGlhbG9nVHJhbnNpdGlvbiIsImRpYWxvZ0NsYXNzTmFtZSIsIkRpYWxvZyIsImFyaWFMYWJlbGxlZGJ5IiwiYmFja2Ryb3BDbGFzc05hbWUiLCJwcm9wc01hbmFnZXIiLCJtb2RhbFN0eWxlIiwic2V0U3R5bGUiLCJhbmltYXRlU3RhdGljTW9kYWwiLCJzZXRBbmltYXRlU3RhdGljTW9kYWwiLCJ3YWl0aW5nRm9yTW91c2VVcFJlZiIsImlnbm9yZUJhY2tkcm9wQ2xpY2tSZWYiLCJyZW1vdmVTdGF0aWNNb2RhbEFuaW1hdGlvblJlZiIsIl91c2VDYWxsYmFja1JlZiIsInNldE1vZGFsUmVmIiwibW9kYWxDb250ZXh0IiwiZ2V0TW9kYWxNYW5hZ2VyIiwidXBkYXRlRGlhbG9nU3R5bGUiLCJjb250YWluZXJJc092ZXJmbG93aW5nIiwibW9kYWxJc092ZXJmbG93aW5nIiwicGFkZGluZ0xlZnQiLCJoYW5kbGVXaW5kb3dSZXNpemUiLCJoYW5kbGVEaWFsb2dNb3VzZURvd24iLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlU3RhdGljTW9kYWxBbmltYXRpb24iLCJoYW5kbGVTdGF0aWNCYWNrZHJvcENsaWNrIiwiYmFja2Ryb3BQcm9wcyIsImJhc2VNb2RhbFN0eWxlIiwiX2xlbjMiLCJfa2V5MyIsIl9sZW40IiwiX2tleTQiLCJvbk1vdXNlVXAiLCJvbk1vdXNlRG93biIsIkJvZHkiLCJNb2RhbEJvZHkiLCJIZWFkZXIiLCJUaXRsZSIsIk1vZGFsVGl0bGUiLCJNb2RhbEZvb3RlciIsIlRSQU5TSVRJT05fRFVSQVRJT04iLCJCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OIiwiQnV0dG9uIiwidmFyaWFudCIsImxvZ2luIiwidXNlciIsInBvc3QiLCJ1c2VyTmFtZSIsIm1vdF9kZV9wYXNzZSIsInNldEl0ZW0iLCJJbnB1dENvbXBvbmVudCIsImNsYXNzQ3NzIiwib25DaGFuZ2VSYWRpbyIsImNsYXNzSWNvbiIsImNsYXNzSW5wdXQiLCJ0ZXh0TGFiZWwiLCJsYWJlbENsYXNzIiwicGxhY2VIb2xkZXIiLCJwbGFjZWhvbGRlciIsInJlcXVpcmVkIiwiZGF0YS1lcnJvciIsImRhdGEtc3VjY2VzcyIsImh0bWxGb3IiLCJJbnNjcmlwdGlvbkNvbnRhaW5lciIsImlucHV0cyIsIm5leHRTdGVwIiwib25jaGFuZ2UiLCJjbGljayIsIkluc2NyaXB0aW9uQWRyZXNzQ29udGFpbmVyIiwicHJldlN0ZXAiLCJiYWNrIiwiUXVlc3Rpb25WYWxpZGF0aW9uIiwiQ29ubmVjdGlvblBvcFVwIiwiaXNQYXNzd29yZFNob3duIiwiaGFuZGxldG9nZ2xlUGFzc3dvcmRWaXNpYmxpdHkiLCJnZXRFbWFpbCIsImRhdGEtdG9nZ2xlIiwiZ2V0UGFzcyIsIm9uS2V5UHJlc3MiLCJGb25jdGlvbkVudHJlciIsInVzZXJzIiwib25IYW5kbGVDaGFuZ2VOYW1lIiwib25IYW5kbGVDaGFuZ2VQYXNzIiwib25IYW5kbGVDbG9zZSIsIm9uSGFuZGxlQ2hhbmdlQW5kRW50ZXIiLCJvblN1Ym1pdCIsIkJyb3dzZXJSb3V0ZXIiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsImZvcndhcmRSZWZTaGltIiwiTGlua0FuY2hvciIsImZvcndhcmRlZFJlZiIsImlubmVyUmVmIiwibmF2aWdhdGUiLCJfb25DbGljayIsImV4IiwiaXNNb2RpZmllZEV2ZW50IiwiTGluayIsIl9yZWYyJGNvbXBvbmVudCIsImZvcndhcmRSZWZTaGltJDEiLCJmb3J3YXJkUmVmJDEiLCJfcmVmJGFyaWFDdXJyZW50IiwiYXJpYUN1cnJlbnQiLCJfcmVmJGFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiY2xhc3NOYW1lUHJvcCIsImlzQWN0aXZlUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0eWxlUHJvcCIsImVzY2FwZWRQYXRoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwic3RlcCIsInFzMSIsInFzMiIsInFzMyIsInFzNCIsInFzNSIsImFnZSIsInNleGUiLCJ0ZWxlcGhvbmUiLCJudW1lcm9fcnVlIiwibm9tX3J1ZSIsImNvZGVfcG9zdGFsIiwidmlsbGUiLCJwcm92aW5jZSIsInBheXMiLCJudW1lcm9fYXBwdCIsInNob3dJbnNjcmlwdGlvbiIsIm5ld1VzZXIiLCJoYW5kbGVTaG93SW5zYyIsImhhbmRsZUNsb3NlSW5zYyIsImdldFZhbHVlcyIsImdldFZhbHVlc1JhZGlvIiwic2hvd1N0ZXAiLCJhZHJlc3NlIiwicmVnaXN0ZXIiLCJhbGVydCIsInJlbW92ZUl0ZW0iLCJsb2dpblJlZ0xpbmsiLCJ1c2VyTGluayIsInVzZXJ0b2tlbiIsImxvZ091dCIsIm9uU3VibWl0UmVnaXN0ZXIiLCJOYXZiYXJUZXh0IiwidGl0bGUxIiwidGl0bGUyIiwiTmF2YmFyIiwicGFyYW0xIiwicGFyYW0yIiwiRGl2Qm91dG9ucyIsIkltYWdlVGl0cmUiLCJjbGFzc0RpdiIsIkltYWdlVGl0cmVDb21wb3NhbnQiLCJGb3JtQ29udGFpbmVyIiwidGl0cmVzIiwidGl0cmVCdG4iLCJoYW5kbGVDaGFuZ2UiLCJTZWxlY3RDb21wb25lbnQiLCJvcHRpb24iLCJMaXN0SXRlbUNvbXBvbmVudCIsIlZpZ25ldHRlQ29tcG9uZW50IiwidXJsUGhvdG8iLCJyYXRpbmciLCJvbkNsaWNrUHJvZmlsIiwidGV4dEJvdXRvblByb2ZpbCIsImNsYXNzSW5wdXQyIiwib25DbGlja0Vudm95ZXIiLCJzZXJ2aWNlc1NpdHRlciIsInRleHRCb3V0b25FbnZveWVyIiwic2VydmljZXNUb3RhbCIsImhlaWd0aCIsImluZm9zIiwiZGVzY3JpcHRpb25fc2VydmljZSIsInByaXhfc2VydmljZSIsIk1vZGFsIiwib25IYW5kbGVvbkNsb3NlIiwiUmVhY3QiLCJzZXJ2aWNlc1JlY2hlcmNoZXIiLCJkYXRlRGVidXQiLCJkYXRlRmluIiwidHlwZUFuaW1hbCIsImluZm9sZXR0cmUiLCJyZXN1bHRhdFJlY2hlcmNoZSIsImluZm9zUmVjaGVyY2hlIiwicmVjaGVyY2hlIiwicmVzdWx0YXQiLCJoYW5kbGVBZGRPbkNsaWNrIiwiaGFuZGxlU2F2ZU9uQ2xpY2siLCJoYW5kbGVDaGFuZ2VTZWxlY3QiLCJoYW5kbGVTdWJtaXQiLCJoYW5kbGVBZmZpY2hlclNpdHRlck9uQ2xpY2siLCJoYW5kbGVFbnZveWVyRGVtYW5kZU9uQ2xpY2siLCJzaG93TW9kYWwiLCJzZXJ2aWNlIiwiaW5mbyIsInNlcnZpY2VzIiwiZ2FyZGVyQ2hlelBldHNpdHRlciIsImdhcmRlckNoZXpWb3VzIiwicHJvbWVuYWRlIiwidXJsX3Bob3RvIiwibml2ZWF1Iiwibml2ZWF1U2l0dGVyIiwiYWRkcmVzcyIsInVybEltZyIsInNlbGVjdGVkRmlsZSIsImVycm9ycyIsImZpbGVTZWxlY3RlZCIsImZpbGVVcGxvYWQiLCJmaWxlcyIsImFwcGVuZCIsImltZ1VybCIsIlVwZGF0ZVByb2ZpbGUiLCJpZF9hZHJlc3MiLCJvblRvZG9DaGFuZ2UiLCJzdWJtaXRNb2RpZmllciIsImVuY1R5cGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb250cmF0cyIsImNvbnRyYXQiLCJpZF9wcm9wcmlldGFpcmUiLCJpZF9wZXRzaXR0ZXIiLCJpZF9jb250cmF0IiwiZGF0ZV9kZWJ1dCIsImRhdGVfZmluIiwibm9tX3Byb3ByaWV0YWlyZSIsInByZW5vbV9wcm9wcmlldGFpcmUiLCJub21fcGV0c2l0dGVyIiwicHJlbm9tX3BldHNpdHRlciIsImVzdF9hY2NlcHRlIiwiYWNjZXB0ZXJDb250cmF0IiwiZXN0X3Rlcm1pbmUiLCJTZXJ2aWNlRGVtYW5kZUNvbXBvbmVudCIsImNsYXNzTmFtZUxpIiwiY2xhc3NJY29uZSIsIkZlZWRCYWNrQ29tbWVudGFpcmUiLCJub21Qcm9wcmlldGFpcmUiLCJkYXRlQ29tbWVudGFpcmUiLCJjb21tZW50YWlyZSIsIkZhY3R1cmVEZW1hbmRlQ29tcG9uZW50IiwiY2xhc3NOYW1lVGV4dCIsInByaXhTaXR0ZXIiLCJzaXR0ZXIiLCJwcm9wcmlldGFpcmUiLCJzZXRQcm9wcmlldGFpcmUiLCJ1bnNldFByb3ByaWV0YWlyZSIsInByaXgiLCJQcml4QXZhbnRUYXhlcyIsInByaXhBdmFudFRheGVzIiwiaW5mb1ByaXgiLCJUUFMiLCJUVlEiLCJzZWN0ZXVyX2FjdGlvbiIsIm5hbWVQcm9wcmlldGFpcmUiLCJpbmZvRmFjdHVyZSIsInBhaW1lbnRGYWl0IiwicHJvbW90aW9uIiwiaWRfcHJvbW90aW9uIiwiUGFnZVByaW5jaXBhbCIsInNldHVwQmVmb3JlVW5sb2FkTGlzdGVuZXIiLCJldiIsIlJlY2hlcmNoZVBldHNpdHRlciIsIkFkbWluQ29udGFpbmVyIiwiUHJvZmlsZSIsIlByb2ZpbERlbWFuZGVQZXR0U2l0dGVyIiwiUGF5bWVudEZvcm1Db250YWluZXIiLCJMaXN0Q29udHJhdCIsIlJlYWN0RE9NIiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FB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QUFDNzRDLEtBQUssV0FBV3VLLFVBQVd3Z0UsS0FDeEMsa0JBQUMsRUFBRCxDQUFPbHlCLE9BQUssRUFBQzc0QyxLQUFLLFlBQVl1SyxVQUFXeWdFLEtBQ3pDLGtCQUFDLEVBQUQsQ0FBT255QixPQUFLLEVBQUM3NEMsS0FBSyxXQUFXdUssVUFBV3VnRSxLQUN4QyxrQkFBQyxFQUFELENBQU9qeUIsT0FBSyxFQUFDNzRDLEtBQUssV0FBV3VLLFVBQVd3Z0UsTUFJNUMsa0JBQUMsR0FBRCxZLGdDQXRDWXB3RSxhQ1Q1QnN3RSxTQUNJLGdCQUFDLEdBQUQsTUFDQWo1RSxTQUFTazVFLGVBQWUiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDg2KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpICYmIGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBDcmVhdGVzIGEgYFJlZmAgd2hvc2UgdmFsdWUgaXMgdXBkYXRlZCBpbiBhbiBlZmZlY3QsIGVuc3VyaW5nIHRoZSBtb3N0IHJlY2VudFxuICogdmFsdWUgaXMgdGhlIG9uZSByZW5kZXJlZCB3aXRoLiBHZW5lcmFsbHkgb25seSByZXF1aXJlZCBmb3IgQ29uY3VycmVudCBtb2RlIHVzYWdlXG4gKiB3aGVyZSBwcmV2aW91cyB3b3JrIGluIGByZW5kZXIoKWAgbWF5IGJlIGRpc2NhcmRlZCBiZWZvciBiZWluZyB1c2VkLlxuICpcbiAqIFRoaXMgaXMgc2FmZSB0byBhY2Nlc3MgaW4gYW4gZXZlbnQgaGFuZGxlci5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIGBSZWZgIHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29tbWl0dGVkUmVmKHZhbHVlKSB7XG4gIHZhciByZWYgPSB1c2VSZWYodmFsdWUpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH0sIFt2YWx1ZV0pO1xuICByZXR1cm4gcmVmO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VDb21taXR0ZWRSZWY7IiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlQ29tbWl0dGVkUmVmIGZyb20gJy4vdXNlQ29tbWl0dGVkUmVmJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUV2ZW50Q2FsbGJhY2soZm4pIHtcbiAgdmFyIHJlZiA9IHVzZUNvbW1pdHRlZFJlZihmbik7XG4gIHJldHVybiB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlZi5jdXJyZW50ICYmIHJlZi5jdXJyZW50LmFwcGx5KHJlZiwgYXJndW1lbnRzKTtcbiAgfSwgW3JlZl0pO1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIGVxdWFsIHRvIG1lcmdlIHdpdGggdGhlIGRpZmZlcmVuY2UgYmVpbmcgdGhhdCBubyByZWZlcmVuY2VcbiAqIHRvIG9yaWdpbmFsIG9iamVjdHMgaXMga2VwdC5cbiAqXG4gKiBAc2VlIG1lcmdlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBkZWVwTWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwTWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZGVlcE1lcmdlOiBkZWVwTWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJEb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbn0iLCJleHBvcnQgZGVmYXVsdCAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsInZhciB0b0FycmF5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCwgW10uc2xpY2UpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXNhKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIHJldHVybiB0b0FycmF5KGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufSIsImltcG9ydCBhZGRFdmVudExpc3RlbmVyIGZyb20gJy4vYWRkRXZlbnRMaXN0ZW5lcic7XG5pbXBvcnQgcmVtb3ZlRXZlbnRMaXN0ZW5lciBmcm9tICcuL3JlbW92ZUV2ZW50TGlzdGVuZXInO1xuXG5mdW5jdGlvbiBsaXN0ZW4obm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RlbjsiLCJmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICB2YXIgY2FwdHVyZSA9IG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMgIT09ICdib29sZWFuJyA/IG9wdGlvbnMuY2FwdHVyZSA6IG9wdGlvbnM7XG4gIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIGNhcHR1cmUpO1xuXG4gIGlmIChoYW5kbGVyLl9fb25jZSkge1xuICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIuX19vbmNlLCBjYXB0dXJlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCByZW1vdmVFdmVudExpc3RlbmVyOyIsImltcG9ydCB7IHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBUcmFjayB3aGV0aGVyIGEgY29tcG9uZW50IGlzIGN1cnJlbnQgbW91bnRlZC4gR2VuZXJhbGx5IGxlc3MgcHJlZmVyYWJsZSB0aGFuXG4gKiBwcm9wZXJsbHkgY2FuY2VsaW5nIGVmZmVjdHMgc28gdGhleSBkb24ndCBydW4gYWZ0ZXIgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkLFxuICogYnV0IGhlbHBmdWwgaW4gY2FzZXMgd2hlcmUgdGhhdCBpc24ndCBmZWFzaWJsZSwgc3VjaCBhcyBhIGBQcm9taXNlYCByZXNvbHV0aW9uLlxuICpcbiAqIEByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjdXJyZW50IGlzTW91bnRlZCBzdGF0ZSBvZiB0aGUgY29tcG9uZW50XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlKG51bGwpXG4gKiBjb25zdCBpc01vdW50ZWQgPSB1c2VNb3VudGVkKClcbiAqXG4gKiB1c2VFZmZlY3QoKCkgPT4ge1xuICogICBmZXRjaGRhdGEoKS50aGVuKChuZXdEYXRhKSA9PiB7XG4gKiAgICAgIGlmIChpc01vdW50ZWQoKSkge1xuICogICAgICAgIHNldERhdGEobmV3RGF0YSk7XG4gKiAgICAgIH1cbiAqICAgfSlcbiAqIH0pXG4gKiBgYGBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VNb3VudGVkKCkge1xuICB2YXIgbW91bnRlZCA9IHVzZVJlZih0cnVlKTtcbiAgdmFyIGlzTW91bnRlZCA9IHVzZVJlZihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1vdW50ZWQuY3VycmVudDtcbiAgfSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIG1vdW50ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgcmV0dXJuIGlzTW91bnRlZC5jdXJyZW50O1xufSIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXJldHVybi1hc3NpZ24gKi9cbmltcG9ydCBjYW5Vc2VET00gZnJvbSAnLi9jYW5Vc2VET00nO1xuZXhwb3J0IHZhciBvcHRpb25zU3VwcG9ydGVkID0gZmFsc2U7XG5leHBvcnQgdmFyIG9uY2VTdXBwb3J0ZWQgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgZ2V0IHBhc3NpdmUoKSB7XG4gICAgICByZXR1cm4gb3B0aW9uc1N1cHBvcnRlZCA9IHRydWU7XG4gICAgfSxcblxuICAgIGdldCBvbmNlKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW11bHRpLWFzc2lnblxuICAgICAgcmV0dXJuIG9uY2VTdXBwb3J0ZWQgPSBvcHRpb25zU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgfTtcblxuICBpZiAoY2FuVXNlRE9NKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBvcHRpb25zLCBvcHRpb25zKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMsIHRydWUpO1xuICB9XG59IGNhdGNoIChlKSB7XG4gIC8qICovXG59XG5cbi8qKlxuICogQW4gYGFkZEV2ZW50TGlzdGVuZXJgIHBvbnlmaWxsLCBzdXBwb3J0cyB0aGUgYG9uY2VgIG9wdGlvblxuICovXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucyAhPT0gJ2Jvb2xlYW4nICYmICFvbmNlU3VwcG9ydGVkKSB7XG4gICAgdmFyIG9uY2UgPSBvcHRpb25zLm9uY2UsXG4gICAgICAgIGNhcHR1cmUgPSBvcHRpb25zLmNhcHR1cmU7XG4gICAgdmFyIHdyYXBwZWRIYW5kbGVyID0gaGFuZGxlcjtcblxuICAgIGlmICghb25jZVN1cHBvcnRlZCAmJiBvbmNlKSB7XG4gICAgICB3cmFwcGVkSGFuZGxlciA9IGhhbmRsZXIuX19vbmNlIHx8IGZ1bmN0aW9uIG9uY2VIYW5kbGVyKGV2ZW50KSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uY2VIYW5kbGVyLCBjYXB0dXJlKTtcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgIH07XG5cbiAgICAgIGhhbmRsZXIuX19vbmNlID0gd3JhcHBlZEhhbmRsZXI7XG4gICAgfVxuXG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgd3JhcHBlZEhhbmRsZXIsIG9wdGlvbnNTdXBwb3J0ZWQgPyBvcHRpb25zIDogY2FwdHVyZSk7XG4gIH1cblxuICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYWRkRXZlbnRMaXN0ZW5lcjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT17fTtmdW5jdGlvbiBuKHIpe2lmKGVbcl0pcmV0dXJuIGVbcl0uZXhwb3J0czt2YXIgbz1lW3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gdFtyXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyxuKSxvLmw9ITAsby5leHBvcnRzfXJldHVybiBuLm09dCxuLmM9ZSxuLmQ9ZnVuY3Rpb24odCxlLHIpe24ubyh0LGUpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ucj1mdW5jdGlvbih0KXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxuLnQ9ZnVuY3Rpb24odCxlKXtpZigxJmUmJih0PW4odCkpLDgmZSlyZXR1cm4gdDtpZig0JmUmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0JiZ0Ll9fZXNNb2R1bGUpcmV0dXJuIHQ7dmFyIHI9T2JqZWN0LmNyZWF0ZShudWxsKTtpZihuLnIociksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6dH0pLDImZSYmXCJzdHJpbmdcIiE9dHlwZW9mIHQpZm9yKHZhciBvIGluIHQpbi5kKHIsbyxmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0uYmluZChudWxsLG8pKTtyZXR1cm4gcn0sbi5uPWZ1bmN0aW9uKHQpe3ZhciBlPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiBuLmQoZSxcImFcIixlKSxlfSxuLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LG4ucD1cIlwiLG4obi5zPTEpfShbZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9cmVxdWlyZShcInJlYWN0XCIpfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7bi5yKGUpLG4uZChlLFwiZGVmYXVsdFwiLChmdW5jdGlvbigpe3JldHVybiBmfSkpO3ZhciByPW4oMCksbz1uLm4ocik7bigyKTtmdW5jdGlvbiBpKHQpe3JldHVybihpPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9KSh0KX1mdW5jdGlvbiBzKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1mdW5jdGlvbiBhKHQpe3JldHVybihhPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24odCl7cmV0dXJuIHQuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9KSh0KX1mdW5jdGlvbiBjKHQpe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiB0fWZ1bmN0aW9uIGwodCxlKXtyZXR1cm4obD1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0pKHQsZSl9ZnVuY3Rpb24gdSh0LGUsbil7cmV0dXJuIGUgaW4gdD9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHt2YWx1ZTpuLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtlXT1uLHR9dmFyIGY9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0KXt2YXIgbixyLHM7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSxyPXRoaXMscz1hKGUpLmNhbGwodGhpcyx0KSxuPSFzfHxcIm9iamVjdFwiIT09aShzKSYmXCJmdW5jdGlvblwiIT10eXBlb2Ygcz9jKHIpOnMsdShjKG4pLFwidG9nZ2xlXCIsKGZ1bmN0aW9uKHQpe24uc3RhdGUuY2hlY2tlZD9uLm9mZigpOm4ub24oKX0pKSx1KGMobiksXCJvZmZcIiwoZnVuY3Rpb24oKXtuLnN0YXRlLmRpc2FibGVkfHwobi5zZXRTdGF0ZSh7Y2hlY2tlZDohMX0pLG4ucHJvcHMub25DaGFuZ2UmJm4ucHJvcHMub25DaGFuZ2UoITEpKX0pKSx1KGMobiksXCJvblwiLChmdW5jdGlvbigpe24uc3RhdGUuZGlzYWJsZWR8fChuLnNldFN0YXRlKHtjaGVja2VkOiEwfSksbi5wcm9wcy5vbkNoYW5nZSYmbi5wcm9wcy5vbkNoYW5nZSghMCkpfSkpLHUoYyhuKSxcImVuYWJsZVwiLChmdW5jdGlvbigpe24uc2V0U3RhdGUoe2Rpc2FibGVkOiExfSl9KSksdShjKG4pLFwiZGlzYWJsZVwiLChmdW5jdGlvbigpe24uc2V0U3RhdGUoe2Rpc2FibGVkOiEwfSl9KSksdShjKG4pLFwicmVuZGVyXCIsKGZ1bmN0aW9uKCl7dmFyIHQ9e307bi5zdGF0ZS53aWR0aCYmKHQud2lkdGg9bi5zdGF0ZS53aWR0aCtcInB4XCIpLG4uc3RhdGUuaGVpZ2h0JiYodC5oZWlnaHQ9bi5zdGF0ZS5oZWlnaHQrXCJweFwiKTt2YXIgZT17fTtyZXR1cm4gbi5zdGF0ZS5oZWlnaHQmJihlLmxpbmVIZWlnaHQ9XCJjYWxjKFwiK24uc3RhdGUuaGVpZ2h0K1wicHggKiAwLjgpXCIpLG8uYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIse2NsYXNzTmFtZTpcInN3aXRjaCBidG4gXCIrKG4uc3RhdGUuY2hlY2tlZD9cIm9uIGJ0bi1cIituLnN0YXRlLm9uc3R5bGU6XCJvZmYgYnRuLVwiK24uc3RhdGUub2Zmc3R5bGUpKyhuLnN0YXRlLnNpemU/XCIgYnRuLVwiK24uc3RhdGUuc2l6ZTpcIlwiKSsobi5zdGF0ZS5zdHlsZT9cIiBcIituLnN0YXRlLnN0eWxlOlwiXCIpLHN0eWxlOnQsb25DbGljazpuLnRvZ2dsZX0sby5hLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIix7Y2xhc3NOYW1lOlwic3dpdGNoLWdyb3VwXCJ9LG8uYS5jcmVhdGVFbGVtZW50KFwic3BhblwiLHtjbGFzc05hbWU6XCJzd2l0Y2gtb24gYnRuIGJ0bi1cIituLnN0YXRlLm9uc3R5bGUrKG4uc3RhdGUuc2l6ZT9cIiBidG4tXCIrbi5zdGF0ZS5zaXplOlwiXCIpLHN0eWxlOmV9LG4uc3RhdGUub25sYWJlbCksby5hLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIse2NsYXNzTmFtZTpcInN3aXRjaC1vZmYgYnRuIGJ0bi1cIituLnN0YXRlLm9mZnN0eWxlKyhuLnN0YXRlLnNpemU/XCIgYnRuLVwiK24uc3RhdGUuc2l6ZTpcIlwiKSxzdHlsZTplfSxuLnN0YXRlLm9mZmxhYmVsKSxvLmEuY3JlYXRlRWxlbWVudChcInNwYW5cIix7Y2xhc3NOYW1lOlwic3dpdGNoLWhhbmRsZSBidG4gYnRuLWxpZ2h0XCIrKG4uc3RhdGUuc2l6ZT9cImJ0bi1cIituLnN0YXRlLnNpemU6XCJcIil9KSkpfSkpLG4uc3RhdGU9e2NoZWNrZWQ6XCJib29sZWFuXCI9PXR5cGVvZiBuLnByb3BzLmNoZWNrZWQmJm4ucHJvcHMuY2hlY2tlZCxkaXNhYmxlZDpcImJvb2xlYW5cIj09dHlwZW9mIG4ucHJvcHMuZGlzYWJsZWQmJm4ucHJvcHMuZGlzYWJsZWQsb25sYWJlbDpuLnByb3BzLm9ubGFiZWx8fFwiT25cIixvZmZsYWJlbDpuLnByb3BzLm9mZmxhYmVsfHxcIk9mZlwiLG9uc3R5bGU6bi5wcm9wcy5vbnN0eWxlfHxcInByaW1hcnlcIixvZmZzdHlsZTpuLnByb3BzLm9mZnN0eWxlfHxcImxpZ2h0XCIsc2l6ZTpuLnByb3BzLnNpemV8fFwiXCIsc3R5bGU6bi5wcm9wcy5zdHlsZXx8XCJcIix3aWR0aDpuLnByb3BzLndpZHRofHxudWxsLGhlaWdodDpuLnByb3BzLmhlaWdodHx8bnVsbH0sbn12YXIgbixyLGY7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZSYmZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxlJiZsKHQsZSl9KGUsdCksbj1lLChyPVt7a2V5OlwiY29tcG9uZW50RGlkVXBkYXRlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnByb3BzLmNoZWNrZWQ7XCJib29sZWFuXCI9PXR5cGVvZiBuJiZuIT09ZS5jaGVja2VkJiZ0aGlzLnNldFN0YXRlKHtjaGVja2VkOm59KX19XSkmJnMobi5wcm90b3R5cGUsciksZiYmcyhuLGYpLGV9KG8uYS5Db21wb25lbnQpfSxmdW5jdGlvbih0LGUsbil7dmFyIHI9bigzKTtcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9W1t0LmkscixcIlwiXV0pO3ZhciBvPXtobXI6ITAsdHJhbnNmb3JtOnZvaWQgMCxpbnNlcnRJbnRvOnZvaWQgMH07big1KShyLG8pO3IubG9jYWxzJiYodC5leHBvcnRzPXIubG9jYWxzKX0sZnVuY3Rpb24odCxlLG4peyh0LmV4cG9ydHM9big0KSghMSkpLnB1c2goW3QuaSwnLypcXFxcXFxufCp8ICA6OiBCb290c3RyYXAgU3dpdGNoIEJ1dHRvbiA6OlxcbnwqfFxcbnwqfCAgQm9vdHN0cmFwIFN3aXRjaCBCdXR0b24gKFJlYWN0KVxcbnwqfCAgaHR0cHM6Ly9naXRodWIuY29tL2dpdGJyZW50L2Jvb3RzdHJhcC1zd2l0Y2gtYnV0dG9uLXJlYWN0XFxufCp8XFxufCp8ICBUaGlzIGxpYnJhcnkgaXMgcmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBQdWJsaWMgTGljZW5zZSAoTUlUKVxcbnwqfFxcbnwqfCAgQm9vdHN0cmFwIFN3aXRjaCBCdXR0b24gKEMpIDIwMTktcHJlc2VudCBCcmVudCBFbHkgKGh0dHBzOi8vZ2l0aHViLmNvbS9naXRicmVudClcXG58KnxcXG58KnwgIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcXG58KnwgIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcXG58KnwgIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcXG58KnwgIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcXG58KnwgIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xcbnwqfCAgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcXG58KnxcXG58KnwgIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxcbnwqfCAgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cXG58KnxcXG58KnwgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcXG58KnwgIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxcbnwqfCAgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXFxufCp8ICBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXFxufCp8ICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxcbnwqfCAgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcXG58KnwgIFNPRlRXQVJFLlxcblxcXFwqL1xcblxcbi5idG4tZ3JvdXAteHMgPiAuYnRuLCAuYnRuLXhzIHtcXG5cXHRwYWRkaW5nOiAuMzVyZW0gLjRyZW0gLjI1cmVtIC40cmVtO1xcblxcdGZvbnQtc2l6ZTogLjg3NXJlbTtcXG5cXHRsaW5lLWhlaWdodDogLjU7XFxuXFx0Ym9yZGVyLXJhZGl1czogLjJyZW07XFxufVxcblxcbi5zd2l0Y2gge1xcblxcdHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5cXHRvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG4uc3dpdGNoLmJ0bi5idG4tbGlnaHQsIC5zd2l0Y2guYnRuLmJ0bi1vdXRsaW5lLWxpZ2h0IHtcXG5cXHRib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgLjE1KTsgLyogQWRkIGEgYm9yZGVyIHNvIHN3aXRjaCBpcyBkZWxpbmVhdGVkICovXFxufVxcbi5zd2l0Y2ggaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdIHtcXG5cXHRkaXNwbGF5OiBub25lO1xcbn1cXG4uc3dpdGNoLWdyb3VwIHtcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxuXFx0d2lkdGg6IDIwMCU7XFxuXFx0dG9wOiAwO1xcblxcdGJvdHRvbTogMDtcXG5cXHRsZWZ0OiAwO1xcblxcdHRyYW5zaXRpb246IGxlZnQgMC4zNXM7XFxuXFx0LXdlYmtpdC10cmFuc2l0aW9uOiBsZWZ0IDAuMzVzO1xcblxcdC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuXFx0LXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuLnN3aXRjaC5vZmYgLnN3aXRjaC1ncm91cCB7XFxuXFx0bGVmdDogLTEwMCU7XFxufVxcbi5zd2l0Y2gtb24ge1xcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cXHR0b3A6IDA7XFxuXFx0Ym90dG9tOiAwO1xcblxcdGxlZnQ6IDA7XFxuXFx0cmlnaHQ6IDUwJTtcXG5cXHRtYXJnaW46IDA7XFxuXFx0Ym9yZGVyOiAwO1xcblxcdGJvcmRlci1yYWRpdXM6IDA7XFxufVxcbi5zd2l0Y2gtb2ZmIHtcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxuXFx0dG9wOiAwO1xcblxcdGJvdHRvbTogMDtcXG5cXHRsZWZ0OiA1MCU7XFxuXFx0cmlnaHQ6IDA7XFxuXFx0bWFyZ2luOiAwO1xcblxcdGJvcmRlcjogMDtcXG5cXHRib3JkZXItcmFkaXVzOiAwO1xcblxcdGJveC1zaGFkb3c6IG5vbmU7XFxufVxcbi5zd2l0Y2gtaGFuZGxlIHtcXG5cXHRwb3NpdGlvbjogcmVsYXRpdmU7XFxuXFx0bWFyZ2luOiAwIGF1dG87XFxuXFx0cGFkZGluZy10b3A6IDBweDtcXG5cXHRwYWRkaW5nLWJvdHRvbTogMHB4O1xcblxcdGhlaWdodDogMTAwJTtcXG5cXHR3aWR0aDogMHB4O1xcblxcdGJvcmRlci13aWR0aDogMCAxcHg7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLnN3aXRjaC5idG4tb3V0bGluZS1wcmltYXJ5IC5zd2l0Y2gtaGFuZGxlIHtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5KTtcXG5cXHRib3JkZXItY29sb3I6IHZhcigtLXByaW1hcnkpO1xcbn1cXG4uc3dpdGNoLmJ0bi1vdXRsaW5lLXNlY29uZGFyeSAuc3dpdGNoLWhhbmRsZSB7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2Vjb25kYXJ5KTtcXG5cXHRib3JkZXItY29sb3I6IHZhcigtLXNlY29uZGFyeSk7XFxufVxcbi5zd2l0Y2guYnRuLW91dGxpbmUtc3VjY2VzcyAuc3dpdGNoLWhhbmRsZSB7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc3VjY2Vzcyk7XFxuXFx0Ym9yZGVyLWNvbG9yOiB2YXIoLS1zdWNjZXNzKTtcXG59XFxuLnN3aXRjaC5idG4tb3V0bGluZS1kYW5nZXIgLnN3aXRjaC1oYW5kbGUge1xcblxcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWRhbmdlcik7XFxuXFx0Ym9yZGVyLWNvbG9yOiB2YXIoLS1kYW5nZXIpO1xcbn1cXG4uc3dpdGNoLmJ0bi1vdXRsaW5lLXdhcm5pbmcgLnN3aXRjaC1oYW5kbGUge1xcblxcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLXdhcm5pbmcpO1xcblxcdGJvcmRlci1jb2xvcjogdmFyKC0td2FybmluZyk7XFxufVxcbi5zd2l0Y2guYnRuLW91dGxpbmUtaW5mbyAuc3dpdGNoLWhhbmRsZSB7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0taW5mbyk7XFxuXFx0Ym9yZGVyLWNvbG9yOiB2YXIoLS1pbmZvKTtcXG59XFxuLnN3aXRjaC5idG4tb3V0bGluZS1saWdodCAuc3dpdGNoLWhhbmRsZSB7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbGlnaHQpO1xcblxcdGJvcmRlci1jb2xvcjogdmFyKC0tbGlnaHQpO1xcbn1cXG4uc3dpdGNoLmJ0bi1vdXRsaW5lLWRhcmsgLnN3aXRjaC1oYW5kbGUge1xcblxcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWRhcmspO1xcblxcdGJvcmRlci1jb2xvcjogdmFyKC0tZGFyayk7XFxufVxcbi5zd2l0Y2hbY2xhc3MqPVwiYnRuLW91dGxpbmVcIl06aG92ZXIgLnN3aXRjaC1oYW5kbGUge1xcblxcdGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxpZ2h0KTtcXG5cXHRvcGFjaXR5OiAwLjU7XFxufVxcblxcbi8qIE5PVEU6IE11c3QgY29tZSBmaXJzdCwgc28gY2xhc3NlcyBiZWxvdyBvdmVycmlkZSBhcyBuZWVkZWQgKi9cXG4vKiBib290c3RyYXAtNC54IC5mb3JtLWNvbnRyb2wge2hlaWdodH0gdmFsdWVzIHVzZWQgYXMgYG1pbi1oZWlnaHRgIHRvIG1pcnJvciBvdXRwdXQgc2l6ZXMgKi9cXG5cXG4uc3dpdGNoLmJ0biB7IG1pbi13aWR0aDogMy43cmVtOyBtaW4taGVpZ2h0OiBjYWxjKDEuNWVtICsgLjc1cmVtICsgMnB4KTsgfVxcbi5zd2l0Y2gtb24uYnRuIHsgcGFkZGluZy1yaWdodDogMS41cmVtOyB9XFxuLnN3aXRjaC1vZmYuYnRuIHsgcGFkZGluZy1sZWZ0OiAxLjVyZW07IH1cXG5cXG4uc3dpdGNoLmJ0bi1sZyB7IG1pbi13aWR0aDogNXJlbTsgbGluZS1oZWlnaHQ6IDEuNTsgbWluLWhlaWdodDogY2FsYygxLjVlbSArIDFyZW0gKyAycHgpOyB9XFxuLnN3aXRjaC1vbi5idG4tbGcgeyBwYWRkaW5nLXJpZ2h0OiAycmVtOyB9XFxuLnN3aXRjaC1vZmYuYnRuLWxnIHsgcGFkZGluZy1sZWZ0OiAycmVtOyB9XFxuLnN3aXRjaC1oYW5kbGUuYnRuLWxnIHsgd2lkdGg6IDIuNXJlbTsgfVxcblxcbi5zd2l0Y2guYnRuLXNtIHsgbWluLXdpZHRoOiAzLjI1cmVtOyBtaW4taGVpZ2h0OiBjYWxjKDEuNWVtICsgLjVyZW0gKyAycHgpOyB9XFxuLnN3aXRjaC1vbi5idG4tc20geyBwYWRkaW5nLXJpZ2h0OiAxcmVtOyB9XFxuLnN3aXRjaC1vZmYuYnRuLXNtIHsgcGFkZGluZy1sZWZ0OiAxcmVtOyB9XFxuXFxuLyogYHhzYCAoYm9vdHN0cmFwLTMuMyAtIC5idG4gLSBoOjIycHgpICovXFxuLnN3aXRjaC5idG4teHMgeyBtaW4td2lkdGg6IDMuMTI1cmVtOyBtaW4taGVpZ2h0OiAxLjM3NXJlbTsgfVxcbi5zd2l0Y2gtb24uYnRuLXhzIHsgcGFkZGluZy1yaWdodDogLjhyZW07IH1cXG4uc3dpdGNoLW9mZi5idG4teHMgeyBwYWRkaW5nLWxlZnQ6IC44cmVtOyB9XFxuJyxcIlwiXSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9W107cmV0dXJuIGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoKGZ1bmN0aW9uKGUpe3ZhciBuPWZ1bmN0aW9uKHQsZSl7dmFyIG49dFsxXXx8XCJcIixyPXRbM107aWYoIXIpcmV0dXJuIG47aWYoZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYSl7dmFyIG89KHM9cixcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzKSkpKStcIiAqL1wiKSxpPXIuc291cmNlcy5tYXAoKGZ1bmN0aW9uKHQpe3JldHVyblwiLyojIHNvdXJjZVVSTD1cIityLnNvdXJjZVJvb3QrdCtcIiAqL1wifSkpO3JldHVybltuXS5jb25jYXQoaSkuY29uY2F0KFtvXSkuam9pbihcIlxcblwiKX12YXIgcztyZXR1cm5bbl0uam9pbihcIlxcblwiKX0oZSx0KTtyZXR1cm4gZVsyXT9cIkBtZWRpYSBcIitlWzJdK1wie1wiK24rXCJ9XCI6bn0pKS5qb2luKFwiXCIpfSxlLmk9ZnVuY3Rpb24odCxuKXtcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9W1tudWxsLHQsXCJcIl1dKTtmb3IodmFyIHI9e30sbz0wO288dGhpcy5sZW5ndGg7bysrKXt2YXIgaT10aGlzW29dWzBdO251bGwhPWkmJihyW2ldPSEwKX1mb3Iobz0wO288dC5sZW5ndGg7bysrKXt2YXIgcz10W29dO251bGwhPXNbMF0mJnJbc1swXV18fChuJiYhc1syXT9zWzJdPW46biYmKHNbMl09XCIoXCIrc1syXStcIikgYW5kIChcIituK1wiKVwiKSxlLnB1c2gocykpfX0sZX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcixvLGk9e30scz0ocj1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cmJmRvY3VtZW50JiZkb2N1bWVudC5hbGwmJiF3aW5kb3cuYXRvYn0sZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09byYmKG89ci5hcHBseSh0aGlzLGFyZ3VtZW50cykpLG99KSxhPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGU/ZS5xdWVyeVNlbGVjdG9yKHQpOmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodCl9LGM9ZnVuY3Rpb24odCl7dmFyIGU9e307cmV0dXJuIGZ1bmN0aW9uKHQsbil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdClyZXR1cm4gdCgpO2lmKHZvaWQgMD09PWVbdF0pe3ZhciByPWEuY2FsbCh0aGlzLHQsbik7aWYod2luZG93LkhUTUxJRnJhbWVFbGVtZW50JiZyIGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KXRyeXtyPXIuY29udGVudERvY3VtZW50LmhlYWR9Y2F0Y2godCl7cj1udWxsfWVbdF09cn1yZXR1cm4gZVt0XX19KCksbD1udWxsLHU9MCxmPVtdLGQ9big2KTtmdW5jdGlvbiBwKHQsZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl0sbz1pW3IuaWRdO2lmKG8pe28ucmVmcysrO2Zvcih2YXIgcz0wO3M8by5wYXJ0cy5sZW5ndGg7cysrKW8ucGFydHNbc10oci5wYXJ0c1tzXSk7Zm9yKDtzPHIucGFydHMubGVuZ3RoO3MrKylvLnBhcnRzLnB1c2goeShyLnBhcnRzW3NdLGUpKX1lbHNle3ZhciBhPVtdO2ZvcihzPTA7czxyLnBhcnRzLmxlbmd0aDtzKyspYS5wdXNoKHkoci5wYXJ0c1tzXSxlKSk7aVtyLmlkXT17aWQ6ci5pZCxyZWZzOjEscGFydHM6YX19fX1mdW5jdGlvbiBoKHQsZSl7Zm9yKHZhciBuPVtdLHI9e30sbz0wO288dC5sZW5ndGg7bysrKXt2YXIgaT10W29dLHM9ZS5iYXNlP2lbMF0rZS5iYXNlOmlbMF0sYT17Y3NzOmlbMV0sbWVkaWE6aVsyXSxzb3VyY2VNYXA6aVszXX07cltzXT9yW3NdLnBhcnRzLnB1c2goYSk6bi5wdXNoKHJbc109e2lkOnMscGFydHM6W2FdfSl9cmV0dXJuIG59ZnVuY3Rpb24gYih0LGUpe3ZhciBuPWModC5pbnNlcnRJbnRvKTtpZighbil0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTt2YXIgcj1mW2YubGVuZ3RoLTFdO2lmKFwidG9wXCI9PT10Lmluc2VydEF0KXI/ci5uZXh0U2libGluZz9uLmluc2VydEJlZm9yZShlLHIubmV4dFNpYmxpbmcpOm4uYXBwZW5kQ2hpbGQoZSk6bi5pbnNlcnRCZWZvcmUoZSxuLmZpcnN0Q2hpbGQpLGYucHVzaChlKTtlbHNlIGlmKFwiYm90dG9tXCI9PT10Lmluc2VydEF0KW4uYXBwZW5kQ2hpbGQoZSk7ZWxzZXtpZihcIm9iamVjdFwiIT10eXBlb2YgdC5pbnNlcnRBdHx8IXQuaW5zZXJ0QXQuYmVmb3JlKXRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO3ZhciBvPWModC5pbnNlcnRBdC5iZWZvcmUsbik7bi5pbnNlcnRCZWZvcmUoZSxvKX19ZnVuY3Rpb24gbSh0KXtpZihudWxsPT09dC5wYXJlbnROb2RlKXJldHVybiExO3QucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KTt2YXIgZT1mLmluZGV4T2YodCk7ZT49MCYmZi5zcGxpY2UoZSwxKX1mdW5jdGlvbiBnKHQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtpZih2b2lkIDA9PT10LmF0dHJzLnR5cGUmJih0LmF0dHJzLnR5cGU9XCJ0ZXh0L2Nzc1wiKSx2b2lkIDA9PT10LmF0dHJzLm5vbmNlKXt2YXIgcj1mdW5jdGlvbigpezA7cmV0dXJuIG4ubmN9KCk7ciYmKHQuYXR0cnMubm9uY2U9cil9cmV0dXJuIHcoZSx0LmF0dHJzKSxiKHQsZSksZX1mdW5jdGlvbiB3KHQsZSl7T2JqZWN0LmtleXMoZSkuZm9yRWFjaCgoZnVuY3Rpb24obil7dC5zZXRBdHRyaWJ1dGUobixlW25dKX0pKX1mdW5jdGlvbiB5KHQsZSl7dmFyIG4scixvLGk7aWYoZS50cmFuc2Zvcm0mJnQuY3NzKXtpZighKGk9XCJmdW5jdGlvblwiPT10eXBlb2YgZS50cmFuc2Zvcm0/ZS50cmFuc2Zvcm0odC5jc3MpOmUudHJhbnNmb3JtLmRlZmF1bHQodC5jc3MpKSlyZXR1cm4gZnVuY3Rpb24oKXt9O3QuY3NzPWl9aWYoZS5zaW5nbGV0b24pe3ZhciBzPXUrKztuPWx8fChsPWcoZSkpLHI9Uy5iaW5kKG51bGwsbixzLCExKSxvPVMuYmluZChudWxsLG4scywhMCl9ZWxzZSB0LnNvdXJjZU1hcCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBCbG9iJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBidG9hPyhuPWZ1bmN0aW9uKHQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO3JldHVybiB2b2lkIDA9PT10LmF0dHJzLnR5cGUmJih0LmF0dHJzLnR5cGU9XCJ0ZXh0L2Nzc1wiKSx0LmF0dHJzLnJlbD1cInN0eWxlc2hlZXRcIix3KGUsdC5hdHRycyksYih0LGUpLGV9KGUpLHI9RS5iaW5kKG51bGwsbixlKSxvPWZ1bmN0aW9uKCl7bShuKSxuLmhyZWYmJlVSTC5yZXZva2VPYmplY3RVUkwobi5ocmVmKX0pOihuPWcoZSkscj1ULmJpbmQobnVsbCxuKSxvPWZ1bmN0aW9uKCl7bShuKX0pO3JldHVybiByKHQpLGZ1bmN0aW9uKGUpe2lmKGUpe2lmKGUuY3NzPT09dC5jc3MmJmUubWVkaWE9PT10Lm1lZGlhJiZlLnNvdXJjZU1hcD09PXQuc291cmNlTWFwKXJldHVybjtyKHQ9ZSl9ZWxzZSBvKCl9fXQuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBERUJVRyYmREVCVUcmJlwib2JqZWN0XCIhPXR5cGVvZiBkb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7KGU9ZXx8e30pLmF0dHJzPVwib2JqZWN0XCI9PXR5cGVvZiBlLmF0dHJzP2UuYXR0cnM6e30sZS5zaW5nbGV0b258fFwiYm9vbGVhblwiPT10eXBlb2YgZS5zaW5nbGV0b258fChlLnNpbmdsZXRvbj1zKCkpLGUuaW5zZXJ0SW50b3x8KGUuaW5zZXJ0SW50bz1cImhlYWRcIiksZS5pbnNlcnRBdHx8KGUuaW5zZXJ0QXQ9XCJib3R0b21cIik7dmFyIG49aCh0LGUpO3JldHVybiBwKG4sZSksZnVuY3Rpb24odCl7Zm9yKHZhciByPVtdLG89MDtvPG4ubGVuZ3RoO28rKyl7dmFyIHM9bltvXTsoYT1pW3MuaWRdKS5yZWZzLS0sci5wdXNoKGEpfXQmJnAoaCh0LGUpLGUpO2ZvcihvPTA7bzxyLmxlbmd0aDtvKyspe3ZhciBhO2lmKDA9PT0oYT1yW29dKS5yZWZzKXtmb3IodmFyIGM9MDtjPGEucGFydHMubGVuZ3RoO2MrKylhLnBhcnRzW2NdKCk7ZGVsZXRlIGlbYS5pZF19fX19O3ZhciB2LE89KHY9W10sZnVuY3Rpb24odCxlKXtyZXR1cm4gdlt0XT1lLHYuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIil9KTtmdW5jdGlvbiBTKHQsZSxuLHIpe3ZhciBvPW4/XCJcIjpyLmNzcztpZih0LnN0eWxlU2hlZXQpdC5zdHlsZVNoZWV0LmNzc1RleHQ9TyhlLG8pO2Vsc2V7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobykscz10LmNoaWxkTm9kZXM7c1tlXSYmdC5yZW1vdmVDaGlsZChzW2VdKSxzLmxlbmd0aD90Lmluc2VydEJlZm9yZShpLHNbZV0pOnQuYXBwZW5kQ2hpbGQoaSl9fWZ1bmN0aW9uIFQodCxlKXt2YXIgbj1lLmNzcyxyPWUubWVkaWE7aWYociYmdC5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLHIpLHQuc3R5bGVTaGVldCl0LnN0eWxlU2hlZXQuY3NzVGV4dD1uO2Vsc2V7Zm9yKDt0LmZpcnN0Q2hpbGQ7KXQucmVtb3ZlQ2hpbGQodC5maXJzdENoaWxkKTt0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG4pKX19ZnVuY3Rpb24gRSh0LGUsbil7dmFyIHI9bi5jc3Msbz1uLnNvdXJjZU1hcCxpPXZvaWQgMD09PWUuY29udmVydFRvQWJzb2x1dGVVcmxzJiZvOyhlLmNvbnZlcnRUb0Fic29sdXRlVXJsc3x8aSkmJihyPWQocikpLG8mJihyKz1cIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIrYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkobykpKSkrXCIgKi9cIik7dmFyIHM9bmV3IEJsb2IoW3JdLHt0eXBlOlwidGV4dC9jc3NcIn0pLGE9dC5ocmVmO3QuaHJlZj1VUkwuY3JlYXRlT2JqZWN0VVJMKHMpLGEmJlVSTC5yZXZva2VPYmplY3RVUkwoYSl9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cubG9jYXRpb247aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7aWYoIXR8fFwic3RyaW5nXCIhPXR5cGVvZiB0KXJldHVybiB0O3ZhciBuPWUucHJvdG9jb2wrXCIvL1wiK2UuaG9zdCxyPW4rZS5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sXCIvXCIpO3JldHVybiB0LnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLChmdW5jdGlvbih0LGUpe3ZhciBvLGk9ZS50cmltKCkucmVwbGFjZSgvXlwiKC4qKVwiJC8sKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV9KSkucmVwbGFjZSgvXicoLiopJyQvLChmdW5jdGlvbih0LGUpe3JldHVybiBlfSkpO3JldHVybi9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QoaSk/dDoobz0wPT09aS5pbmRleE9mKFwiLy9cIik/aTowPT09aS5pbmRleE9mKFwiL1wiKT9uK2k6citpLnJlcGxhY2UoL15cXC5cXC8vLFwiXCIpLFwidXJsKFwiK0pTT04uc3RyaW5naWZ5KG8pK1wiKVwiKX0pKX19XSk7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSwgbm8tY29uZC1hc3NpZ24gKi9cbi8vIEhUTUwgRE9NIGFuZCBTVkcgRE9NIG1heSBoYXZlIGRpZmZlcmVudCBzdXBwb3J0IGxldmVscyxcbi8vIHNvIHdlIG5lZWQgdG8gY2hlY2sgb24gY29udGV4dCBpbnN0ZWFkIG9mIGEgZG9jdW1lbnQgcm9vdCBlbGVtZW50LlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGFpbnMoY29udGV4dCwgbm9kZSkge1xuICBpZiAoY29udGV4dC5jb250YWlucykgcmV0dXJuIGNvbnRleHQuY29udGFpbnMobm9kZSk7XG4gIGlmIChjb250ZXh0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSByZXR1cm4gY29udGV4dCA9PT0gbm9kZSB8fCAhIShjb250ZXh0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5vZGUpICYgMTYpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgb3B0aW9ucyA9IHt9O1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZSwgbm8tcGFyYW0tcmVhc3NpZ25cblxuXG4gIHVybCA9IHVybCAmJiB1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsO1xuXG4gIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB1cmw7XG4gIH0gLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJyksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IodGltZW91dEVycm9yTWVzc2FnZSwgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdmFyIHZhbHVlRnJvbUNvbmZpZzJLZXlzID0gWyd1cmwnLCAnbWV0aG9kJywgJ3BhcmFtcycsICdkYXRhJ107XG4gIHZhciBtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyA9IFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5J107XG4gIHZhciBkZWZhdWx0VG9Db25maWcyS2V5cyA9IFtcbiAgICAnYmFzZVVSTCcsICd1cmwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAndmFsaWRhdGVTdGF0dXMnLCAnbWF4UmVkaXJlY3RzJywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCdcbiAgXTtcblxuICB1dGlscy5mb3JFYWNoKHZhbHVlRnJvbUNvbmZpZzJLZXlzLCBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cywgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChkZWZhdWx0VG9Db25maWcyS2V5cywgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBheGlvc0tleXMgPSB2YWx1ZUZyb21Db25maWcyS2V5c1xuICAgIC5jb25jYXQobWVyZ2VEZWVwUHJvcGVydGllc0tleXMpXG4gICAgLmNvbmNhdChkZWZhdWx0VG9Db25maWcyS2V5cyk7XG5cbiAgdmFyIG90aGVyS2V5cyA9IE9iamVjdFxuICAgIC5rZXlzKGNvbmZpZzIpXG4gICAgLmZpbHRlcihmdW5jdGlvbiBmaWx0ZXJBeGlvc0tleXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXhpb3NLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gICAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChvdGhlcktleXMsIGZ1bmN0aW9uIG90aGVyS2V5c0RlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcGF5bWVudC5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEEgY29udmVuaWVuY2UgaG9vayBhcm91bmQgYHVzZVN0YXRlYCBkZXNpZ25lZCB0byBiZSBwYWlyZWQgd2l0aFxuICogdGhlIGNvbXBvbmVudCBbY2FsbGJhY2sgcmVmXShodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVmcy1hbmQtdGhlLWRvbS5odG1sI2NhbGxiYWNrLXJlZnMpIGFwaS5cbiAqIENhbGxiYWNrIHJlZnMgYXJlIHVzZWZ1bCBvdmVyIGB1c2VSZWYoKWAgd2hlbiB5b3UgbmVlZCB0byByZXNwb25kIHRvIHRoZSByZWYgYmVpbmcgc2V0XG4gKiBpbnN0ZWFkIG9mIGxhemlseSBhY2Nlc3NpbmcgaXQgaW4gYW4gZWZmZWN0LlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBbZWxlbWVudCwgYXR0YWNoUmVmXSA9IHVzZUNhbGxiYWNrUmVmPEhUTUxEaXZFbGVtZW50PigpXG4gKlxuICogdXNlRWZmZWN0KCgpID0+IHtcbiAqICAgaWYgKCFlbGVtZW50KSByZXR1cm5cbiAqXG4gKiAgIGNvbnN0IGNhbGVuZGFyID0gbmV3IEZ1bGxDYWxlbmRhci5DYWxlbmRhcihlbGVtZW50KVxuICpcbiAqICAgcmV0dXJuICgpID0+IHtcbiAqICAgICBjYWxlbmRhci5kZXN0cm95KClcbiAqICAgfVxuICogfSwgW2VsZW1lbnRdKVxuICpcbiAqIHJldHVybiA8ZGl2IHJlZj17YXR0YWNoUmVmfSAvPlxuICogYGBgXG4gKlxuICogQGNhdGVnb3J5IHJlZnNcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDYWxsYmFja1JlZigpIHtcbiAgcmV0dXJuIHVzZVN0YXRlKG51bGwpO1xufSIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBTdG9yZSB0aGUgbGFzdCBvZiBzb21lIHZhbHVlLiBUcmFja2VkIHZpYSBhIGBSZWZgIG9ubHkgdXBkYXRpbmcgaXRcbiAqIGFmdGVyIHRoZSBjb21wb25lbnQgcmVuZGVycy5cbiAqXG4gKiBIZWxwZnVsIGlmIHlvdSBuZWVkIHRvIGNvbXBhcmUgYSBwcm9wIHZhbHVlIHRvIGl0J3MgcHJldmlvdXMgdmFsdWUgZHVyaW5nIHJlbmRlci5cbiAqXG4gKiBgYGB0c1xuICogZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzKSB7XG4gKiAgIGNvbnN0IGxhc3RQcm9wcyA9IHVzZVByZXZpb3VzKHByb3BzKVxuICpcbiAqICAgaWYgKGxhc3RQcm9wcy5mb28gIT09IHByb3BzLmZvbylcbiAqICAgICByZXNldFZhbHVlRnJvbVByb3BzKHByb3BzLmZvbylcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gdHJhY2tcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VQcmV2aW91cyh2YWx1ZSkge1xuICB2YXIgcmVmID0gdXNlUmVmKG51bGwpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVmLmN1cnJlbnQ7XG59IiwiaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnZG9tLWhlbHBlcnMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciByZXNvbHZlQ29udGFpbmVyUmVmID0gZnVuY3Rpb24gcmVzb2x2ZUNvbnRhaW5lclJlZihyZWYpIHtcbiAgdmFyIF9yZWY7XG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBudWxsO1xuICBpZiAocmVmID09IG51bGwpIHJldHVybiBvd25lckRvY3VtZW50KCkuYm9keTtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHJlZiA9IHJlZigpO1xuICBpZiAocmVmICYmICdjdXJyZW50JyBpbiByZWYpIHJlZiA9IHJlZi5jdXJyZW50O1xuICBpZiAoKF9yZWYgPSByZWYpID09IG51bGwgPyB2b2lkIDAgOiBfcmVmLm5vZGVUeXBlKSByZXR1cm4gcmVmIHx8IG51bGw7XG4gIHJldHVybiBudWxsO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVdhaXRGb3JET01SZWYocmVmLCBvblJlc29sdmVkKSB7XG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlc29sdmVDb250YWluZXJSZWYocmVmKTtcbiAgfSksXG4gICAgICByZXNvbHZlZFJlZiA9IF91c2VTdGF0ZVswXSxcbiAgICAgIHNldFJlZiA9IF91c2VTdGF0ZVsxXTtcblxuICBpZiAoIXJlc29sdmVkUmVmKSB7XG4gICAgdmFyIGVhcmx5UmVmID0gcmVzb2x2ZUNvbnRhaW5lclJlZihyZWYpO1xuICAgIGlmIChlYXJseVJlZikgc2V0UmVmKGVhcmx5UmVmKTtcbiAgfVxuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG9uUmVzb2x2ZWQgJiYgcmVzb2x2ZWRSZWYpIHtcbiAgICAgIG9uUmVzb2x2ZWQocmVzb2x2ZWRSZWYpO1xuICAgIH1cbiAgfSwgW29uUmVzb2x2ZWQsIHJlc29sdmVkUmVmXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5leHRSZWYgPSByZXNvbHZlQ29udGFpbmVyUmVmKHJlZik7XG5cbiAgICBpZiAobmV4dFJlZiAhPT0gcmVzb2x2ZWRSZWYpIHtcbiAgICAgIHNldFJlZihuZXh0UmVmKTtcbiAgICB9XG4gIH0sIFtyZWYsIHJlc29sdmVkUmVmXSk7XG4gIHJldHVybiByZXNvbHZlZFJlZjtcbn0iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNDI0NDFiNTYyNjM5M2YyYWFiMzMxYzllMjJlOTNiMmEuanBnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImNjZjRhMmQ5Mjg2MTczMzAxZDg3YTkyMzk5NmQxMjcyLmpwZ1wiOyIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyA/IHNlbGYuRm9ybURhdGEgOiB3aW5kb3cuRm9ybURhdGE7XG4iLCJpbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG5mdW5jdGlvbiByZWFkT25seVByb3BUeXBlKGhhbmRsZXIsIG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICghcHJvcHNbaGFuZGxlcl0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIllvdSBoYXZlIHByb3ZpZGVkIGEgYFwiICsgcHJvcE5hbWUgKyBcImAgcHJvcCB0byBgXCIgKyBuYW1lICsgXCJgIFwiICsgKFwid2l0aG91dCBhbiBgXCIgKyBoYW5kbGVyICsgXCJgIGhhbmRsZXIgcHJvcC4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gXCIpICsgKFwiSWYgdGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgXCIgKyBkZWZhdWx0S2V5KHByb3BOYW1lKSArIFwiYC4gXCIpICsgKFwiT3RoZXJ3aXNlLCBzZXQgYFwiICsgaGFuZGxlciArIFwiYC5cIikpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuY29udHJvbGxlZFByb3BUeXBlcyhjb250cm9sbGVkVmFsdWVzLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgcHJvcFR5cGVzID0ge307XG4gIE9iamVjdC5rZXlzKGNvbnRyb2xsZWRWYWx1ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAvLyBhZGQgZGVmYXVsdCBwcm9wVHlwZXMgZm9yIGZvbGtzIHRoYXQgdXNlIHJ1bnRpbWUgY2hlY2tzXG4gICAgcHJvcFR5cGVzW2RlZmF1bHRLZXkocHJvcCldID0gbm9vcDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IGNvbnRyb2xsZWRWYWx1ZXNbcHJvcF07XG4gICAgICAhKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJyAmJiBoYW5kbGVyLnRyaW0oKS5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnVW5jb250cm9sbGFibGUgLSBbJXNdOiB0aGUgcHJvcCBgJXNgIG5lZWRzIGEgdmFsaWQgaGFuZGxlciBrZXkgbmFtZSBpbiBvcmRlciB0byBtYWtlIGl0IHVuY29udHJvbGxhYmxlJywgZGlzcGxheU5hbWUsIHByb3ApIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHByb3BUeXBlc1twcm9wXSA9IHJlYWRPbmx5UHJvcFR5cGUoaGFuZGxlciwgZGlzcGxheU5hbWUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwcm9wVHlwZXM7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQcm9wKHByb3BzLCBwcm9wKSB7XG4gIHJldHVybiBwcm9wc1twcm9wXSAhPT0gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRLZXkoa2V5KSB7XG4gIHJldHVybiAnZGVmYXVsdCcgKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyKDEpO1xufVxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5BY2NlcHRSZWYoY29tcG9uZW50KSB7XG4gIHJldHVybiAhIWNvbXBvbmVudCAmJiAodHlwZW9mIGNvbXBvbmVudCAhPT0gJ2Z1bmN0aW9uJyB8fCBjb21wb25lbnQucHJvdG90eXBlICYmIGNvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcblxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTsgcmV0dXJuIHR5cGVvZiBrZXkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfVxuXG5mdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHsgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7IGlmICh0eXBlb2YgcmVzICE9PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH1cblxuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tICcuL3V0aWxzJztcblxuZnVuY3Rpb24gdXNlVW5jb250cm9sbGVkUHJvcChwcm9wVmFsdWUsIGRlZmF1bHRWYWx1ZSwgaGFuZGxlcikge1xuICB2YXIgd2FzUHJvcFJlZiA9IHVzZVJlZihwcm9wVmFsdWUgIT09IHVuZGVmaW5lZCk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKGRlZmF1bHRWYWx1ZSksXG4gICAgICBzdGF0ZVZhbHVlID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0U3RhdGUgPSBfdXNlU3RhdGVbMV07XG5cbiAgdmFyIGlzUHJvcCA9IHByb3BWYWx1ZSAhPT0gdW5kZWZpbmVkO1xuICB2YXIgd2FzUHJvcCA9IHdhc1Byb3BSZWYuY3VycmVudDtcbiAgd2FzUHJvcFJlZi5jdXJyZW50ID0gaXNQcm9wO1xuICAvKipcbiAgICogSWYgYSBwcm9wIHN3aXRjaGVzIGZyb20gY29udHJvbGxlZCB0byBVbmNvbnRyb2xsZWRcbiAgICogcmVzZXQgaXRzIHZhbHVlIHRvIHRoZSBkZWZhdWx0VmFsdWVcbiAgICovXG5cbiAgaWYgKCFpc1Byb3AgJiYgd2FzUHJvcCAmJiBzdGF0ZVZhbHVlICE9PSBkZWZhdWx0VmFsdWUpIHtcbiAgICBzZXRTdGF0ZShkZWZhdWx0VmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIFtpc1Byb3AgPyBwcm9wVmFsdWUgOiBzdGF0ZVZhbHVlLCB1c2VDYWxsYmFjayhmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoaGFuZGxlcikgaGFuZGxlci5hcHBseSh2b2lkIDAsIFt2YWx1ZV0uY29uY2F0KGFyZ3MpKTtcbiAgICBzZXRTdGF0ZSh2YWx1ZSk7XG4gIH0sIFtoYW5kbGVyXSldO1xufVxuXG5leHBvcnQgeyB1c2VVbmNvbnRyb2xsZWRQcm9wIH07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VVbmNvbnRyb2xsZWQocHJvcHMsIGNvbmZpZykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoY29uZmlnKS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgZmllbGROYW1lKSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfcmVmID0gcmVzdWx0LFxuICAgICAgICBkZWZhdWx0VmFsdWUgPSBfcmVmW1V0aWxzLmRlZmF1bHRLZXkoZmllbGROYW1lKV0sXG4gICAgICAgIHByb3BzVmFsdWUgPSBfcmVmW2ZpZWxkTmFtZV0sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbVXRpbHMuZGVmYXVsdEtleShmaWVsZE5hbWUpLCBmaWVsZE5hbWVdLm1hcChfdG9Qcm9wZXJ0eUtleSkpO1xuXG4gICAgdmFyIGhhbmRsZXJOYW1lID0gY29uZmlnW2ZpZWxkTmFtZV07XG5cbiAgICB2YXIgX3VzZVVuY29udHJvbGxlZFByb3AgPSB1c2VVbmNvbnRyb2xsZWRQcm9wKHByb3BzVmFsdWUsIGRlZmF1bHRWYWx1ZSwgcHJvcHNbaGFuZGxlck5hbWVdKSxcbiAgICAgICAgdmFsdWUgPSBfdXNlVW5jb250cm9sbGVkUHJvcFswXSxcbiAgICAgICAgaGFuZGxlciA9IF91c2VVbmNvbnRyb2xsZWRQcm9wWzFdO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCByZXN0LCAoX2V4dGVuZHMyID0ge30sIF9leHRlbmRzMltmaWVsZE5hbWVdID0gdmFsdWUsIF9leHRlbmRzMltoYW5kbGVyTmFtZV0gPSBoYW5kbGVyLCBfZXh0ZW5kczIpKTtcbiAgfSwgcHJvcHMpO1xufSIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAvLyBDYWxsIHRoaXMuY29uc3RydWN0b3IuZ0RTRlAgdG8gc3VwcG9ydCBzdWItY2xhc3Nlcy5cbiAgdmFyIHN0YXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHModGhpcy5wcm9wcywgdGhpcy5zdGF0ZSk7XG4gIGlmIChzdGF0ZSAhPT0gbnVsbCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgLy8gQ2FsbCB0aGlzLmNvbnN0cnVjdG9yLmdEU0ZQIHRvIHN1cHBvcnQgc3ViLWNsYXNzZXMuXG4gIC8vIFVzZSB0aGUgc2V0U3RhdGUoKSB1cGRhdGVyIHRvIGVuc3VyZSBzdGF0ZSBpc24ndCBzdGFsZSBpbiBjZXJ0YWluIGVkZ2UgY2FzZXMuXG4gIGZ1bmN0aW9uIHVwZGF0ZXIocHJldlN0YXRlKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpO1xuICAgIHJldHVybiBzdGF0ZSAhPT0gbnVsbCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkID8gc3RhdGUgOiBudWxsO1xuICB9XG4gIC8vIEJpbmRpbmcgXCJ0aGlzXCIgaXMgaW1wb3J0YW50IGZvciBzaGFsbG93IHJlbmRlcmVyIHN1cHBvcnQuXG4gIHRoaXMuc2V0U3RhdGUodXBkYXRlci5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICB0cnkge1xuICAgIHZhciBwcmV2UHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBwcmV2U3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHRoaXMucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgdGhpcy5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyA9IHRydWU7XG4gICAgdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdCA9IHRoaXMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoXG4gICAgICBwcmV2UHJvcHMsXG4gICAgICBwcmV2U3RhdGVcbiAgICApO1xuICB9IGZpbmFsbHkge1xuICAgIHRoaXMucHJvcHMgPSBwcmV2UHJvcHM7XG4gICAgdGhpcy5zdGF0ZSA9IHByZXZTdGF0ZTtcbiAgfVxufVxuXG4vLyBSZWFjdCBtYXkgd2FybiBhYm91dCBjV00vY1dSUC9jV1UgbWV0aG9kcyBiZWluZyBkZXByZWNhdGVkLlxuLy8gQWRkIGEgZmxhZyB0byBzdXBwcmVzcyB0aGVzZSB3YXJuaW5ncyBmb3IgdGhpcyBzcGVjaWFsIGNhc2UuXG5jb21wb25lbnRXaWxsTW91bnQuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuY29tcG9uZW50V2lsbFVwZGF0ZS5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcblxuZnVuY3Rpb24gcG9seWZpbGwoQ29tcG9uZW50KSB7XG4gIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuXG4gIGlmICghcHJvdG90eXBlIHx8ICFwcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG9ubHkgcG9seWZpbGwgY2xhc3MgY29tcG9uZW50cycpO1xuICB9XG5cbiAgaWYgKFxuICAgIHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICE9PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm4gQ29tcG9uZW50O1xuICB9XG5cbiAgLy8gSWYgbmV3IGNvbXBvbmVudCBBUElzIGFyZSBkZWZpbmVkLCBcInVuc2FmZVwiIGxpZmVjeWNsZXMgd29uJ3QgYmUgY2FsbGVkLlxuICAvLyBFcnJvciBpZiBhbnkgb2YgdGhlc2UgbGlmZWN5Y2xlcyBhcmUgcHJlc2VudCxcbiAgLy8gQmVjYXVzZSB0aGV5IHdvdWxkIHdvcmsgZGlmZmVyZW50bHkgYmV0d2VlbiBvbGRlciBhbmQgbmV3ZXIgKDE2LjMrKSB2ZXJzaW9ucyBvZiBSZWFjdC5cbiAgdmFyIGZvdW5kV2lsbE1vdW50TmFtZSA9IG51bGw7XG4gIHZhciBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gbnVsbDtcbiAgdmFyIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSBudWxsO1xuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnY29tcG9uZW50V2lsbE1vdW50JztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCc7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lID0gJ2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJztcbiAgfVxuICBpZiAoXG4gICAgZm91bmRXaWxsTW91bnROYW1lICE9PSBudWxsIHx8XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbCB8fFxuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGxcbiAgKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWU7XG4gICAgdmFyIG5ld0FwaU5hbWUgPVxuICAgICAgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKCknXG4gICAgICAgIDogJ2dldFNuYXBzaG90QmVmb3JlVXBkYXRlKCknO1xuXG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICAnVW5zYWZlIGxlZ2FjeSBsaWZlY3ljbGVzIHdpbGwgbm90IGJlIGNhbGxlZCBmb3IgY29tcG9uZW50cyB1c2luZyBuZXcgY29tcG9uZW50IEFQSXMuXFxuXFxuJyArXG4gICAgICAgIGNvbXBvbmVudE5hbWUgK1xuICAgICAgICAnIHVzZXMgJyArXG4gICAgICAgIG5ld0FwaU5hbWUgK1xuICAgICAgICAnIGJ1dCBhbHNvIGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgbGVnYWN5IGxpZmVjeWNsZXM6JyArXG4gICAgICAgIChmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsTW91bnROYW1lIDogJycpICtcbiAgICAgICAgKGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGxcbiAgICAgICAgICA/ICdcXG4gICcgKyBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lXG4gICAgICAgICAgOiAnJykgK1xuICAgICAgICAoZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxVcGRhdGVOYW1lIDogJycpICtcbiAgICAgICAgJ1xcblxcblRoZSBhYm92ZSBsaWZlY3ljbGVzIHNob3VsZCBiZSByZW1vdmVkLiBMZWFybiBtb3JlIGFib3V0IHRoaXMgd2FybmluZyBoZXJlOlxcbicgK1xuICAgICAgICAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1hc3luYy1jb21wb25lbnQtbGlmZWN5Y2xlLWhvb2tzJ1xuICAgICk7XG4gIH1cblxuICAvLyBSZWFjdCA8PSAxNi4yIGRvZXMgbm90IHN1cHBvcnQgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5cbiAgLy8gQXMgYSB3b3JrYXJvdW5kLCB1c2UgY1dNIGFuZCBjV1JQIHRvIGludm9rZSB0aGUgbmV3IHN0YXRpYyBsaWZlY3ljbGUuXG4gIC8vIE5ld2VyIHZlcnNpb25zIG9mIFJlYWN0IHdpbGwgaWdub3JlIHRoZXNlIGxpZmVjeWNsZXMgaWYgZ0RTRlAgZXhpc3RzLlxuICBpZiAodHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gY29tcG9uZW50V2lsbE1vdW50O1xuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcztcbiAgfVxuXG4gIC8vIFJlYWN0IDw9IDE2LjIgZG9lcyBub3Qgc3VwcG9ydCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZS5cbiAgLy8gQXMgYSB3b3JrYXJvdW5kLCB1c2UgY1dVIHRvIGludm9rZSB0aGUgbmV3IGxpZmVjeWNsZS5cbiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhhdCBsaWZlY3ljbGUgaWYgZ1NCVSBleGlzdHMuXG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgcG9seWZpbGwgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSBmb3IgY29tcG9uZW50cyB0aGF0IGRvIG5vdCBkZWZpbmUgY29tcG9uZW50RGlkVXBkYXRlKCkgb24gdGhlIHByb3RvdHlwZSdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBjb21wb25lbnRXaWxsVXBkYXRlO1xuXG4gICAgdmFyIGNvbXBvbmVudERpZFVwZGF0ZSA9IHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGU7XG5cbiAgICBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlUG9seWZpbGwoXG4gICAgICBwcmV2UHJvcHMsXG4gICAgICBwcmV2U3RhdGUsXG4gICAgICBtYXliZVNuYXBzaG90XG4gICAgKSB7XG4gICAgICAvLyAxNi4zKyB3aWxsIG5vdCBleGVjdXRlIG91ciB3aWxsLXVwZGF0ZSBtZXRob2Q7XG4gICAgICAvLyBJdCB3aWxsIHBhc3MgYSBzbmFwc2hvdCB2YWx1ZSB0byBkaWQtdXBkYXRlIHRob3VnaC5cbiAgICAgIC8vIE9sZGVyIHZlcnNpb25zIHdpbGwgcmVxdWlyZSBvdXIgcG9seWZpbGxlZCB3aWxsLXVwZGF0ZSB2YWx1ZS5cbiAgICAgIC8vIFdlIG5lZWQgdG8gaGFuZGxlIGJvdGggY2FzZXMsIGJ1dCBjYW4ndCBqdXN0IGNoZWNrIGZvciB0aGUgcHJlc2VuY2Ugb2YgXCJtYXliZVNuYXBzaG90XCIsXG4gICAgICAvLyBCZWNhdXNlIGZvciA8PSAxNS54IHZlcnNpb25zIHRoaXMgbWlnaHQgYmUgYSBcInByZXZDb250ZXh0XCIgb2JqZWN0LlxuICAgICAgLy8gV2UgYWxzbyBjYW4ndCBqdXN0IGNoZWNrIFwiX19yZWFjdEludGVybmFsU25hcHNob3RcIixcbiAgICAgIC8vIEJlY2F1c2UgZ2V0LXNuYXBzaG90IG1pZ2h0IHJldHVybiBhIGZhbHN5IHZhbHVlLlxuICAgICAgLy8gU28gY2hlY2sgZm9yIHRoZSBleHBsaWNpdCBfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWcgZmxhZyB0byBkZXRlcm1pbmUgYmVoYXZpb3IuXG4gICAgICB2YXIgc25hcHNob3QgPSB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZ1xuICAgICAgICA/IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RcbiAgICAgICAgOiBtYXliZVNuYXBzaG90O1xuXG4gICAgICBjb21wb25lbnREaWRVcGRhdGUuY2FsbCh0aGlzLCBwcmV2UHJvcHMsIHByZXZTdGF0ZSwgc25hcHNob3QpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gQ29tcG9uZW50O1xufVxuXG5leHBvcnQgeyBwb2x5ZmlsbCB9O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyx6PW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsQT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOlxuNjAxMTYsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQyhhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBEPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxFPXt9O2Z1bmN0aW9uIEYoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH1GLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0YucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihDKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtGLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEcoKXt9Ry5wcm90b3R5cGU9Ri5wcm90b3R5cGU7ZnVuY3Rpb24gSChhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfXZhciBJPUgucHJvdG90eXBlPW5ldyBHO0kuY29uc3RydWN0b3I9SDtsKEksRi5wcm90b3R5cGUpO0kuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGMpe3ZhciBlLGQ9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsZSkmJiFMLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGg9QXJyYXkoZiksbT0wO208ZjttKyspaFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWh9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbZV0mJihkW2VdPWZbZV0pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2csUT1bXTtmdW5jdGlvbiBSKGEsYixjLGUpe2lmKFEubGVuZ3RoKXt2YXIgZD1RLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9YztkLmNvbnRleHQ9ZTtkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6Yyxjb250ZXh0OmUsY291bnQ6MH19XG5mdW5jdGlvbiBTKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+US5sZW5ndGgmJlEucHVzaChhKX1cbmZ1bmN0aW9uIFQoYSxiLGMsZSl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGMoZSxhLFwiXCI9PT1iP1wiLlwiK1UoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGs9MDtrPGEubGVuZ3RoO2srKyl7ZD1hW2tdO3ZhciBmPWIrVShkLGspO2crPVQoZCxmLGMsZSl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1CJiZhW0JdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGs9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitVKGQsaysrKSxnKz1UKGQsZixjLGUpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWQpdGhyb3cgYz1cIlwiK2EsRXJyb3IoQygzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yz9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpjLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBWKGEsYixjKXtyZXR1cm4gbnVsbD09YT8wOlQoYSxcIlwiLGIsYyl9ZnVuY3Rpb24gVShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVyhhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBhYShhLGIsYyl7dmFyIGU9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9YKGEsZSxjLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE8oYSkmJihhPU4oYSxkKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKStjKSksZS5wdXNoKGEpKX1mdW5jdGlvbiBYKGEsYixjLGUsZCl7dmFyIGc9XCJcIjtudWxsIT1jJiYoZz0oXCJcIitjKS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpO2I9UihiLGcsZSxkKTtWKGEsYWEsYik7UyhiKX12YXIgWT17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBaKCl7dmFyIGE9WS5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKEMoMzIxKSk7cmV0dXJuIGF9XG52YXIgYmE9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6WSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7c3VzcGVuc2U6bnVsbH0sUmVhY3RDdXJyZW50T3duZXI6SixJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXTtYKGEsZSxudWxsLGIsYyk7cmV0dXJuIGV9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1SKG51bGwsbnVsbCxiLGMpO1YoYSxXLGIpO1MoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBWKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107WChhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKEMoMTQzKSk7cmV0dXJuIGF9fTtcbmV4cG9ydHMuQ29tcG9uZW50PUY7ZXhwb3J0cy5GcmFnbWVudD1yO2V4cG9ydHMuUHJvZmlsZXI9dTtleHBvcnRzLlB1cmVDb21wb25lbnQ9SDtleHBvcnRzLlN0cmljdE1vZGU9dDtleHBvcnRzLlN1c3BlbnNlPXk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1iYTtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihDKDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGc9YS5yZWYsaz1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsaz1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoaCBpbiBiKUsuY2FsbChiLGgpJiYhTC5oYXNPd25Qcm9wZXJ0eShoKSYmKGVbaF09dm9pZCAwPT09YltoXSYmdm9pZCAwIT09Zj9mW2hdOmJbaF0pfXZhciBoPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09aCllLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGgpe2Y9QXJyYXkoaCk7Zm9yKHZhciBtPTA7bTxoO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxcbmtleTpkLHJlZjpnLHByb3BzOmUsX293bmVyOmt9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnosdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjEzLjFcIjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB1KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih1KDIyNykpO1xuZnVuY3Rpb24gYmEoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIGRhPSExLGVhPW51bGwsZmE9ITEsaGE9bnVsbCxpYT17b25FcnJvcjpmdW5jdGlvbihhKXtkYT0hMDtlYT1hfX07ZnVuY3Rpb24gamEoYSxiLGMsZCxlLGYsZyxoLGspe2RhPSExO2VhPW51bGw7YmEuYXBwbHkoaWEsYXJndW1lbnRzKX1mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsayl7amEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGRhKXtpZihkYSl7dmFyIGw9ZWE7ZGE9ITE7ZWE9bnVsbH1lbHNlIHRocm93IEVycm9yKHUoMTk4KSk7ZmF8fChmYT0hMCxoYT1sKX19dmFyIGxhPW51bGwsbWE9bnVsbCxuYT1udWxsO1xuZnVuY3Rpb24gb2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PW5hKGMpO2thKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9dmFyIHBhPW51bGwscWE9e307XG5mdW5jdGlvbiByYSgpe2lmKHBhKWZvcih2YXIgYSBpbiBxYSl7dmFyIGI9cWFbYV0sYz1wYS5pbmRleE9mKGEpO2lmKCEoLTE8YykpdGhyb3cgRXJyb3IodSg5NixhKSk7aWYoIXNhW2NdKXtpZighYi5leHRyYWN0RXZlbnRzKXRocm93IEVycm9yKHUoOTcsYSkpO3NhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7aWYodGEuaGFzT3duUHJvcGVydHkoaCkpdGhyb3cgRXJyb3IodSg5OSxoKSk7dGFbaF09Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmdWEoa1tlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHVhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7aWYoIWUpdGhyb3cgRXJyb3IodSg5OCxkLGEpKTt9fX19XG5mdW5jdGlvbiB1YShhLGIsYyl7aWYodmFbYV0pdGhyb3cgRXJyb3IodSgxMDAsYSkpO3ZhW2FdPWI7d2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgc2E9W10sdGE9e30sdmE9e30sd2E9e307ZnVuY3Rpb24geGEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107aWYoIXFhLmhhc093blByb3BlcnR5KGMpfHxxYVtjXSE9PWQpe2lmKHFhW2NdKXRocm93IEVycm9yKHUoMTAyLGMpKTtxYVtjXT1kO2I9ITB9fWImJnJhKCl9dmFyIHlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSx6YT1udWxsLEFhPW51bGwsQmE9bnVsbDtcbmZ1bmN0aW9uIENhKGEpe2lmKGE9bWEoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB6YSl0aHJvdyBFcnJvcih1KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPWxhKGIpLHphKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIERhKGEpe0FhP0JhP0JhLnB1c2goYSk6QmE9W2FdOkFhPWF9ZnVuY3Rpb24gRWEoKXtpZihBYSl7dmFyIGE9QWEsYj1CYTtCYT1BYT1udWxsO0NhKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylDYShiW2FdKX19ZnVuY3Rpb24gRmEoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBHYShhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEhhKCl7fXZhciBJYT1GYSxKYT0hMSxLYT0hMTtmdW5jdGlvbiBMYSgpe2lmKG51bGwhPT1BYXx8bnVsbCE9PUJhKUhhKCksRWEoKX1cbmZ1bmN0aW9uIE1hKGEsYixjKXtpZihLYSlyZXR1cm4gYShiLGMpO0thPSEwO3RyeXtyZXR1cm4gSWEoYSxiLGMpfWZpbmFsbHl7S2E9ITEsTGEoKX19dmFyIE5hPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxPYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFBhPXt9LFFhPXt9O1xuZnVuY3Rpb24gUmEoYSl7aWYoT2EuY2FsbChRYSxhKSlyZXR1cm4hMDtpZihPYS5jYWxsKFBhLGEpKXJldHVybiExO2lmKE5hLnRlc3QoYSkpcmV0dXJuIFFhW2FdPSEwO1BhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIFNhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVGEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8U2EoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zn12YXIgQz17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDAsITEsYSxudWxsLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtDW2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDIsITEsYSxudWxsLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDMsITAsYSxudWxsLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDQsITEsYSxudWxsLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTt2YXIgVWE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBWYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxcblZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbkMueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCl9KTt2YXIgV2E9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7V2EuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwoV2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7V2EuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZ1wiKXx8KFdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnPXtzdXNwZW5zZTpudWxsfSk7XG5mdW5jdGlvbiBYYShhLGIsYyxkKXt2YXIgZT1DLmhhc093blByb3BlcnR5KGIpP0NbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChUYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/UmEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciBZYT0vXiguKilbXFxcXFxcL10vLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixaYT1FP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLCRhPUU/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixhYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxiYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxjYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxkYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxlYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGZiPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxnYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixoYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxpYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAsamI9RT9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxrYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LGxiPUU/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLG1iPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBuYihhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9bWImJmFbbWJdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24gb2IoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe2EuX3N0YXR1cz0wO3ZhciBiPWEuX2N0b3I7Yj1iKCk7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX19XG5mdW5jdGlvbiBwYihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGFiOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlICRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBjYjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBiYjpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIGhiOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIGliOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGViOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgZGI6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBnYjp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlxuXCJGb3J3YXJkUmVmXCIpO2Nhc2UgamI6cmV0dXJuIHBiKGEudHlwZSk7Y2FzZSBsYjpyZXR1cm4gcGIoYS5yZW5kZXIpO2Nhc2Uga2I6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBwYihhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBxYihhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9cGIoYS50eXBlKTtjPW51bGw7ZCYmKGM9cGIoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShZYSxcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxuZnVuY3Rpb24gcmIoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIHNiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiB0YihhKXt2YXIgYj1zYihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24geGIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPXRiKGEpKX1mdW5jdGlvbiB5YihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9c2IoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiB6YihhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiBBYihhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1yYihudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIEJiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmWGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIENiKGEsYil7QmIoYSxiKTt2YXIgYz1yYihiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9EYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZEYihhLGIudHlwZSxyYihiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEViKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBEYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gRmIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gR2IoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1GYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBIYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrcmIoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEliKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih1KDkxKSk7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gSmIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IodSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHUoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpyYihjKX19XG5mdW5jdGlvbiBLYihhLGIpe3ZhciBjPXJiKGIudmFsdWUpLGQ9cmIoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBMYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBNYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBOYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIE9iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9OYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBQYixRYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1NYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtQYj1QYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtQYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1QYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBSYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifWZ1bmN0aW9uIFNiKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFRiPXthbmltYXRpb25lbmQ6U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpTYihcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFViPXt9LFZiPXt9O1xueWEmJihWYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBUYi5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBUYi5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBUYi5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBUYi50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFdiKGEpe2lmKFViW2FdKXJldHVybiBVYlthXTtpZighVGJbYV0pcmV0dXJuIGE7dmFyIGI9VGJbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gVmIpcmV0dXJuIFViW2FdPWJbY107cmV0dXJuIGF9XG52YXIgWGI9V2IoXCJhbmltYXRpb25lbmRcIiksWWI9V2IoXCJhbmltYXRpb25pdGVyYXRpb25cIiksWmI9V2IoXCJhbmltYXRpb25zdGFydFwiKSwkYj1XYihcInRyYW5zaXRpb25lbmRcIiksYWM9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGJjPW5ldyAoXCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXApO2Z1bmN0aW9uIGNjKGEpe3ZhciBiPWJjLmdldChhKTt2b2lkIDA9PT1iJiYoYj1uZXcgTWFwLGJjLnNldChhLGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGRjKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5lZmZlY3RUYWcmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIGVjKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gZmMoYSl7aWYoZGMoYSkhPT1hKXRocm93IEVycm9yKHUoMTg4KSk7fVxuZnVuY3Rpb24gZ2MoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9ZGMoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gZmMoZSksYTtpZihmPT09ZClyZXR1cm4gZmMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih1KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHUoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IodSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBoYyhhKXthPWdjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gaWMoYSxiKXtpZihudWxsPT1iKXRocm93IEVycm9yKHUoMzApKTtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gamMoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIGtjPW51bGw7XG5mdW5jdGlvbiBsYyhhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspb2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmb2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIG1jKGEpe251bGwhPT1hJiYoa2M9aWMoa2MsYSkpO2E9a2M7a2M9bnVsbDtpZihhKXtqYyhhLGxjKTtpZihrYyl0aHJvdyBFcnJvcih1KDk1KSk7aWYoZmEpdGhyb3cgYT1oYSxmYT0hMSxoYT1udWxsLGE7fX1cbmZ1bmN0aW9uIG5jKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBvYyhhKXtpZigheWEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9dmFyIHBjPVtdO2Z1bmN0aW9uIHFjKGEpe2EudG9wTGV2ZWxUeXBlPW51bGw7YS5uYXRpdmVFdmVudD1udWxsO2EudGFyZ2V0SW5zdD1udWxsO2EuYW5jZXN0b3JzLmxlbmd0aD0wOzEwPnBjLmxlbmd0aCYmcGMucHVzaChhKX1cbmZ1bmN0aW9uIHJjKGEsYixjLGQpe2lmKHBjLmxlbmd0aCl7dmFyIGU9cGMucG9wKCk7ZS50b3BMZXZlbFR5cGU9YTtlLmV2ZW50U3lzdGVtRmxhZ3M9ZDtlLm5hdGl2ZUV2ZW50PWI7ZS50YXJnZXRJbnN0PWM7cmV0dXJuIGV9cmV0dXJue3RvcExldmVsVHlwZTphLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119fVxuZnVuY3Rpb24gc2MoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZD1jO2lmKDM9PT1kLnRhZylkPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZWxzZXtmb3IoO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb31pZighZClicmVhaztiPWMudGFnOzUhPT1iJiY2IT09Ynx8YS5hbmNlc3RvcnMucHVzaChjKTtjPXRjKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPW5jKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7dmFyIGY9YS5uYXRpdmVFdmVudCxnPWEuZXZlbnRTeXN0ZW1GbGFnczswPT09YyYmKGd8PTY0KTtmb3IodmFyIGg9bnVsbCxrPTA7azxzYS5sZW5ndGg7aysrKXt2YXIgbD1zYVtrXTtsJiYobD1sLmV4dHJhY3RFdmVudHMoZCxiLGYsZSxnKSkmJihoPVxuaWMoaCxsKSl9bWMoaCl9fWZ1bmN0aW9uIHVjKGEsYixjKXtpZighYy5oYXMoYSkpe3N3aXRjaChhKXtjYXNlIFwic2Nyb2xsXCI6dmMoYixcInNjcm9sbFwiLCEwKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOnZjKGIsXCJmb2N1c1wiLCEwKTt2YyhiLFwiYmx1clwiLCEwKTtjLnNldChcImJsdXJcIixudWxsKTtjLnNldChcImZvY3VzXCIsbnVsbCk7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOm9jKGEpJiZ2YyhiLGEsITApO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1hYy5pbmRleE9mKGEpJiZGKGEsYil9Yy5zZXQoYSxudWxsKX19XG52YXIgd2MseGMseWMsemM9ITEsQWM9W10sQmM9bnVsbCxDYz1udWxsLERjPW51bGwsRWM9bmV3IE1hcCxGYz1uZXcgTWFwLEdjPVtdLEhjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY2xvc2UgY2FuY2VsIGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIiksSWM9XCJmb2N1cyBibHVyIGRyYWdlbnRlciBkcmFnbGVhdmUgbW91c2VvdmVyIG1vdXNlb3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJvdXQgZ290cG9pbnRlcmNhcHR1cmUgbG9zdHBvaW50ZXJjYXB0dXJlXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gSmMoYSxiKXt2YXIgYz1jYyhiKTtIYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3VjKGEsYixjKX0pO0ljLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSl9ZnVuY3Rpb24gS2MoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsdG9wTGV2ZWxUeXBlOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDMyLG5hdGl2ZUV2ZW50OmUsY29udGFpbmVyOmR9fVxuZnVuY3Rpb24gTGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpCYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Q2M9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6RGM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOkVjLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOkZjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fWZ1bmN0aW9uIE1jKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9S2MoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9TmMoYiksbnVsbCE9PWImJnhjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIE9jKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c1wiOnJldHVybiBCYz1NYyhCYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gQ2M9TWMoQ2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIERjPU1jKERjLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7RWMuc2V0KGYsTWMoRWMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLEZjLnNldChmLE1jKEZjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFBjKGEpe3ZhciBiPXRjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9ZGMoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9ZWMoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe3ljKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1mdW5jdGlvbiBRYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7dmFyIGI9UmMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEuY29udGFpbmVyLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1iKXt2YXIgYz1OYyhiKTtudWxsIT09YyYmeGMoYyk7YS5ibG9ja2VkT249YjtyZXR1cm4hMX1yZXR1cm4hMH1cbmZ1bmN0aW9uIFNjKGEsYixjKXtRYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gVGMoKXtmb3IoemM9ITE7MDxBYy5sZW5ndGg7KXt2YXIgYT1BY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9TmMoYS5ibG9ja2VkT24pO251bGwhPT1hJiZ3YyhhKTticmVha312YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7bnVsbCE9PWI/YS5ibG9ja2VkT249YjpBYy5zaGlmdCgpfW51bGwhPT1CYyYmUWMoQmMpJiYoQmM9bnVsbCk7bnVsbCE9PUNjJiZRYyhDYykmJihDYz1udWxsKTtudWxsIT09RGMmJlFjKERjKSYmKERjPW51bGwpO0VjLmZvckVhY2goU2MpO0ZjLmZvckVhY2goU2MpfWZ1bmN0aW9uIFVjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCx6Y3x8KHpjPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFRjKSkpfVxuZnVuY3Rpb24gVmMoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gVWMoYixhKX1pZigwPEFjLmxlbmd0aCl7VWMoQWNbMF0sYSk7Zm9yKHZhciBjPTE7YzxBYy5sZW5ndGg7YysrKXt2YXIgZD1BY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUJjJiZVYyhCYyxhKTtudWxsIT09Q2MmJlVjKENjLGEpO251bGwhPT1EYyYmVWMoRGMsYSk7RWMuZm9yRWFjaChiKTtGYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxHYy5sZW5ndGg7YysrKWQ9R2NbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPEdjLmxlbmd0aCYmKGM9R2NbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspUGMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZHYy5zaGlmdCgpfVxudmFyIFdjPXt9LFljPW5ldyBNYXAsWmM9bmV3IE1hcCwkYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixYYixcImFuaW1hdGlvbkVuZFwiLFliLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsWmIsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXG5cInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIiwkYixcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gYWQoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV0sZj1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtmPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpmLGNhcHR1cmVkOmYrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbZF0sZXZlbnRQcmlvcml0eTpifTtaYy5zZXQoZCxiKTtZYy5zZXQoZCxmKTtXY1tlXT1mfX1cbmFkKFwiYmx1ciBibHVyIGNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzIGZvY3VzIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksMCk7XG5hZChcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTthZCgkYywyKTtmb3IodmFyIGJkPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxjZD0wO2NkPGJkLmxlbmd0aDtjZCsrKVpjLnNldChiZFtjZF0sMCk7XG52YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBGKGEsYil7dmMoYixhLCExKX1mdW5jdGlvbiB2YyhhLGIsYyl7dmFyIGQ9WmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1kPzI6ZCl7Y2FzZSAwOmQ9Z2QuYmluZChudWxsLGIsMSxhKTticmVhaztjYXNlIDE6ZD1oZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2RlZmF1bHQ6ZD1pZC5iaW5kKG51bGwsYiwxLGEpfWM/YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMCk6YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMSl9ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7SmF8fEhhKCk7dmFyIGU9aWQsZj1KYTtKYT0hMDt0cnl7R2EoZSxhLGIsYyxkKX1maW5hbGx5eyhKYT1mKXx8TGEoKX19ZnVuY3Rpb24gaGQoYSxiLGMsZCl7ZWQoZGQsaWQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGlkKGEsYixjLGQpe2lmKGZkKWlmKDA8QWMubGVuZ3RoJiYtMTxIYy5pbmRleE9mKGEpKWE9S2MobnVsbCxhLGIsYyxkKSxBYy5wdXNoKGEpO2Vsc2V7dmFyIGU9UmMoYSxiLGMsZCk7aWYobnVsbD09PWUpTGMoYSxkKTtlbHNlIGlmKC0xPEhjLmluZGV4T2YoYSkpYT1LYyhlLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZSBpZighT2MoZSxhLGIsYyxkKSl7TGMoYSxkKTthPXJjKGEsZCxudWxsLGIpO3RyeXtNYShzYyxhKX1maW5hbGx5e3FjKGEpfX19fVxuZnVuY3Rpb24gUmMoYSxiLGMsZCl7Yz1uYyhkKTtjPXRjKGMpO2lmKG51bGwhPT1jKXt2YXIgZT1kYyhjKTtpZihudWxsPT09ZSljPW51bGw7ZWxzZXt2YXIgZj1lLnRhZztpZigxMz09PWYpe2M9ZWMoZSk7aWYobnVsbCE9PWMpcmV0dXJuIGM7Yz1udWxsfWVsc2UgaWYoMz09PWYpe2lmKGUuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1lLnRhZz9lLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7Yz1udWxsfWVsc2UgZSE9PWMmJihjPW51bGwpfX1hPXJjKGEsZCxjLGIpO3RyeXtNYShzYyxhKX1maW5hbGx5e3FjKGEpfXJldHVybiBudWxsfVxudmFyIGpkPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LGtkPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhqZCkuZm9yRWFjaChmdW5jdGlvbihhKXtrZC5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO2pkW2JdPWpkW2FdfSl9KTtmdW5jdGlvbiBsZChhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8amQuaGFzT3duUHJvcGVydHkoYSkmJmpkW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIG1kKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPWxkKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIG5kPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBvZChhLGIpe2lmKGIpe2lmKG5kW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSgxMzcsYSxcIlwiKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih1KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih1KDYyLFwiXCIpKTt9fVxuZnVuY3Rpb24gcGQoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBxZD1NYi5odG1sO2Z1bmN0aW9uIHJkKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPWNjKGEpO2I9d2FbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspdWMoYltkXSxhLGMpfWZ1bmN0aW9uIHNkKCl7fVxuZnVuY3Rpb24gdGQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIHVkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1mdW5jdGlvbiB2ZChhLGIpe3ZhciBjPXVkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPXVkKGMpfX1cbmZ1bmN0aW9uIHdkKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/d2QoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfWZ1bmN0aW9uIHhkKCl7Zm9yKHZhciBhPXdpbmRvdyxiPXRkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPXRkKGEuZG9jdW1lbnQpfXJldHVybiBifVxuZnVuY3Rpb24geWQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX12YXIgemQ9XCIkXCIsQWQ9XCIvJFwiLEJkPVwiJD9cIixDZD1cIiQhXCIsRGQ9bnVsbCxFZD1udWxsO2Z1bmN0aW9uIEZkKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIEdkKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgSGQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsSWQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIEpkKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfVxuZnVuY3Rpb24gS2QoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09emR8fGM9PT1DZHx8Yz09PUJkKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZSBjPT09QWQmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBMZD1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxNZD1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0xkLE5kPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrTGQsT2Q9XCJfX3JlYWN0Q29udGFpbmVyZSRcIitMZDtcbmZ1bmN0aW9uIHRjKGEpe3ZhciBiPWFbTWRdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW09kXXx8Y1tNZF0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1LZChhKTtudWxsIT09YTspe2lmKGM9YVtNZF0pcmV0dXJuIGM7YT1LZChhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTmMoYSl7YT1hW01kXXx8YVtPZF07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIFBkKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih1KDMzKSk7fWZ1bmN0aW9uIFFkKGEpe3JldHVybiBhW05kXXx8bnVsbH1cbmZ1bmN0aW9uIFJkKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBTZChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPWxhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyBFcnJvcih1KDIzMSxcbmIsdHlwZW9mIGMpKTtyZXR1cm4gY31mdW5jdGlvbiBUZChhLGIsYyl7aWYoYj1TZChhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPWljKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPWljKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIFVkKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9UmQoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KVRkKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspVGQoY1tiXSxcImJ1YmJsZWRcIixhKX19XG5mdW5jdGlvbiBWZChhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1TZChhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFdkKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmVmQoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIFhkKGEpe2pjKGEsVWQpfXZhciBZZD1udWxsLFpkPW51bGwsJGQ9bnVsbDtcbmZ1bmN0aW9uIGFlKCl7aWYoJGQpcmV0dXJuICRkO3ZhciBhLGI9WmQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gJGQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBiZSgpe3JldHVybiEwfWZ1bmN0aW9uIGNlKCl7cmV0dXJuITF9XG5mdW5jdGlvbiBHKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9iZTpjZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWNlO3JldHVybiB0aGlzfVxubihHLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWJlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWJlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PWJlfSxpc1BlcnNpc3RlbnQ6Y2UsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Y2U7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTtHLkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbkcuZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO24oZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPW4oe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7ZGUoYyk7cmV0dXJuIGN9O2RlKEcpO2Z1bmN0aW9uIGVlKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfVxuZnVuY3Rpb24gZmUoYSl7aWYoIShhIGluc3RhbmNlb2YgdGhpcykpdGhyb3cgRXJyb3IodSgyNzkpKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gZGUoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9ZWU7YS5yZWxlYXNlPWZlfXZhciBnZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaGU9Ry5leHRlbmQoe2RhdGE6bnVsbH0pLGllPVs5LDEzLDI3LDMyXSxqZT15YSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csa2U9bnVsbDt5YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoa2U9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBsZT15YSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWtlLG1lPXlhJiYoIWplfHxrZSYmODxrZSYmMTE+PWtlKSxuZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxvZT17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxwZT0hMTtcbmZ1bmN0aW9uIHFlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09aWUuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiByZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBzZT0hMTtmdW5jdGlvbiB0ZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gcmUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3BlPSEwO3JldHVybiBuZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1uZSYmcGU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gdWUoYSxiKXtpZihzZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhamUmJnFlKGEsYik/KGE9YWUoKSwkZD1aZD1ZZD1udWxsLHNlPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBtZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgdmU9e2V2ZW50VHlwZXM6b2UsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZTtpZihqZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgZj1vZS5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Zj1vZS5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmY9b2UuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1mPXZvaWQgMH1lbHNlIHNlP3FlKGEsYykmJihmPW9lLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGY9b2UuY29tcG9zaXRpb25TdGFydCk7Zj8obWUmJlwia29cIiE9PWMubG9jYWxlJiYoc2V8fGYhPT1vZS5jb21wb3NpdGlvblN0YXJ0P2Y9PT1vZS5jb21wb3NpdGlvbkVuZCYmc2UmJihlPWFlKCkpOihZZD1kLFpkPVwidmFsdWVcImluIFlkP1lkLnZhbHVlOllkLnRleHRDb250ZW50LHNlPSEwKSksZj1nZS5nZXRQb29sZWQoZixcbmIsYyxkKSxlP2YuZGF0YT1lOihlPXJlKGMpLG51bGwhPT1lJiYoZi5kYXRhPWUpKSxYZChmKSxlPWYpOmU9bnVsbDsoYT1sZT90ZShhLGMpOnVlKGEsYykpPyhiPWhlLmdldFBvb2xlZChvZS5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsWGQoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWU/YjpudWxsPT09Yj9lOltlLGJdfX0sd2U9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24geGUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISF3ZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG52YXIgeWU9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gemUoYSxiLGMpe2E9Ry5nZXRQb29sZWQoeWUuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtEYShjKTtYZChhKTtyZXR1cm4gYX12YXIgQWU9bnVsbCxCZT1udWxsO2Z1bmN0aW9uIENlKGEpe21jKGEpfWZ1bmN0aW9uIERlKGEpe3ZhciBiPVBkKGEpO2lmKHliKGIpKXJldHVybiBhfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIEZlPSExO3lhJiYoRmU9b2MoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7XG5mdW5jdGlvbiBHZSgpe0FlJiYoQWUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsSGUpLEJlPUFlPW51bGwpfWZ1bmN0aW9uIEhlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZEZShCZSkpaWYoYT16ZShCZSxhLG5jKGEpKSxKYSltYyhhKTtlbHNle0phPSEwO3RyeXtGYShDZSxhKX1maW5hbGx5e0phPSExLExhKCl9fX1mdW5jdGlvbiBJZShhLGIsYyl7XCJmb2N1c1wiPT09YT8oR2UoKSxBZT1iLEJlPWMsQWUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsSGUpKTpcImJsdXJcIj09PWEmJkdlKCl9ZnVuY3Rpb24gSmUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gRGUoQmUpfWZ1bmN0aW9uIEtlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gRGUoYil9ZnVuY3Rpb24gTGUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gRGUoYil9XG52YXIgTWU9e2V2ZW50VHlwZXM6eWUsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpGZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/UGQoYik6d2luZG93LGY9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1mfHxcImlucHV0XCI9PT1mJiZcImZpbGVcIj09PWUudHlwZSl2YXIgZz1FZTtlbHNlIGlmKHhlKGUpKWlmKEZlKWc9TGU7ZWxzZXtnPUplO3ZhciBoPUllfWVsc2UoZj1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09Zi50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZz1LZSk7aWYoZyYmKGc9ZyhhLGIpKSlyZXR1cm4gemUoZyxjLGQpO2gmJmgoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZEYihlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxOZT1HLmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksXG5PZT17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGUoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZVthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFFlKCl7cmV0dXJuIFBlfVxudmFyIFJlPTAsU2U9MCxUZT0hMSxVZT0hMSxWZT1OZS5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9UmU7UmU9YS5zY3JlZW5YO3JldHVybiBUZT9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KFRlPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9U2U7U2U9YS5zY3JlZW5ZO3JldHVybiBVZT9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KFVlPSEwLDApfX0pLFdlPVZlLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxYZT17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sWWU9e2V2ZW50VHlwZXM6WGUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGc9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGYmJjA9PT0oZSYzMikmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZyYmIWYpcmV0dXJuIG51bGw7Zj1kLndpbmRvdz09PWQ/ZDooZj1kLm93bmVyRG9jdW1lbnQpP2YuZGVmYXVsdFZpZXd8fGYucGFyZW50V2luZG93OndpbmRvdztpZihnKXtpZihnPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT90YyhiKTpudWxsLG51bGwhPT1iKXt2YXIgaD1kYyhiKTtpZihiIT09aHx8NSE9PWIudGFnJiY2IT09Yi50YWcpYj1udWxsfX1lbHNlIGc9bnVsbDtpZihnPT09YilyZXR1cm4gbnVsbDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09XG5hKXt2YXIgaz1WZTt2YXIgbD1YZS5tb3VzZUxlYXZlO3ZhciBtPVhlLm1vdXNlRW50ZXI7dmFyIHA9XCJtb3VzZVwifWVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWs9V2UsbD1YZS5wb2ludGVyTGVhdmUsbT1YZS5wb2ludGVyRW50ZXIscD1cInBvaW50ZXJcIjthPW51bGw9PWc/ZjpQZChnKTtmPW51bGw9PWI/ZjpQZChiKTtsPWsuZ2V0UG9vbGVkKGwsZyxjLGQpO2wudHlwZT1wK1wibGVhdmVcIjtsLnRhcmdldD1hO2wucmVsYXRlZFRhcmdldD1mO2M9ay5nZXRQb29sZWQobSxiLGMsZCk7Yy50eXBlPXArXCJlbnRlclwiO2MudGFyZ2V0PWY7Yy5yZWxhdGVkVGFyZ2V0PWE7ZD1nO3A9YjtpZihkJiZwKWE6e2s9ZDttPXA7Zz0wO2ZvcihhPWs7YTthPVJkKGEpKWcrKzthPTA7Zm9yKGI9bTtiO2I9UmQoYikpYSsrO2Zvcig7MDxnLWE7KWs9UmQoayksZy0tO2Zvcig7MDxhLWc7KW09UmQobSksYS0tO2Zvcig7Zy0tOyl7aWYoaz09PW18fGs9PT1tLmFsdGVybmF0ZSlicmVhayBhO1xuaz1SZChrKTttPVJkKG0pfWs9bnVsbH1lbHNlIGs9bnVsbDttPWs7Zm9yKGs9W107ZCYmZCE9PW07KXtnPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09bSlicmVhaztrLnB1c2goZCk7ZD1SZChkKX1mb3IoZD1bXTtwJiZwIT09bTspe2c9cC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2QucHVzaChwKTtwPVJkKHApfWZvcihwPTA7cDxrLmxlbmd0aDtwKyspVmQoa1twXSxcImJ1YmJsZWRcIixsKTtmb3IocD1kLmxlbmd0aDswPHAtLTspVmQoZFtwXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuIDA9PT0oZSY2NCk/W2xdOltsLGNdfX07ZnVuY3Rpb24gWmUoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciAkZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpaZSxhZj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gYmYoYSxiKXtpZigkZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWFmLmNhbGwoYixjW2RdKXx8ISRlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9XG52YXIgY2Y9eWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxkZj17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sZWY9bnVsbCxmZj1udWxsLGdmPW51bGwsaGY9ITE7XG5mdW5jdGlvbiBqZihhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKGhmfHxudWxsPT1lZnx8ZWYhPT10ZChjKSlyZXR1cm4gbnVsbDtjPWVmO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJnlkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIGdmJiZiZihnZixjKT9udWxsOihnZj1jLGE9Ry5nZXRQb29sZWQoZGYuc2VsZWN0LGZmLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9ZWYsWGQoYSksYSl9XG52YXIga2Y9e2V2ZW50VHlwZXM6ZGYsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUsZil7ZT1mfHwoZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQpO2lmKCEoZj0hZSkpe2E6e2U9Y2MoZSk7Zj13YS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKylpZighZS5oYXMoZltnXSkpe2U9ITE7YnJlYWsgYX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/UGQoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZih4ZShlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSllZj1lLGZmPWIsZ2Y9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOmdmPWZmPWVmPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOmhmPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gaGY9ITEsamYoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoY2YpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBqZihjLGQpfXJldHVybiBudWxsfX0sbGY9Ry5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLG1mPUcuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksbmY9TmUuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiBvZihhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBwZj17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0scWY9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LHJmPU5lLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1wZlthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZihhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/cWZbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29mKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29mKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksc2Y9VmUuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHRmPU5lLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlfSksdWY9Ry5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksdmY9VmUuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx3Zj17ZXZlbnRUeXBlczpXYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVljLmdldChhKTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9mKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT1yZjticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9bmY7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1cblZlO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9c2Y7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT10ZjticmVhaztjYXNlIFhiOmNhc2UgWWI6Y2FzZSBaYjphPWxmO2JyZWFrO2Nhc2UgJGI6YT11ZjticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1OZTticmVhaztjYXNlIFwid2hlZWxcIjphPXZmO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9bWY7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1cbldlO2JyZWFrO2RlZmF1bHQ6YT1HfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7WGQoYik7cmV0dXJuIGJ9fTtpZihwYSl0aHJvdyBFcnJvcih1KDEwMSkpO3BhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3JhKCk7dmFyIHhmPU5jO2xhPVFkO21hPXhmO25hPVBkO3hhKHtTaW1wbGVFdmVudFBsdWdpbjp3ZixFbnRlckxlYXZlRXZlbnRQbHVnaW46WWUsQ2hhbmdlRXZlbnRQbHVnaW46TWUsU2VsZWN0RXZlbnRQbHVnaW46a2YsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjp2ZX0pO3ZhciB5Zj1bXSx6Zj0tMTtmdW5jdGlvbiBIKGEpezA+emZ8fChhLmN1cnJlbnQ9eWZbemZdLHlmW3pmXT1udWxsLHpmLS0pfVxuZnVuY3Rpb24gSShhLGIpe3pmKys7eWZbemZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQWY9e30sSj17Y3VycmVudDpBZn0sSz17Y3VycmVudDohMX0sQmY9QWY7ZnVuY3Rpb24gQ2YoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBBZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBMKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9XG5mdW5jdGlvbiBEZigpe0goSyk7SChKKX1mdW5jdGlvbiBFZihhLGIsYyl7aWYoSi5jdXJyZW50IT09QWYpdGhyb3cgRXJyb3IodSgxNjgpKTtJKEosYik7SShLLGMpfWZ1bmN0aW9uIEZmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IodSgxMDgscGIoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbih7fSxjLHt9LGQpfWZ1bmN0aW9uIEdmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxBZjtCZj1KLmN1cnJlbnQ7SShKLGEpO0koSyxLLmN1cnJlbnQpO3JldHVybiEwfVxuZnVuY3Rpb24gSGYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHUoMTY5KSk7Yz8oYT1GZihhLGIsQmYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKEspLEgoSiksSShKLGEpKTpIKEspO0koSyxjKX1cbnZhciBJZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxKZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssS2Y9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxMZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxNZj1yLnVuc3RhYmxlX25vdyxOZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLE9mPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksUGY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxRZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFJmPXIudW5zdGFibGVfTG93UHJpb3JpdHksU2Y9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksVGY9e30sVWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxWZj12b2lkIDAhPT1MZj9MZjpmdW5jdGlvbigpe30sV2Y9bnVsbCxYZj1udWxsLFlmPSExLFpmPU1mKCksJGY9MUU0PlpmP01mOmZ1bmN0aW9uKCl7cmV0dXJuIE1mKCktWmZ9O1xuZnVuY3Rpb24gYWcoKXtzd2l0Y2goTmYoKSl7Y2FzZSBPZjpyZXR1cm4gOTk7Y2FzZSBQZjpyZXR1cm4gOTg7Y2FzZSBRZjpyZXR1cm4gOTc7Y2FzZSBSZjpyZXR1cm4gOTY7Y2FzZSBTZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gYmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIE9mO2Nhc2UgOTg6cmV0dXJuIFBmO2Nhc2UgOTc6cmV0dXJuIFFmO2Nhc2UgOTY6cmV0dXJuIFJmO2Nhc2UgOTU6cmV0dXJuIFNmO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGNnKGEsYil7YT1iZyhhKTtyZXR1cm4gSWYoYSxiKX1mdW5jdGlvbiBkZyhhLGIsYyl7YT1iZyhhKTtyZXR1cm4gSmYoYSxiLGMpfWZ1bmN0aW9uIGVnKGEpe251bGw9PT1XZj8oV2Y9W2FdLFhmPUpmKE9mLGZnKSk6V2YucHVzaChhKTtyZXR1cm4gVGZ9ZnVuY3Rpb24gZ2coKXtpZihudWxsIT09WGYpe3ZhciBhPVhmO1hmPW51bGw7S2YoYSl9ZmcoKX1cbmZ1bmN0aW9uIGZnKCl7aWYoIVlmJiZudWxsIT09V2Ype1lmPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPVdmO2NnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTtXZj1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1XZiYmKFdmPVdmLnNsaWNlKGErMSkpLEpmKE9mLGdnKSxjO31maW5hbGx5e1lmPSExfX19ZnVuY3Rpb24gaGcoYSxiLGMpe2MvPTEwO3JldHVybiAxMDczNzQxODIxLSgoKDEwNzM3NDE4MjEtYStiLzEwKS9jfDApKzEpKmN9ZnVuY3Rpb24gaWcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9dmFyIGpnPXtjdXJyZW50Om51bGx9LGtnPW51bGwsbGc9bnVsbCxtZz1udWxsO2Z1bmN0aW9uIG5nKCl7bWc9bGc9a2c9bnVsbH1cbmZ1bmN0aW9uIG9nKGEpe3ZhciBiPWpnLmN1cnJlbnQ7SChqZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBwZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZihhLmNoaWxkRXhwaXJhdGlvblRpbWU8YilhLmNoaWxkRXhwaXJhdGlvblRpbWU9YixudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7ZWxzZSBpZihudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYy5jaGlsZEV4cGlyYXRpb25UaW1lPWI7ZWxzZSBicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBxZyhhLGIpe2tnPWE7bWc9bGc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJihhLmV4cGlyYXRpb25UaW1lPj1iJiYocmc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gc2coYSxiKXtpZihtZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpbWc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PWxnKXtpZihudWxsPT09a2cpdGhyb3cgRXJyb3IodSgzMDgpKTtsZz1iO2tnLmRlcGVuZGVuY2llcz17ZXhwaXJhdGlvblRpbWU6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2UgbGc9bGcubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHRnPSExO2Z1bmN0aW9uIHVnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsYmFzZVF1ZXVlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB2ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxiYXNlUXVldWU6YS5iYXNlUXVldWUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gd2coYSxiKXthPXtleHBpcmF0aW9uVGltZTphLHN1c3BlbnNlQ29uZmlnOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfTtyZXR1cm4gYS5uZXh0PWF9ZnVuY3Rpb24geGcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiB5ZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZ2ZyhjLGEpO2E9YS51cGRhdGVRdWV1ZTtjPWEuYmFzZVF1ZXVlO251bGw9PT1jPyhhLmJhc2VRdWV1ZT1iLm5leHQ9YixiLm5leHQ9Yik6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpfVxuZnVuY3Rpb24gemcoYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt0Zz0hMTt2YXIgZj1lLmJhc2VRdWV1ZSxnPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWcpe2lmKG51bGwhPT1mKXt2YXIgaD1mLm5leHQ7Zi5uZXh0PWcubmV4dDtnLm5leHQ9aH1mPWc7ZS5zaGFyZWQucGVuZGluZz1udWxsO2g9YS5hbHRlcm5hdGU7bnVsbCE9PWgmJihoPWgudXBkYXRlUXVldWUsbnVsbCE9PWgmJihoLmJhc2VRdWV1ZT1nKSl9aWYobnVsbCE9PWYpe2g9Zi5uZXh0O3ZhciBrPWUuYmFzZVN0YXRlLGw9MCxtPW51bGwscD1udWxsLHg9bnVsbDtpZihudWxsIT09aCl7dmFyIHo9aDtkb3tnPXouZXhwaXJhdGlvblRpbWU7aWYoZzxkKXt2YXIgY2E9e2V4cGlyYXRpb25UaW1lOnouZXhwaXJhdGlvblRpbWUsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT14PyhwPXg9XG5jYSxtPWspOng9eC5uZXh0PWNhO2c+bCYmKGw9Zyl9ZWxzZXtudWxsIT09eCYmKHg9eC5uZXh0PXtleHBpcmF0aW9uVGltZToxMDczNzQxODIzLHN1c3BlbnNlQ29uZmlnOnouc3VzcGVuc2VDb25maWcsdGFnOnoudGFnLHBheWxvYWQ6ei5wYXlsb2FkLGNhbGxiYWNrOnouY2FsbGJhY2ssbmV4dDpudWxsfSk7QWcoZyx6LnN1c3BlbnNlQ29uZmlnKTthOnt2YXIgRD1hLHQ9ejtnPWI7Y2E9Yztzd2l0Y2godC50YWcpe2Nhc2UgMTpEPXQucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRCl7az1ELmNhbGwoY2EsayxnKTticmVhayBhfWs9RDticmVhayBhO2Nhc2UgMzpELmVmZmVjdFRhZz1ELmVmZmVjdFRhZyYtNDA5N3w2NDtjYXNlIDA6RD10LnBheWxvYWQ7Zz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgRD9ELmNhbGwoY2EsayxnKTpEO2lmKG51bGw9PT1nfHx2b2lkIDA9PT1nKWJyZWFrIGE7az1uKHt9LGssZyk7YnJlYWsgYTtjYXNlIDI6dGc9ITB9fW51bGwhPT16LmNhbGxiYWNrJiZcbihhLmVmZmVjdFRhZ3w9MzIsZz1lLmVmZmVjdHMsbnVsbD09PWc/ZS5lZmZlY3RzPVt6XTpnLnB1c2goeikpfXo9ei5uZXh0O2lmKG51bGw9PT16fHx6PT09aClpZihnPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWcpYnJlYWs7ZWxzZSB6PWYubmV4dD1nLm5leHQsZy5uZXh0PWgsZS5iYXNlUXVldWU9Zj1nLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKX1udWxsPT09eD9tPWs6eC5uZXh0PXA7ZS5iYXNlU3RhdGU9bTtlLmJhc2VRdWV1ZT14O0JnKGwpO2EuZXhwaXJhdGlvblRpbWU9bDthLm1lbW9pemVkU3RhdGU9a319XG5mdW5jdGlvbiBDZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWU7ZT1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkKXRocm93IEVycm9yKHUoMTkxLGQpKTtkLmNhbGwoZSl9fX12YXIgRGc9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsRWc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24gRmcoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5leHBpcmF0aW9uVGltZSYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEpnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT9kYyhhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9d2coZCxlKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO3hnKGEsZSk7SWcoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9R2coKSxkPURnLnN1c3BlbnNlO1xuYz1IZyhjLGEsZCk7ZD13ZyhjLGQpO2QudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO3hnKGEsZCk7SWcoYSxjKX19O2Z1bmN0aW9uIEtnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWJmKGMsZCl8fCFiZihlLGYpOiEwfVxuZnVuY3Rpb24gTGcoYSxiLGMpe3ZhciBkPSExLGU9QWY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9c2coZik6KGU9TChiKT9CZjpKLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9DZihhLGUpOkFmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9Smc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTWcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJkpnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1FZzt1ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXNnKGYpOihmPUwoYik/QmY6Si5jdXJyZW50LGUuY29udGV4dD1DZihhLGYpKTt6ZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoRmcoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksemcoYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBPZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUGcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHUoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUVnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHUoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHUoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBRZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih1KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKSk7fVxuZnVuY3Rpb24gUmcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9U2coYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VGcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UGcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVVnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVBnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9VmcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVdnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VGcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGM9VWcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UGcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlICRhOnJldHVybiBiPVZnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihPZyhiKXx8XG5uYihiKSlyZXR1cm4gYj1XZyhiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtRZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1hYj9tKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgJGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoT2coYyl8fG5iKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtRZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHooYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09YWI/bShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgJGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoT2coZCl8fG5iKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtRZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIGNhKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCxtPWcseT1nPTAsQT1udWxsO251bGwhPT1tJiZ5PGgubGVuZ3RoO3krKyl7bS5pbmRleD55PyhBPW0sbT1udWxsKTpBPW0uc2libGluZzt2YXIgcT14KGUsbSxoW3ldLGspO2lmKG51bGw9PT1xKXtudWxsPT09bSYmKG09QSk7YnJlYWt9YSYmXG5tJiZudWxsPT09cS5hbHRlcm5hdGUmJmIoZSxtKTtnPWYocSxnLHkpO251bGw9PT10P2w9cTp0LnNpYmxpbmc9cTt0PXE7bT1BfWlmKHk9PT1oLmxlbmd0aClyZXR1cm4gYyhlLG0pLGw7aWYobnVsbD09PW0pe2Zvcig7eTxoLmxlbmd0aDt5KyspbT1wKGUsaFt5XSxrKSxudWxsIT09bSYmKGc9ZihtLGcseSksbnVsbD09PXQ/bD1tOnQuc2libGluZz1tLHQ9bSk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pO3k8aC5sZW5ndGg7eSsrKUE9eihtLGUseSxoW3ldLGspLG51bGwhPT1BJiYoYSYmbnVsbCE9PUEuYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09QS5rZXk/eTpBLmtleSksZz1mKEEsZyx5KSxudWxsPT09dD9sPUE6dC5zaWJsaW5nPUEsdD1BKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIEQoZSxnLGgsbCl7dmFyIGs9bmIoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGspdGhyb3cgRXJyb3IodSgxNTApKTtoPWsuY2FsbChoKTtcbmlmKG51bGw9PWgpdGhyb3cgRXJyb3IodSgxNTEpKTtmb3IodmFyIG09az1udWxsLHQ9Zyx5PWc9MCxBPW51bGwscT1oLm5leHQoKTtudWxsIT09dCYmIXEuZG9uZTt5KysscT1oLm5leHQoKSl7dC5pbmRleD55PyhBPXQsdD1udWxsKTpBPXQuc2libGluZzt2YXIgRD14KGUsdCxxLnZhbHVlLGwpO2lmKG51bGw9PT1EKXtudWxsPT09dCYmKHQ9QSk7YnJlYWt9YSYmdCYmbnVsbD09PUQuYWx0ZXJuYXRlJiZiKGUsdCk7Zz1mKEQsZyx5KTtudWxsPT09bT9rPUQ6bS5zaWJsaW5nPUQ7bT1EO3Q9QX1pZihxLmRvbmUpcmV0dXJuIGMoZSx0KSxrO2lmKG51bGw9PT10KXtmb3IoOyFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpcT1wKGUscS52YWx1ZSxsKSxudWxsIT09cSYmKGc9ZihxLGcseSksbnVsbD09PW0/az1xOm0uc2libGluZz1xLG09cSk7cmV0dXJuIGt9Zm9yKHQ9ZChlLHQpOyFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpcT16KHQsZSx5LHEudmFsdWUsbCksbnVsbCE9PXEmJihhJiZudWxsIT09XG5xLmFsdGVybmF0ZSYmdC5kZWxldGUobnVsbD09PXEua2V5P3k6cS5rZXkpLGc9ZihxLGcseSksbnVsbD09PW0/az1xOm0uc2libGluZz1xLG09cSk7YSYmdC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4ga31yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09YWImJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgWmE6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT1hYil7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxcbmsuc2libGluZyk7ZD1lKGssZi5wcm9wcyk7ZC5yZWY9UGcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1hYj8oZD1XZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VWcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UGcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlICRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPVxuZC5zaWJsaW5nfWQ9VmcoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VGcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoT2coZikpcmV0dXJuIGNhKGEsZCxmLGgpO2lmKG5iKGYpKXJldHVybiBEKGEsZCxmLGgpO2wmJlFnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6dGhyb3cgYT1hLnR5cGUsRXJyb3IodSgxNTIsYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBYZz1SZyghMCksWWc9UmcoITEpLFpnPXt9LCRnPXtjdXJyZW50OlpnfSxhaD17Y3VycmVudDpaZ30sYmg9e2N1cnJlbnQ6Wmd9O1xuZnVuY3Rpb24gY2goYSl7aWYoYT09PVpnKXRocm93IEVycm9yKHUoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZGgoYSxiKXtJKGJoLGIpO0koYWgsYSk7SSgkZyxaZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpPYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9T2IoYixhKX1IKCRnKTtJKCRnLGIpfWZ1bmN0aW9uIGVoKCl7SCgkZyk7SChhaCk7SChiaCl9ZnVuY3Rpb24gZmgoYSl7Y2goYmguY3VycmVudCk7dmFyIGI9Y2goJGcuY3VycmVudCk7dmFyIGM9T2IoYixhLnR5cGUpO2IhPT1jJiYoSShhaCxhKSxJKCRnLGMpKX1mdW5jdGlvbiBnaChhKXthaC5jdXJyZW50PT09YSYmKEgoJGcpLEgoYWgpKX12YXIgTT17Y3VycmVudDowfTtcbmZ1bmN0aW9uIGhoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fGMuZGF0YT09PUJkfHxjLmRhdGE9PT1DZCkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH1mdW5jdGlvbiBpaChhLGIpe3JldHVybntyZXNwb25kZXI6YSxwcm9wczpifX1cbnZhciBqaD1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGtoPVdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGxoPTAsTj1udWxsLE89bnVsbCxQPW51bGwsbWg9ITE7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHUoMzIxKSk7fWZ1bmN0aW9uIG5oKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoISRlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBvaChhLGIsYyxkLGUsZil7bGg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IuZXhwaXJhdGlvblRpbWU9MDtqaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP3BoOnFoO2E9YyhkLGUpO2lmKGIuZXhwaXJhdGlvblRpbWU9PT1saCl7Zj0wO2Rve2IuZXhwaXJhdGlvblRpbWU9MDtpZighKDI1PmYpKXRocm93IEVycm9yKHUoMzAxKSk7Zis9MTtQPU89bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7amguY3VycmVudD1yaDthPWMoZCxlKX13aGlsZShiLmV4cGlyYXRpb25UaW1lPT09bGgpfWpoLmN1cnJlbnQ9c2g7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtsaD0wO1A9Tz1OPW51bGw7bWg9ITE7aWYoYil0aHJvdyBFcnJvcih1KDMwMCkpO3JldHVybiBhfVxuZnVuY3Rpb24gdGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gdWgoKXtpZihudWxsPT09Tyl7dmFyIGE9Ti5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ty5uZXh0O3ZhciBiPW51bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZTpQLm5leHQ7aWYobnVsbCE9PWIpUD1iLE89YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzEwKSk7Tz1hO2E9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ty5iYXNlUXVldWUscXVldWU6Ty5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YX1yZXR1cm4gUH1cbmZ1bmN0aW9uIHZoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gd2goYSl7dmFyIGI9dWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1PLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsuZXhwaXJhdGlvblRpbWU7aWYobDxsaCl7dmFyIG09e2V4cGlyYXRpb25UaW1lOmsuZXhwaXJhdGlvblRpbWUsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1tLGY9ZCk6aD1oLm5leHQ9bTtsPk4uZXhwaXJhdGlvblRpbWUmJlxuKE4uZXhwaXJhdGlvblRpbWU9bCxCZyhsKSl9ZWxzZSBudWxsIT09aCYmKGg9aC5uZXh0PXtleHBpcmF0aW9uVGltZToxMDczNzQxODIzLHN1c3BlbnNlQ29uZmlnOmsuc3VzcGVuc2VDb25maWcsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxBZyhsLGsuc3VzcGVuc2VDb25maWcpLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2s9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nOyRlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHJnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiB4aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7JGUoZixiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIHloKGEpe3ZhciBiPXRoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOnZoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD16aC5iaW5kKG51bGwsTixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfWZ1bmN0aW9uIEFoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEJoKCl7cmV0dXJuIHVoKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBDaChhLGIsYyxkKXt2YXIgZT10aCgpO04uZWZmZWN0VGFnfD1hO2UubWVtb2l6ZWRTdGF0ZT1BaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfWZ1bmN0aW9uIERoKGEsYixjLGQpe3ZhciBlPXVoKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmbmgoZCxnLmRlcHMpKXtBaChiLGMsZixkKTtyZXR1cm59fU4uZWZmZWN0VGFnfD1hO2UubWVtb2l6ZWRTdGF0ZT1BaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIEVoKGEsYil7cmV0dXJuIENoKDUxNiw0LGEsYil9ZnVuY3Rpb24gRmgoYSxiKXtyZXR1cm4gRGgoNTE2LDQsYSxiKX1mdW5jdGlvbiBHaChhLGIpe3JldHVybiBEaCg0LDIsYSxiKX1cbmZ1bmN0aW9uIEhoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gSWgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBEaCg0LDIsSGguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gSmgoKXt9ZnVuY3Rpb24gS2goYSxiKXt0aCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfWZ1bmN0aW9uIExoKGEsYil7dmFyIGM9dWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJm5oKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gTWgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gTmgoYSxiLGMpe3ZhciBkPWFnKCk7Y2coOTg+ZD85ODpkLGZ1bmN0aW9uKCl7YSghMCl9KTtjZyg5NzxkPzk3OmQsZnVuY3Rpb24oKXt2YXIgZD1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7YSghMSksYygpfWZpbmFsbHl7a2guc3VzcGVuc2U9ZH19KX1cbmZ1bmN0aW9uIHpoKGEsYixjKXt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT17ZXhwaXJhdGlvblRpbWU6ZCxzdXNwZW5zZUNvbmZpZzplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O3ZhciBmPWIucGVuZGluZztudWxsPT09Zj9lLm5leHQ9ZTooZS5uZXh0PWYubmV4dCxmLm5leHQ9ZSk7Yi5wZW5kaW5nPWU7Zj1hLmFsdGVybmF0ZTtpZihhPT09Tnx8bnVsbCE9PWYmJmY9PT1OKW1oPSEwLGUuZXhwaXJhdGlvblRpbWU9bGgsTi5leHBpcmF0aW9uVGltZT1saDtlbHNle2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PWZ8fDA9PT1mLmV4cGlyYXRpb25UaW1lKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmVhZ2VyUmVkdWNlcj1mO2UuZWFnZXJTdGF0ZT1oO2lmKCRlKGgsZykpcmV0dXJufWNhdGNoKGspe31maW5hbGx5e31JZyhhLFxuZCl9fVxudmFyIHNoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpRLHVzZUNvbnRleHQ6USx1c2VFZmZlY3Q6USx1c2VJbXBlcmF0aXZlSGFuZGxlOlEsdXNlTGF5b3V0RWZmZWN0OlEsdXNlTWVtbzpRLHVzZVJlZHVjZXI6USx1c2VSZWY6USx1c2VTdGF0ZTpRLHVzZURlYnVnVmFsdWU6USx1c2VSZXNwb25kZXI6USx1c2VEZWZlcnJlZFZhbHVlOlEsdXNlVHJhbnNpdGlvbjpRfSxwaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6S2gsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIENoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIENoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxcbmJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj10aCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTp5aCx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9eWgoYSksZD1jWzBdLGU9Y1sxXTtFaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9XG5jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXloKCExKSxjPWJbMF07Yj1iWzFdO3JldHVybltLaChOaC5iaW5kKG51bGwsYixhKSxbYixhXSksY119fSxxaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6TGgsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RmgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpJaCx1c2VMYXlvdXRFZmZlY3Q6R2gsdXNlTWVtbzpNaCx1c2VSZWR1Y2VyOndoLHVzZVJlZjpCaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB3aCh2aCl9LHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz13aCh2aCksZD1jWzBdLGU9Y1sxXTtGaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9Y319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj1cbndoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsYixhKSxbYixhXSksY119fSxyaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6TGgsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RmgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpJaCx1c2VMYXlvdXRFZmZlY3Q6R2gsdXNlTWVtbzpNaCx1c2VSZWR1Y2VyOnhoLHVzZVJlZjpCaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB4aCh2aCl9LHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz14aCh2aCksZD1jWzBdLGU9Y1sxXTtGaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9Y319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj14aCh2aCksYz1iWzBdO2I9YlsxXTtyZXR1cm5bTGgoTmguYmluZChudWxsLFxuYixhKSxbYixhXSksY119fSxPaD1udWxsLFBoPW51bGwsUWg9ITE7ZnVuY3Rpb24gUmgoYSxiKXt2YXIgYz1TaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfVxuZnVuY3Rpb24gVGgoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIFVoKGEpe2lmKFFoKXt2YXIgYj1QaDtpZihiKXt2YXIgYz1iO2lmKCFUaChhLGIpKXtiPUpkKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhVGgoYSxiKSl7YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MjtRaD0hMTtPaD1hO3JldHVybn1SaChPaCxjKX1PaD1hO1BoPUpkKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyLFFoPSExLE9oPWF9fWZ1bmN0aW9uIFZoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtPaD1hfVxuZnVuY3Rpb24gV2goYSl7aWYoYSE9PU9oKXJldHVybiExO2lmKCFRaClyZXR1cm4gVmgoYSksUWg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFHZChiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9UGg7YjspUmgoYSxiKSxiPUpkKGIubmV4dFNpYmxpbmcpO1ZoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IodSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09QWQpe2lmKDA9PT1iKXtQaD1KZChhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlIGMhPT16ZCYmYyE9PUNkJiZjIT09QmR8fGIrK31hPWEubmV4dFNpYmxpbmd9UGg9bnVsbH19ZWxzZSBQaD1PaD9KZChhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIFhoKCl7UGg9T2g9bnVsbDtRaD0hMX12YXIgWWg9V2EuUmVhY3RDdXJyZW50T3duZXIscmc9ITE7ZnVuY3Rpb24gUihhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1lnKGIsbnVsbCxjLGQpOlhnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIFpoKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtxZyhiLGUpO2Q9b2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcmcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSwkaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhYmkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsY2koYSxiLGcsZCxlLGYpO2E9VWcoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpiZixjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiAkaChhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT1TZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNpKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJmJmKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZiYmKHJnPSExLGU8Zik/KGIuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZSwkaChhLGIsZikpOmRpKGEsYixjLGQsZil9ZnVuY3Rpb24gZWkoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBkaShhLGIsYyxkLGUpe3ZhciBmPUwoYyk/QmY6Si5jdXJyZW50O2Y9Q2YoYixmKTtxZyhiLGUpO2M9b2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcmcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSwkaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGZpKGEsYixjLGQsZSl7aWYoTChjKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO3FnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxMZyhiLGMsZCksTmcoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTWcoYixnLGQsbCk7dGc9ITE7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9eDt6ZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8eCE9PWt8fEsuY3VycmVudHx8dGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRmcoYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXRnfHxLZyhiLGMsaCxkLHgsayxsKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSx2ZyhhLGIpLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmlnKGIudHlwZSxoKSxrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXNnKGwpOihsPUwoYyk/QmY6Si5jdXJyZW50LGw9Q2YoYixsKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywocD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTWcoYixnLGQsbCksdGc9ITEsaz1iLm1lbW9pemVkU3RhdGUsZy5zdGF0ZT1rLHpnKGIsZCxnLGUpLHg9Yi5tZW1vaXplZFN0YXRlLGghPT1kfHxrIT09eHx8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKG09dGd8fEtnKGIsYyxoLGQsayx4LGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGwpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1sLGQ9bSk6XG4oXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIGdpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGdpKGEsYixjLGQsZSxmKXtlaShhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmSGYoYixjLCExKSwkaChhLGIsZik7ZD1iLnN0YXRlTm9kZTtZaC5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1YZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVhnKGIsbnVsbCxoLGYpKTpSKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJkhmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gaGkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9FZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZFZihhLGIuY29udGV4dCwhMSk7ZGgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIGlpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlUaW1lOjB9O1xuZnVuY3Rpb24gamkoYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9TS5jdXJyZW50LGc9ITEsaDsoaD0wIT09KGIuZWZmZWN0VGFnJjY0KSl8fChoPTAhPT0oZiYyKSYmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKSk7aD8oZz0hMCxiLmVmZmVjdFRhZyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZS5mYWxsYmFja3x8ITA9PT1lLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZnw9MSk7SShNLGYmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWUuZmFsbGJhY2smJlVoKGIpO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49XG5iO2Uuc2libGluZz1jO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWU7cmV0dXJuIGN9ZD1lLmNoaWxkcmVuO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVlnKGIsbnVsbCxkLGMpfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2E9YS5jaGlsZDtkPWEuc2libGluZztpZihnKXtlPWUuZmFsbGJhY2s7Yz1TZyhhLGEucGVuZGluZ1Byb3BzKTtjLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpJiYoZz1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09YS5jaGlsZCkpZm9yKGMuY2hpbGQ9ZztudWxsIT09ZzspZy5yZXR1cm49YyxnPWcuc2libGluZztkPVNnKGQsZSk7ZC5yZXR1cm49YjtjLnNpYmxpbmc9ZDtjLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1jO3JldHVybiBkfWM9WGcoYixhLmNoaWxkLGUuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9XG5jfWE9YS5jaGlsZDtpZihnKXtnPWUuZmFsbGJhY2s7ZT1XZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2UuY2hpbGQ9YTtudWxsIT09YSYmKGEucmV0dXJuPWUpO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPVdnKGcsZCxjLG51bGwpO2MucmV0dXJuPWI7ZS5zaWJsaW5nPWM7Yy5lZmZlY3RUYWd8PTI7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31iLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1YZyhiLGEsZS5jaGlsZHJlbixjKX1cbmZ1bmN0aW9uIGtpKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTtwZyhhLnJldHVybixiKX1mdW5jdGlvbiBsaShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxFeHBpcmF0aW9uOjAsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbEV4cGlyYXRpb249MCxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtSKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZWZmZWN0VGFnfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJmtpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKWtpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoTSxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aGgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTtsaShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1oaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9bGkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOmxpKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiAkaChhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTswIT09ZCYmQmcoZCk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHUoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1TZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXZhciBuaSxvaSxwaSxxaTtcbm5pPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtvaT1mdW5jdGlvbigpe307XG5waT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7Y2goJGcuY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPXpiKGcsZik7ZD16YihnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9R2IoZyxmKTtkPUdiKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9SWIoZyxmKTtkPUliKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9c2QpfW9kKGMsZCk7dmFyIGgsaztjPW51bGw7Zm9yKGggaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShoKSYmZi5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZltoXSlpZihcInN0eWxlXCI9PT1cbmgpZm9yKGsgaW4gZz1mW2hdLGcpZy5oYXNPd25Qcm9wZXJ0eShrKSYmKGN8fChjPXt9KSxjW2tdPVwiXCIpO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1oJiZcImNoaWxkcmVuXCIhPT1oJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYodmEuaGFzT3duUHJvcGVydHkoaCk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGgsbnVsbCkpO2ZvcihoIGluIGQpe3ZhciBsPWRbaF07Zz1udWxsIT1mP2ZbaF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoaCkmJmwhPT1nJiYobnVsbCE9bHx8bnVsbCE9ZykpaWYoXCJzdHlsZVwiPT09aClpZihnKXtmb3IoayBpbiBnKSFnLmhhc093blByb3BlcnR5KGspfHxsJiZsLmhhc093blByb3BlcnR5KGspfHwoY3x8KGM9e30pLGNba109XCJcIik7Zm9yKGsgaW4gbClsLmhhc093blByb3BlcnR5KGspJiZnW2tdIT09bFtrXSYmKGN8fChjPXt9KSxcbmNba109bFtrXSl9ZWxzZSBjfHwoYXx8KGE9W10pLGEucHVzaChoLGMpKSxjPWw7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGw9bD9sLl9faHRtbDp2b2lkIDAsZz1nP2cuX19odG1sOnZvaWQgMCxudWxsIT1sJiZnIT09bCYmKGE9YXx8W10pLnB1c2goaCxsKSk6XCJjaGlsZHJlblwiPT09aD9nPT09bHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBsJiZcIm51bWJlclwiIT09dHlwZW9mIGx8fChhPWF8fFtdKS5wdXNoKGgsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT8obnVsbCE9bCYmcmQoZSxoKSxhfHxnPT09bHx8KGE9W10pKTooYT1hfHxbXSkucHVzaChoLGwpKX1jJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsYyk7ZT1hO2lmKGIudXBkYXRlUXVldWU9ZSliLmVmZmVjdFRhZ3w9NH19O1xucWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmVmZmVjdFRhZ3w9NCl9O2Z1bmN0aW9uIHJpKGEsYil7c3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIHNpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gTChiLnR5cGUpJiZEZigpLG51bGw7Y2FzZSAzOnJldHVybiBlaCgpLEgoSyksSChKKSxjPWIuc3RhdGVOb2RlLGMucGVuZGluZ0NvbnRleHQmJihjLmNvbnRleHQ9Yy5wZW5kaW5nQ29udGV4dCxjLnBlbmRpbmdDb250ZXh0PW51bGwpLG51bGwhPT1hJiZudWxsIT09YS5jaGlsZHx8IVdoKGIpfHwoYi5lZmZlY3RUYWd8PTQpLG9pKGIpLG51bGw7Y2FzZSA1OmdoKGIpO2M9Y2goYmguY3VycmVudCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlwaShhLGIsZSxkLGMpLGEucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbnJldHVybiBudWxsfWE9Y2goJGcuY3VycmVudCk7aWYoV2goYikpe2Q9Yi5zdGF0ZU5vZGU7ZT1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbTWRdPWI7ZFtOZF09Zjtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxhYy5sZW5ndGg7YSsrKUYoYWNbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGQpO0YoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixkKTtGKFwic3VibWl0XCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWIoZCxmKTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RihcImludmFsaWRcIixkKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmIoZCxmKSxGKFwiaW52YWxpZFwiLGQpLHJkKGMsXCJvbkNoYW5nZVwiKX1vZChlLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoYT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJihhPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6dmEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJnJkKGMsZyl9c3dpdGNoKGUpe2Nhc2UgXCJpbnB1dFwiOnhiKGQpO0ViKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eGIoZCk7TGIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJlxuKGQub25jbGljaz1zZCl9Yz1hO2IudXBkYXRlUXVldWU9YztudWxsIT09YyYmKGIuZWZmZWN0VGFnfD00KX1lbHNle2c9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7YT09PXFkJiYoYT1OYihlKSk7YT09PXFkP1wic2NyaXB0XCI9PT1lPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoZSx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChlKSxcInNlbGVjdFwiPT09ZSYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsZSk7YVtNZF09YjthW05kXT1kO25pKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXBkKGUsZCk7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixcbmEpO2g9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8YWMubGVuZ3RoO2grKylGKGFjW2hdLGEpO2g9ZDticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGEpO0YoXCJsb2FkXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsYSk7RihcInN1Ym1pdFwiLGEpO2g9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWIoYSxkKTtoPXpiKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9R2IoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2g9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihhLFxuZCk7aD1JYihhLGQpO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1kfW9kKGUsaCk7dmFyIGs9aDtmb3IoZiBpbiBrKWlmKGsuaGFzT3duUHJvcGVydHkoZikpe3ZhciBsPWtbZl07XCJzdHlsZVwiPT09Zj9tZChhLGwpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGw9bD9sLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmUWIoYSxsKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGw/KFwidGV4dGFyZWFcIiE9PWV8fFwiXCIhPT1sKSYmUmIoYSxsKTpcIm51bWJlclwiPT09dHlwZW9mIGwmJlJiKGEsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYodmEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9bCYmcmQoYyxmKTpudWxsIT1sJiZYYShhLGYsbCxnKSl9c3dpdGNoKGUpe2Nhc2UgXCJpbnB1dFwiOnhiKGEpO0ViKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihhKTtMYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrcmIoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtjPWQudmFsdWU7bnVsbCE9Yz9IYihhLCEhZC5tdWx0aXBsZSxjLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmSGIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGgub25DbGljayYmKGEub25jbGljaz1zZCl9RmQoZSxkKSYmKGIuZWZmZWN0VGFnfD00KX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpcWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7XG5jPWNoKGJoLmN1cnJlbnQpO2NoKCRnLmN1cnJlbnQpO1doKGIpPyhjPWIuc3RhdGVOb2RlLGQ9Yi5tZW1vaXplZFByb3BzLGNbTWRdPWIsYy5ub2RlVmFsdWUhPT1kJiYoYi5lZmZlY3RUYWd8PTQpKTooYz0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGNbTWRdPWIsYi5zdGF0ZU5vZGU9Yyl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWMsYjtjPW51bGwhPT1kO2Q9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZXaChiKTooZT1hLm1lbW9pemVkU3RhdGUsZD1udWxsIT09ZSxjfHxudWxsPT09ZXx8KGU9YS5jaGlsZC5zaWJsaW5nLG51bGwhPT1lJiYoZj1iLmZpcnN0RWZmZWN0LG51bGwhPT1mPyhiLmZpcnN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PWYpOihiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1cbmUsZS5uZXh0RWZmZWN0PW51bGwpLGUuZWZmZWN0VGFnPTgpKSk7aWYoYyYmIWQmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShNLmN1cnJlbnQmMSkpUz09PXRpJiYoUz11aSk7ZWxzZXtpZihTPT09dGl8fFM9PT11aSlTPXZpOzAhPT13aSYmbnVsbCE9PVQmJih4aShULFUpLHlpKFQsd2kpKX1pZihjfHxkKWIuZWZmZWN0VGFnfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZWgoKSxvaShiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIG9nKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gTChiLnR5cGUpJiZEZigpLG51bGw7Y2FzZSAxOTpIKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2U9MCE9PShiLmVmZmVjdFRhZyY2NCk7Zj1kLnJlbmRlcmluZztpZihudWxsPT09ZilpZihlKXJpKGQsITEpO2Vsc2V7aWYoUyE9PXRpfHxudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyZcbjY0KSlmb3IoZj1iLmNoaWxkO251bGwhPT1mOyl7YT1oaChmKTtpZihudWxsIT09YSl7Yi5lZmZlY3RUYWd8PTY0O3JpKGQsITEpO2U9YS51cGRhdGVRdWV1ZTtudWxsIT09ZSYmKGIudXBkYXRlUXVldWU9ZSxiLmVmZmVjdFRhZ3w9NCk7bnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtmb3IoZD1iLmNoaWxkO251bGwhPT1kOyllPWQsZj1jLGUuZWZmZWN0VGFnJj0yLGUubmV4dEVmZmVjdD1udWxsLGUuZmlyc3RFZmZlY3Q9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCxhPWUuYWx0ZXJuYXRlLG51bGw9PT1hPyhlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxlLmV4cGlyYXRpb25UaW1lPWYsZS5jaGlsZD1udWxsLGUubWVtb2l6ZWRQcm9wcz1udWxsLGUubWVtb2l6ZWRTdGF0ZT1udWxsLGUudXBkYXRlUXVldWU9bnVsbCxlLmRlcGVuZGVuY2llcz1udWxsKTooZS5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZSxcbmUuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZSxlLmNoaWxkPWEuY2hpbGQsZS5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcyxlLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlLGUudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxmPWEuZGVwZW5kZW5jaWVzLGUuZGVwZW5kZW5jaWVzPW51bGw9PT1mP251bGw6e2V4cGlyYXRpb25UaW1lOmYuZXhwaXJhdGlvblRpbWUsZmlyc3RDb250ZXh0OmYuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Zi5yZXNwb25kZXJzfSksZD1kLnNpYmxpbmc7SShNLE0uY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWY9Zi5zaWJsaW5nfX1lbHNle2lmKCFlKWlmKGE9aGgoZiksbnVsbCE9PWEpe2lmKGIuZWZmZWN0VGFnfD02NCxlPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmVmZmVjdFRhZ3w9NCkscmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFmLmFsdGVybmF0ZSlyZXR1cm4gYj1cbmIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqJGYoKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5kLnRhaWxFeHBpcmF0aW9uJiYxPGMmJihiLmVmZmVjdFRhZ3w9NjQsZT0hMCxyaShkLCExKSxiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT1jLTEpO2QuaXNCYWNrd2FyZHM/KGYuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zik6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1mOmIuY2hpbGQ9ZixkLmxhc3Q9Zil9cmV0dXJuIG51bGwhPT1kLnRhaWw/KDA9PT1kLnRhaWxFeHBpcmF0aW9uJiYoZC50YWlsRXhwaXJhdGlvbj0kZigpKzUwMCksYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9JGYoKSxjLnNpYmxpbmc9bnVsbCxiPU0uY3VycmVudCxJKE0sZT9iJjF8MjpiJjEpLGMpOm51bGx9dGhyb3cgRXJyb3IodSgxNTYsXG5iLnRhZykpO31mdW5jdGlvbiB6aShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpMKGEudHlwZSkmJkRmKCk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzplaCgpO0goSyk7SChKKTtiPWEuZWZmZWN0VGFnO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IodSgyODUpKTthLmVmZmVjdFRhZz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gZ2goYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKE0pLGI9YS5lZmZlY3RUYWcsYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChNKSxudWxsO2Nhc2UgNDpyZXR1cm4gZWgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIG9nKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gQWkoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpxYihiKX19XG52YXIgQmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1xYihjKSk7bnVsbCE9PWMmJnBiKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJnBiKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIERpKGEsYil7dHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtFaShhLGMpfX1mdW5jdGlvbiBGaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtFaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBHaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5lZmZlY3RUYWcmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzppZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9XG5mdW5jdGlvbiBIaShhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmRlc3Ryb3k7Yy5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1kJiZkKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBJaShhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19XG5mdW5jdGlvbiBKaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6SWkoMyxjKTtyZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7aWYoYy5lZmZlY3RUYWcmNClpZihudWxsPT09YilhLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczppZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKTthLmNvbXBvbmVudERpZFVwZGF0ZShkLGIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1iPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkNnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9Q2coYyxiLGEpfXJldHVybjtcbmNhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmVmZmVjdFRhZyY0JiZGZChjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJlZjKGMpKSkpO3JldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEtpKGEsYixjKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgTGkmJkxpKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgZD1hLm5leHQ7Y2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGE9ZDtkb3t2YXIgYz1hLmRlc3Ryb3k7aWYodm9pZCAwIT09Yyl7dmFyIGc9Yjt0cnl7YygpfWNhdGNoKGgpe0VpKGcsaCl9fWE9YS5uZXh0fXdoaWxlKGEhPT1kKX0pfWJyZWFrO2Nhc2UgMTpGaShiKTtjPWIuc3RhdGVOb2RlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudFdpbGxVbm1vdW50JiZEaShiLGMpO2JyZWFrO2Nhc2UgNTpGaShiKTticmVhaztjYXNlIDQ6TWkoYSxiLGMpfX1cbmZ1bmN0aW9uIE5pKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2EucmV0dXJuPW51bGw7YS5jaGlsZD1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuYWx0ZXJuYXRlPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDtudWxsIT09YiYmTmkoYil9ZnVuY3Rpb24gT2koYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBQaShhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihPaShiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59dGhyb3cgRXJyb3IodSgxNjApKTt9Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYxKSk7fWMuZWZmZWN0VGFnJjE2JiYoUmIoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fE9pKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9RaShhLGMsYik6UmkoYSxjLGIpfVxuZnVuY3Rpb24gUWkoYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPXNkKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFFpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUWkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gUmkoYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihSaShhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVJpKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIE1pKGEsYixjKXtmb3IodmFyIGQ9YixlPSExLGYsZzs7KXtpZighZSl7ZT1kLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IodSgxNjApKTtmPWUuc3RhdGVOb2RlO3N3aXRjaChlLnRhZyl7Y2FzZSA1Omc9ITE7YnJlYWsgYTtjYXNlIDM6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhO2Nhc2UgNDpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGF9ZT1lLnJldHVybn1lPSEwfWlmKDU9PT1kLnRhZ3x8Nj09PWQudGFnKXthOmZvcih2YXIgaD1hLGs9ZCxsPWMsbT1rOzspaWYoS2koaCxtLGwpLG51bGwhPT1tLmNoaWxkJiY0IT09bS50YWcpbS5jaGlsZC5yZXR1cm49bSxtPW0uY2hpbGQ7ZWxzZXtpZihtPT09aylicmVhayBhO2Zvcig7bnVsbD09PW0uc2libGluZzspe2lmKG51bGw9PT1tLnJldHVybnx8bS5yZXR1cm49PT1rKWJyZWFrIGE7bT1tLnJldHVybn1tLnNpYmxpbmcucmV0dXJuPW0ucmV0dXJuO209bS5zaWJsaW5nfWc/KGg9XG5mLGs9ZC5zdGF0ZU5vZGUsOD09PWgubm9kZVR5cGU/aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGspOmgucmVtb3ZlQ2hpbGQoaykpOmYucmVtb3ZlQ2hpbGQoZC5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWQudGFnKXtpZihudWxsIT09ZC5jaGlsZCl7Zj1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoS2koYSxkLGMpLG51bGwhPT1kLmNoaWxkKXtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX1pZihkPT09YilicmVhaztmb3IoO251bGw9PT1kLnNpYmxpbmc7KXtpZihudWxsPT09ZC5yZXR1cm58fGQucmV0dXJuPT09YilyZXR1cm47ZD1kLnJldHVybjs0PT09ZC50YWcmJihlPSExKX1kLnNpYmxpbmcucmV0dXJuPWQucmV0dXJuO2Q9ZC5zaWJsaW5nfX1cbmZ1bmN0aW9uIFNpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjpIaSgzLGIpO3JldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tOZF09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmQmIoYyxkKTtwZChhLGUpO2I9cGQoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP21kKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9RYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/UmIoYyxoKTpYYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6Q2IoYyxkKTticmVhaztcbmNhc2UgXCJ0ZXh0YXJlYVwiOktiKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsYT1kLnZhbHVlLG51bGwhPWE/SGIoYywhIWQubXVsdGlwbGUsYSwhMSk6YiE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP0hiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpIYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmI9Yi5zdGF0ZU5vZGU7Yi5oeWRyYXRlJiYoYi5oeWRyYXRlPSExLFZjKGIuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOmM9YjtudWxsPT09Yi5tZW1vaXplZFN0YXRlP1xuZD0hMTooZD0hMCxjPWIuY2hpbGQsVGk9JGYoKSk7aWYobnVsbCE9PWMpYTpmb3IoYT1jOzspe2lmKDU9PT1hLnRhZylmPWEuc3RhdGVOb2RlLGQ/KGY9Zi5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGY9YS5zdGF0ZU5vZGUsZT1hLm1lbW9pemVkUHJvcHMuc3R5bGUsZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGwsZi5zdHlsZS5kaXNwbGF5PWxkKFwiZGlzcGxheVwiLGUpKTtlbHNlIGlmKDY9PT1hLnRhZylhLnN0YXRlTm9kZS5ub2RlVmFsdWU9ZD9cIlwiOmEubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09YS50YWcmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGw9PT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7Zj1hLmNoaWxkLnNpYmxpbmc7Zi5yZXR1cm49YTthPVxuZjtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YylicmVhaztmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YylicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31VaShiKTtyZXR1cm47Y2FzZSAxOTpVaShiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9ZnVuY3Rpb24gVWkoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgQmkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1WaS5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbnZhciBXaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBYaShhLGIsYyl7Yz13ZyhjLG51bGwpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1lpfHwoWWk9ITAsWmk9ZCk7Q2koYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiAkaShhLGIsYyl7Yz13ZyhjLG51bGwpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtDaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09YWo/YWo9bmV3IFNldChbdGhpc10pOmFqLmFkZCh0aGlzKSxDaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbnZhciBiaj1NYXRoLmNlaWwsY2o9V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixkaj1XYS5SZWFjdEN1cnJlbnRPd25lcixWPTAsZWo9OCxmaj0xNixnaj0zMix0aT0wLGhqPTEsaWo9Mix1aT0zLHZpPTQsamo9NSxXPVYsVD1udWxsLFg9bnVsbCxVPTAsUz10aSxraj1udWxsLGxqPTEwNzM3NDE4MjMsbWo9MTA3Mzc0MTgyMyxuaj1udWxsLHdpPTAsb2o9ITEsVGk9MCxwaj01MDAsWT1udWxsLFlpPSExLFppPW51bGwsYWo9bnVsbCxxaj0hMSxyaj1udWxsLHNqPTkwLHRqPW51bGwsdWo9MCx2aj1udWxsLHdqPTA7ZnVuY3Rpb24gR2coKXtyZXR1cm4oVyYoZmp8Z2opKSE9PVY/MTA3Mzc0MTgyMS0oJGYoKS8xMHwwKTowIT09d2o/d2o6d2o9MTA3Mzc0MTgyMS0oJGYoKS8xMHwwKX1cbmZ1bmN0aW9uIEhnKGEsYixjKXtiPWIubW9kZTtpZigwPT09KGImMikpcmV0dXJuIDEwNzM3NDE4MjM7dmFyIGQ9YWcoKTtpZigwPT09KGImNCkpcmV0dXJuIDk5PT09ZD8xMDczNzQxODIzOjEwNzM3NDE4MjI7aWYoKFcmZmopIT09VilyZXR1cm4gVTtpZihudWxsIT09YylhPWhnKGEsYy50aW1lb3V0TXN8MHx8NUUzLDI1MCk7ZWxzZSBzd2l0Y2goZCl7Y2FzZSA5OTphPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA5ODphPWhnKGEsMTUwLDEwMCk7YnJlYWs7Y2FzZSA5NzpjYXNlIDk2OmE9aGcoYSw1RTMsMjUwKTticmVhaztjYXNlIDk1OmE9MjticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI2KSk7fW51bGwhPT1UJiZhPT09VSYmLS1hO3JldHVybiBhfVxuZnVuY3Rpb24gSWcoYSxiKXtpZig1MDx1ail0aHJvdyB1aj0wLHZqPW51bGwsRXJyb3IodSgxODUpKTthPXhqKGEsYik7aWYobnVsbCE9PWEpe3ZhciBjPWFnKCk7MTA3Mzc0MTgyMz09PWI/KFcmZWopIT09ViYmKFcmKGZqfGdqKSk9PT1WP3lqKGEpOihaKGEpLFc9PT1WJiZnZygpKTpaKGEpOyhXJjQpPT09Vnx8OTghPT1jJiY5OSE9PWN8fChudWxsPT09dGo/dGo9bmV3IE1hcChbW2EsYl1dKTooYz10ai5nZXQoYSksKHZvaWQgMD09PWN8fGM+YikmJnRqLnNldChhLGIpKSl9fVxuZnVuY3Rpb24geGooYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1udWxsIT09ZSYmKFQ9PT1lJiYoQmcoYiksUz09PXZpJiZ4aShlLFUpKSx5aShlLGIpKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIHpqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2lmKDAhPT1iKXJldHVybiBiO2I9YS5maXJzdFBlbmRpbmdUaW1lO2lmKCFBaihhLGIpKXJldHVybiBiO3ZhciBjPWEubGFzdFBpbmdlZFRpbWU7YT1hLm5leHRLbm93blBlbmRpbmdMZXZlbDthPWM+YT9jOmE7cmV0dXJuIDI+PWEmJmIhPT1hPzA6YX1cbmZ1bmN0aW9uIFooYSl7aWYoMCE9PWEubGFzdEV4cGlyZWRUaW1lKWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0xMDczNzQxODIzLGEuY2FsbGJhY2tQcmlvcml0eT05OSxhLmNhbGxiYWNrTm9kZT1lZyh5ai5iaW5kKG51bGwsYSkpO2Vsc2V7dmFyIGI9emooYSksYz1hLmNhbGxiYWNrTm9kZTtpZigwPT09YiludWxsIT09YyYmKGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTAsYS5jYWxsYmFja1ByaW9yaXR5PTkwKTtlbHNle3ZhciBkPUdnKCk7MTA3Mzc0MTgyMz09PWI/ZD05OToxPT09Ynx8Mj09PWI/ZD05NTooZD0xMCooMTA3Mzc0MTgyMS1iKS0xMCooMTA3Mzc0MTgyMS1kKSxkPTA+PWQ/OTk6MjUwPj1kPzk4OjUyNTA+PWQ/OTc6OTUpO2lmKG51bGwhPT1jKXt2YXIgZT1hLmNhbGxiYWNrUHJpb3JpdHk7aWYoYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPT09YiYmZT49ZClyZXR1cm47YyE9PVRmJiZLZihjKX1hLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9XG5iO2EuY2FsbGJhY2tQcmlvcml0eT1kO2I9MTA3Mzc0MTgyMz09PWI/ZWcoeWouYmluZChudWxsLGEpKTpkZyhkLEJqLmJpbmQobnVsbCxhKSx7dGltZW91dDoxMCooMTA3Mzc0MTgyMS1iKS0kZigpfSk7YS5jYWxsYmFja05vZGU9Yn19fVxuZnVuY3Rpb24gQmooYSxiKXt3aj0wO2lmKGIpcmV0dXJuIGI9R2coKSxDaihhLGIpLFooYSksbnVsbDt2YXIgYz16aihhKTtpZigwIT09Yyl7Yj1hLmNhbGxiYWNrTm9kZTtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTtEaigpO2E9PT1UJiZjPT09VXx8RWooYSxjKTtpZihudWxsIT09WCl7dmFyIGQ9VztXfD1majt2YXIgZT1GaigpO2RvIHRyeXtHaigpO2JyZWFrfWNhdGNoKGgpe0hqKGEsaCl9d2hpbGUoMSk7bmcoKTtXPWQ7Y2ouY3VycmVudD1lO2lmKFM9PT1oail0aHJvdyBiPWtqLEVqKGEsYykseGkoYSxjKSxaKGEpLGI7aWYobnVsbD09PVgpc3dpdGNoKGU9YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZSxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YyxkPVMsVD1udWxsLGQpe2Nhc2UgdGk6Y2FzZSBoajp0aHJvdyBFcnJvcih1KDM0NSkpO2Nhc2UgaWo6Q2ooYSwyPGM/MjpjKTticmVhaztjYXNlIHVpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO1xuYz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1JaihlKSk7aWYoMTA3Mzc0MTgyMz09PWxqJiYoZT1UaStwai0kZigpLDEwPGUpKXtpZihvail7dmFyIGY9YS5sYXN0UGluZ2VkVGltZTtpZigwPT09Znx8Zj49Yyl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9fWY9emooYSk7aWYoMCE9PWYmJmYhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1kO2JyZWFrfWEudGltZW91dEhhbmRsZT1IZChKai5iaW5kKG51bGwsYSksZSk7YnJlYWt9SmooYSk7YnJlYWs7Y2FzZSB2aTp4aShhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtjPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZihvaiYmKGU9YS5sYXN0UGluZ2VkVGltZSwwPT09ZXx8ZT49Yykpe2EubGFzdFBpbmdlZFRpbWU9YztFaihhLGMpO2JyZWFrfWU9emooYSk7aWYoMCE9PWUmJmUhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1cbmQ7YnJlYWt9MTA3Mzc0MTgyMyE9PW1qP2Q9MTAqKDEwNzM3NDE4MjEtbWopLSRmKCk6MTA3Mzc0MTgyMz09PWxqP2Q9MDooZD0xMCooMTA3Mzc0MTgyMS1saiktNUUzLGU9JGYoKSxjPTEwKigxMDczNzQxODIxLWMpLWUsZD1lLWQsMD5kJiYoZD0wKSxkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmJqKGQvMTk2MCkpLWQsYzxkJiYoZD1jKSk7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha31KaihhKTticmVhaztjYXNlIGpqOmlmKDEwNzM3NDE4MjMhPT1saiYmbnVsbCE9PW5qKXtmPWxqO3ZhciBnPW5qO2Q9Zy5idXN5TWluRHVyYXRpb25Nc3wwOzA+PWQ/ZD0wOihlPWcuYnVzeURlbGF5TXN8MCxmPSRmKCktKDEwKigxMDczNzQxODIxLWYpLShnLnRpbWVvdXRNc3wwfHw1RTMpKSxkPWY8PWU/MDplK2QtZik7aWYoMTA8ZCl7eGkoYSxjKTthLnRpbWVvdXRIYW5kbGU9XG5IZChKai5iaW5kKG51bGwsYSksZCk7YnJlYWt9fUpqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjkpKTt9WihhKTtpZihhLmNhbGxiYWNrTm9kZT09PWIpcmV0dXJuIEJqLmJpbmQobnVsbCxhKX19cmV0dXJuIG51bGx9XG5mdW5jdGlvbiB5aihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtiPTAhPT1iP2I6MTA3Mzc0MTgyMztpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTtEaigpO2E9PT1UJiZiPT09VXx8RWooYSxiKTtpZihudWxsIT09WCl7dmFyIGM9VztXfD1majt2YXIgZD1GaigpO2RvIHRyeXtLaigpO2JyZWFrfWNhdGNoKGUpe0hqKGEsZSl9d2hpbGUoMSk7bmcoKTtXPWM7Y2ouY3VycmVudD1kO2lmKFM9PT1oail0aHJvdyBjPWtqLEVqKGEsYikseGkoYSxiKSxaKGEpLGM7aWYobnVsbCE9PVgpdGhyb3cgRXJyb3IodSgyNjEpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1iO1Q9bnVsbDtKaihhKTtaKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIExqKCl7aWYobnVsbCE9PXRqKXt2YXIgYT10ajt0aj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhLGMpe0NqKGMsYSk7WihjKX0pO2dnKCl9fVxuZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX1mdW5jdGlvbiBOaihhLGIpe3ZhciBjPVc7VyY9LTI7V3w9ZWo7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX1cbmZ1bmN0aW9uIEVqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLElkKGMpKTtpZihudWxsIT09WClmb3IoYz1YLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkRmKCk7YnJlYWs7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2JyZWFrO2Nhc2UgNTpnaChkKTticmVhaztjYXNlIDQ6ZWgoKTticmVhaztjYXNlIDEzOkgoTSk7YnJlYWs7Y2FzZSAxOTpIKE0pO2JyZWFrO2Nhc2UgMTA6b2coZCl9Yz1jLnJldHVybn1UPWE7WD1TZyhhLmN1cnJlbnQsbnVsbCk7VT1iO1M9dGk7a2o9bnVsbDttaj1saj0xMDczNzQxODIzO25qPW51bGw7d2k9MDtvaj0hMX1cbmZ1bmN0aW9uIEhqKGEsYil7ZG97dHJ5e25nKCk7amguY3VycmVudD1zaDtpZihtaClmb3IodmFyIGM9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1jOyl7dmFyIGQ9Yy5xdWV1ZTtudWxsIT09ZCYmKGQucGVuZGluZz1udWxsKTtjPWMubmV4dH1saD0wO1A9Tz1OPW51bGw7bWg9ITE7aWYobnVsbD09PVh8fG51bGw9PT1YLnJldHVybilyZXR1cm4gUz1oaixraj1iLFg9bnVsbDthOnt2YXIgZT1hLGY9WC5yZXR1cm4sZz1YLGg9YjtiPVU7Zy5lZmZlY3RUYWd8PTIwNDg7Zy5maXJzdEVmZmVjdD1nLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09aCYmXCJvYmplY3RcIj09PXR5cGVvZiBoJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC50aGVuKXt2YXIgaz1oO2lmKDA9PT0oZy5tb2RlJjIpKXt2YXIgbD1nLmFsdGVybmF0ZTtsPyhnLnVwZGF0ZVF1ZXVlPWwudXBkYXRlUXVldWUsZy5tZW1vaXplZFN0YXRlPWwubWVtb2l6ZWRTdGF0ZSxnLmV4cGlyYXRpb25UaW1lPWwuZXhwaXJhdGlvblRpbWUpOihnLnVwZGF0ZVF1ZXVlPVxubnVsbCxnLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIG09MCE9PShNLmN1cnJlbnQmMSkscD1mO2Rve3ZhciB4O2lmKHg9MTM9PT1wLnRhZyl7dmFyIHo9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT16KXg9bnVsbCE9PXouZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciBjYT1wLm1lbW9pemVkUHJvcHM7eD12b2lkIDA9PT1jYS5mYWxsYmFjaz8hMTohMCE9PWNhLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOm0/ITE6ITB9fWlmKHgpe3ZhciBEPXAudXBkYXRlUXVldWU7aWYobnVsbD09PUQpe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7cC51cGRhdGVRdWV1ZT10fWVsc2UgRC5hZGQoayk7aWYoMD09PShwLm1vZGUmMikpe3AuZWZmZWN0VGFnfD02NDtnLmVmZmVjdFRhZyY9LTI5ODE7aWYoMT09PWcudGFnKWlmKG51bGw9PT1nLmFsdGVybmF0ZSlnLnRhZz0xNztlbHNle3ZhciB5PXdnKDEwNzM3NDE4MjMsbnVsbCk7eS50YWc9Mjt4ZyhnLHkpfWcuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztcbmJyZWFrIGF9aD12b2lkIDA7Zz1iO3ZhciBBPWUucGluZ0NhY2hlO251bGw9PT1BPyhBPWUucGluZ0NhY2hlPW5ldyBXaSxoPW5ldyBTZXQsQS5zZXQoayxoKSk6KGg9QS5nZXQoayksdm9pZCAwPT09aCYmKGg9bmV3IFNldCxBLnNldChrLGgpKSk7aWYoIWguaGFzKGcpKXtoLmFkZChnKTt2YXIgcT1Pai5iaW5kKG51bGwsZSxrLGcpO2sudGhlbihxLHEpfXAuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2g9RXJyb3IoKHBiKGcudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitxYihnKSl9UyE9PVxuamomJihTPWlqKTtoPUFpKGgsZyk7cD1mO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOms9aDtwLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7dmFyIEI9WGkocCxrLGIpO3lnKHAsQik7YnJlYWsgYTtjYXNlIDE6az1oO3ZhciB3PXAudHlwZSx1Yj1wLnN0YXRlTm9kZTtpZigwPT09KHAuZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXViJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdWIuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09YWp8fCFhai5oYXModWIpKSkpe3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgdmI9JGkocCxrLGIpO3lnKHAsdmIpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVg9UGooWCl9Y2F0Y2goWGMpe2I9WGM7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBGaigpe3ZhciBhPWNqLmN1cnJlbnQ7Y2ouY3VycmVudD1zaDtyZXR1cm4gbnVsbD09PWE/c2g6YX1mdW5jdGlvbiBBZyhhLGIpe2E8bGomJjI8YSYmKGxqPWEpO251bGwhPT1iJiZhPG1qJiYyPGEmJihtaj1hLG5qPWIpfWZ1bmN0aW9uIEJnKGEpe2E+d2kmJih3aT1hKX1mdW5jdGlvbiBLaigpe2Zvcig7bnVsbCE9PVg7KVg9UWooWCl9ZnVuY3Rpb24gR2ooKXtmb3IoO251bGwhPT1YJiYhVWYoKTspWD1RaihYKX1mdW5jdGlvbiBRaihhKXt2YXIgYj1SaihhLmFsdGVybmF0ZSxhLFUpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9UGooYSkpO2RqLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIFBqKGEpe1g9YTtkb3t2YXIgYj1YLmFsdGVybmF0ZTthPVgucmV0dXJuO2lmKDA9PT0oWC5lZmZlY3RUYWcmMjA0OCkpe2I9c2koYixYLFUpO2lmKDE9PT1VfHwxIT09WC5jaGlsZEV4cGlyYXRpb25UaW1lKXtmb3IodmFyIGM9MCxkPVguY2hpbGQ7bnVsbCE9PWQ7KXt2YXIgZT1kLmV4cGlyYXRpb25UaW1lLGY9ZC5jaGlsZEV4cGlyYXRpb25UaW1lO2U+YyYmKGM9ZSk7Zj5jJiYoYz1mKTtkPWQuc2libGluZ31YLmNoaWxkRXhwaXJhdGlvblRpbWU9Y31pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YSYmMD09PShhLmVmZmVjdFRhZyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1YLmZpcnN0RWZmZWN0KSxudWxsIT09WC5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVguZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1YLmxhc3RFZmZlY3QpLDE8WC5lZmZlY3RUYWcmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WDphLmZpcnN0RWZmZWN0PVgsYS5sYXN0RWZmZWN0PVgpKX1lbHNle2I9emkoWCk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZWZmZWN0VGFnJj0yMDQ3LGI7bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZWZmZWN0VGFnfD0yMDQ4KX1iPVguc2libGluZztpZihudWxsIT09YilyZXR1cm4gYjtYPWF9d2hpbGUobnVsbCE9PVgpO1M9PT10aSYmKFM9amopO3JldHVybiBudWxsfWZ1bmN0aW9uIElqKGEpe3ZhciBiPWEuZXhwaXJhdGlvblRpbWU7YT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7cmV0dXJuIGI+YT9iOmF9ZnVuY3Rpb24gSmooYSl7dmFyIGI9YWcoKTtjZyg5OSxTai5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBTaihhLGIpe2RvIERqKCk7d2hpbGUobnVsbCE9PXJqKTtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yayxkPWEuZmluaXNoZWRFeHBpcmF0aW9uVGltZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IodSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wO2EuY2FsbGJhY2tQcmlvcml0eT05MDthLm5leHRLbm93blBlbmRpbmdMZXZlbD0wO3ZhciBlPUlqKGMpO2EuZmlyc3RQZW5kaW5nVGltZT1lO2Q8PWEubGFzdFN1c3BlbmRlZFRpbWU/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmQ8PWEuZmlyc3RTdXNwZW5kZWRUaW1lJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9XG5kLTEpO2Q8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2Q8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCk7YT09PVQmJihYPVQ9bnVsbCxVPTApOzE8Yy5lZmZlY3RUYWc/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxlPWMuZmlyc3RFZmZlY3QpOmU9YzplPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWUpe3ZhciBmPVc7V3w9Z2o7ZGouY3VycmVudD1udWxsO0RkPWZkO3ZhciBnPXhkKCk7aWYoeWQoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpdmFyIGg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2g9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBrPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpO2lmKGsmJjAhPT1rLnJhbmdlQ291bnQpe2g9ay5hbmNob3JOb2RlO3ZhciBsPWsuYW5jaG9yT2Zmc2V0LFxubT1rLmZvY3VzTm9kZTtrPWsuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsbS5ub2RlVHlwZX1jYXRjaCh3Yil7aD1udWxsO2JyZWFrIGF9dmFyIHA9MCx4PS0xLHo9LTEsY2E9MCxEPTAsdD1nLHk9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciBBOzspe3QhPT1ofHwwIT09bCYmMyE9PXQubm9kZVR5cGV8fCh4PXArbCk7dCE9PW18fDAhPT1rJiYzIT09dC5ub2RlVHlwZXx8KHo9cCtrKTszPT09dC5ub2RlVHlwZSYmKHArPXQubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PShBPXQuZmlyc3RDaGlsZCkpYnJlYWs7eT10O3Q9QX1mb3IoOzspe2lmKHQ9PT1nKWJyZWFrIGI7eT09PWgmJisrY2E9PT1sJiYoeD1wKTt5PT09bSYmKytEPT09ayYmKHo9cCk7aWYobnVsbCE9PShBPXQubmV4dFNpYmxpbmcpKWJyZWFrO3Q9eTt5PXQucGFyZW50Tm9kZX10PUF9aD0tMT09PXh8fC0xPT09ej9udWxsOntzdGFydDp4LGVuZDp6fX1lbHNlIGg9bnVsbH1oPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9XG5udWxsO0VkPXthY3RpdmVFbGVtZW50RGV0YWNoZWQ6bnVsbCxmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO1k9ZTtkbyB0cnl7VGooKX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1lO2RvIHRyeXtmb3IoZz1hLGg9YjtudWxsIT09WTspe3ZhciBxPVkuZWZmZWN0VGFnO3EmMTYmJlJiKFkuc3RhdGVOb2RlLFwiXCIpO2lmKHEmMTI4KXt2YXIgQj1ZLmFsdGVybmF0ZTtpZihudWxsIT09Qil7dmFyIHc9Qi5yZWY7bnVsbCE9PXcmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdz93KG51bGwpOncuY3VycmVudD1udWxsKX19c3dpdGNoKHEmMTAzOCl7Y2FzZSAyOlBpKFkpO1kuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO1NpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgMTAyNDpZLmVmZmVjdFRhZyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlkuZWZmZWN0VGFnJj1cbi0xMDI1O1NpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgNDpTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDg6bD1ZLE1pKGcsbCxoKSxOaShsKX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO3c9RWQ7Qj14ZCgpO3E9dy5mb2N1c2VkRWxlbTtoPXcuc2VsZWN0aW9uUmFuZ2U7aWYoQiE9PXEmJnEmJnEub3duZXJEb2N1bWVudCYmd2QocS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxxKSl7bnVsbCE9PWgmJnlkKHEpJiYoQj1oLnN0YXJ0LHc9aC5lbmQsdm9pZCAwPT09dyYmKHc9QiksXCJzZWxlY3Rpb25TdGFydFwiaW4gcT8ocS5zZWxlY3Rpb25TdGFydD1CLHEuc2VsZWN0aW9uRW5kPU1hdGgubWluKHcscS52YWx1ZS5sZW5ndGgpKToodz0oQj1xLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmQi5kZWZhdWx0Vmlld3x8d2luZG93LHcuZ2V0U2VsZWN0aW9uJiZcbih3PXcuZ2V0U2VsZWN0aW9uKCksbD1xLnRleHRDb250ZW50Lmxlbmd0aCxnPU1hdGgubWluKGguc3RhcnQsbCksaD12b2lkIDA9PT1oLmVuZD9nOk1hdGgubWluKGguZW5kLGwpLCF3LmV4dGVuZCYmZz5oJiYobD1oLGg9ZyxnPWwpLGw9dmQocSxnKSxtPXZkKHEsaCksbCYmbSYmKDEhPT13LnJhbmdlQ291bnR8fHcuYW5jaG9yTm9kZSE9PWwubm9kZXx8dy5hbmNob3JPZmZzZXQhPT1sLm9mZnNldHx8dy5mb2N1c05vZGUhPT1tLm5vZGV8fHcuZm9jdXNPZmZzZXQhPT1tLm9mZnNldCkmJihCPUIuY3JlYXRlUmFuZ2UoKSxCLnNldFN0YXJ0KGwubm9kZSxsLm9mZnNldCksdy5yZW1vdmVBbGxSYW5nZXMoKSxnPmg/KHcuYWRkUmFuZ2UoQiksdy5leHRlbmQobS5ub2RlLG0ub2Zmc2V0KSk6KEIuc2V0RW5kKG0ubm9kZSxtLm9mZnNldCksdy5hZGRSYW5nZShCKSkpKSkpO0I9W107Zm9yKHc9cTt3PXcucGFyZW50Tm9kZTspMT09PXcubm9kZVR5cGUmJkIucHVzaCh7ZWxlbWVudDp3LGxlZnQ6dy5zY3JvbGxMZWZ0LFxudG9wOncuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHEuZm9jdXMmJnEuZm9jdXMoKTtmb3IocT0wO3E8Qi5sZW5ndGg7cSsrKXc9QltxXSx3LmVsZW1lbnQuc2Nyb2xsTGVmdD13LmxlZnQsdy5lbGVtZW50LnNjcm9sbFRvcD13LnRvcH1mZD0hIURkO0VkPURkPW51bGw7YS5jdXJyZW50PWM7WT1lO2RvIHRyeXtmb3IocT1hO251bGwhPT1ZOyl7dmFyIHViPVkuZWZmZWN0VGFnO3ViJjM2JiZKaShxLFkuYWx0ZXJuYXRlLFkpO2lmKHViJjEyOCl7Qj12b2lkIDA7dmFyIHZiPVkucmVmO2lmKG51bGwhPT12Yil7dmFyIFhjPVkuc3RhdGVOb2RlO3N3aXRjaChZLnRhZyl7Y2FzZSA1OkI9WGM7YnJlYWs7ZGVmYXVsdDpCPVhjfVwiZnVuY3Rpb25cIj09PXR5cGVvZiB2Yj92YihCKTp2Yi5jdXJyZW50PUJ9fVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1cbm51bGw7VmYoKTtXPWZ9ZWxzZSBhLmN1cnJlbnQ9YztpZihxailxaj0hMSxyaj1hLHNqPWI7ZWxzZSBmb3IoWT1lO251bGwhPT1ZOyliPVkubmV4dEVmZmVjdCxZLm5leHRFZmZlY3Q9bnVsbCxZPWI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7MD09PWImJihhaj1udWxsKTsxMDczNzQxODIzPT09Yj9hPT09dmo/dWorKzoodWo9MCx2aj1hKTp1aj0wO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBVaiYmVWooYy5zdGF0ZU5vZGUsZCk7WihhKTtpZihZaSl0aHJvdyBZaT0hMSxhPVppLFppPW51bGwsYTtpZigoVyZlaikhPT1WKXJldHVybiBudWxsO2dnKCk7cmV0dXJuIG51bGx9ZnVuY3Rpb24gVGooKXtmb3IoO251bGwhPT1ZOyl7dmFyIGE9WS5lZmZlY3RUYWc7MCE9PShhJjI1NikmJkdpKFkuYWx0ZXJuYXRlLFkpOzA9PT0oYSY1MTIpfHxxanx8KHFqPSEwLGRnKDk3LGZ1bmN0aW9uKCl7RGooKTtyZXR1cm4gbnVsbH0pKTtZPVkubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBEaigpe2lmKDkwIT09c2ope3ZhciBhPTk3PHNqPzk3OnNqO3NqPTkwO3JldHVybiBjZyhhLFZqKX19ZnVuY3Rpb24gVmooKXtpZihudWxsPT09cmopcmV0dXJuITE7dmFyIGE9cmo7cmo9bnVsbDtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMzEpKTt2YXIgYj1XO1d8PWdqO2ZvcihhPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09YTspe3RyeXt2YXIgYz1hO2lmKDAhPT0oYy5lZmZlY3RUYWcmNTEyKSlzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpIaSg1LGMpLElpKDUsYyl9fWNhdGNoKGQpe2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzMwKSk7RWkoYSxkKX1jPWEubmV4dEVmZmVjdDthLm5leHRFZmZlY3Q9bnVsbDthPWN9Vz1iO2dnKCk7cmV0dXJuITB9XG5mdW5jdGlvbiBXaihhLGIsYyl7Yj1BaShjLGIpO2I9WGkoYSxiLDEwNzM3NDE4MjMpO3hnKGEsYik7YT14aihhLDEwNzM3NDE4MjMpO251bGwhPT1hJiZaKGEpfWZ1bmN0aW9uIEVpKGEsYil7aWYoMz09PWEudGFnKVdqKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7V2ooYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09YWp8fCFhai5oYXMoZCkpKXthPUFpKGIsYSk7YT0kaShjLGEsMTA3Mzc0MTgyMyk7eGcoYyxhKTtjPXhqKGMsMTA3Mzc0MTgyMyk7bnVsbCE9PWMmJlooYyk7YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gT2ooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtUPT09YSYmVT09PWM/Uz09PXZpfHxTPT09dWkmJjEwNzM3NDE4MjM9PT1saiYmJGYoKS1UaTxwaj9FaihhLFUpOm9qPSEwOkFqKGEsYykmJihiPWEubGFzdFBpbmdlZFRpbWUsMCE9PWImJmI8Y3x8KGEubGFzdFBpbmdlZFRpbWU9YyxaKGEpKSl9ZnVuY3Rpb24gVmkoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1HZygpLGI9SGcoYixhLG51bGwpKTthPXhqKGEsYik7bnVsbCE9PWEmJlooYSl9dmFyIFJqO1xuUmo9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEpe3ZhciBlPWIucGVuZGluZ1Byb3BzO2lmKGEubWVtb2l6ZWRQcm9wcyE9PWV8fEsuY3VycmVudClyZz0hMDtlbHNle2lmKGQ8Yyl7cmc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6aGkoYik7WGgoKTticmVhaztjYXNlIDU6ZmgoYik7aWYoYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbilyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxudWxsO2JyZWFrO2Nhc2UgMTpMKGIudHlwZSkmJkdmKGIpO2JyZWFrO2Nhc2UgNDpkaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7ZT1iLnR5cGUuX2NvbnRleHQ7SShqZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7XG5pZigwIT09ZCYmZD49YylyZXR1cm4gamkoYSxiLGMpO0koTSxNLmN1cnJlbnQmMSk7Yj0kaChhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfUkoTSxNLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPWIuY2hpbGRFeHBpcmF0aW9uVGltZT49YztpZigwIT09KGEuZWZmZWN0VGFnJjY0KSl7aWYoZClyZXR1cm4gbWkoYSxiLGMpO2IuZWZmZWN0VGFnfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwpO0koTSxNLmN1cnJlbnQpO2lmKCFkKXJldHVybiBudWxsfXJldHVybiAkaChhLGIsYyl9cmc9ITF9fWVsc2Ugcmc9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9Q2YoYixKLmN1cnJlbnQpO3FnKGIsYyk7ZT1vaChudWxsLFxuYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEwoZCkpe3ZhciBmPSEwO0dmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3VnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZGZyhiLGQsZyxhKTtlLnVwZGF0ZXI9Smc7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9YjtOZyhiLGQsYSxjKTtiPWdpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLFIobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6YTp7ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9XG5udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7b2IoZSk7aWYoMSE9PWUuX3N0YXR1cyl0aHJvdyBlLl9yZXN1bHQ7ZT1lLl9yZXN1bHQ7Yi50eXBlPWU7Zj1iLnRhZz1YaihlKTthPWlnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWRpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1maShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVpoKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9YWkobnVsbCxiLGUsaWcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih1KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLGRpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLGZpKGEsYixkLGUsYyk7XG5jYXNlIDM6aGkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih1KDI4MikpO2Q9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt2ZyhhLGIpO3pnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpWGgoKSxiPSRoKGEsYixjKTtlbHNle2lmKGU9Yi5zdGF0ZU5vZGUuaHlkcmF0ZSlQaD1KZChiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLE9oPWIsZT1RaD0hMDtpZihlKWZvcihjPVlnKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmVmZmVjdFRhZz1jLmVmZmVjdFRhZyYtM3wxMDI0LGM9Yy5zaWJsaW5nO2Vsc2UgUihhLGIsZCxjKSxYaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGZoKGIpLG51bGw9PT1hJiZVaChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOlxubnVsbCxnPWUuY2hpbGRyZW4sR2QoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkdkKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLGVpKGEsYiksYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihSKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZVaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGppKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVhnKGIsbnVsbCxkLGMpOlIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLFpoKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUihhLFxuYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShqZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPSRlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFLLmN1cnJlbnQpe2I9JGgoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PVxuayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9d2coYyxudWxsKSxsLnRhZz0yLHhnKGgsbCkpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9Yyk7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmbC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTtwZyhoLnJldHVybixjKTtrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPVxuZ31SKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHFnKGIsYyksZT1zZyhlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9aWcoZSxiLnBlbmRpbmdQcm9wcyksZj1pZyhlLnR5cGUsZiksYWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGNpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEwoZCk/KGE9ITAsR2YoYikpOmE9ITEscWcoYixjKSxMZyhiLGQsZSksTmcoYixkLGUsYyksZ2kobnVsbCxcbmIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih1KDE1NixiLnRhZykpO307dmFyIFVqPW51bGwsTGk9bnVsbDtmdW5jdGlvbiBZaihhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtVaj1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyUm9vdChjLGEsdm9pZCAwLDY0PT09KGEuY3VycmVudC5lZmZlY3RUYWcmNjQpKX1jYXRjaChlKXt9fTtMaT1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfWNhdGNoKGUpe319fWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIFpqKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gU2goYSxiLGMsZCl7cmV0dXJuIG5ldyBaaihhLGIsYyxkKX1cbmZ1bmN0aW9uIGJpKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gWGooYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJpKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1nYilyZXR1cm4gMTE7aWYoYT09PWpiKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFNnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9U2goYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Yi5leHBpcmF0aW9uVGltZSxcbmZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmIucmVzcG9uZGVyc307Yy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBVZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYmkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuIFdnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgZmI6Zz04O2V8PTc7YnJlYWs7Y2FzZSBiYjpnPTg7ZXw9MTticmVhaztjYXNlIGNiOnJldHVybiBhPVNoKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9Y2IsYS50eXBlPWNiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaGI6cmV0dXJuIGE9U2goMTMsYyxiLGUpLGEudHlwZT1oYixhLmVsZW1lbnRUeXBlPWhiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaWI6cmV0dXJuIGE9U2goMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9aWIsYS5leHBpcmF0aW9uVGltZT1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGRiOmc9XG4xMDticmVhayBhO2Nhc2UgZWI6Zz05O2JyZWFrIGE7Y2FzZSBnYjpnPTExO2JyZWFrIGE7Y2FzZSBqYjpnPTE0O2JyZWFrIGE7Y2FzZSBrYjpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgbGI6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHUoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9U2goZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBXZyhhLGIsYyxkKXthPVNoKDcsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBUZyhhLGIsYyl7YT1TaCg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBWZyhhLGIsYyl7Yj1TaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGFrKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY3VycmVudD1udWxsO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMucGluZ0NhY2hlPXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dGhpcy5maW5pc2hlZFdvcms9bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT05MDt0aGlzLmxhc3RFeHBpcmVkVGltZT10aGlzLmxhc3RQaW5nZWRUaW1lPXRoaXMubmV4dEtub3duUGVuZGluZ0xldmVsPXRoaXMubGFzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFBlbmRpbmdUaW1lPTB9XG5mdW5jdGlvbiBBaihhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lO2E9YS5sYXN0U3VzcGVuZGVkVGltZTtyZXR1cm4gMCE9PWMmJmM+PWImJmE8PWJ9ZnVuY3Rpb24geGkoYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZSxkPWEubGFzdFN1c3BlbmRlZFRpbWU7YzxiJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9Yik7aWYoZD5ifHwwPT09YylhLmxhc3RTdXNwZW5kZWRUaW1lPWI7Yjw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7Yjw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKX1cbmZ1bmN0aW9uIHlpKGEsYil7Yj5hLmZpcnN0UGVuZGluZ1RpbWUmJihhLmZpcnN0UGVuZGluZ1RpbWU9Yik7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7MCE9PWMmJihiPj1jP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpiPj1hLmxhc3RTdXNwZW5kZWRUaW1lJiYoYS5sYXN0U3VzcGVuZGVkVGltZT1iKzEpLGI+YS5uZXh0S25vd25QZW5kaW5nTGV2ZWwmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1iKSl9ZnVuY3Rpb24gQ2ooYSxiKXt2YXIgYz1hLmxhc3RFeHBpcmVkVGltZTtpZigwPT09Y3x8Yz5iKWEubGFzdEV4cGlyZWRUaW1lPWJ9XG5mdW5jdGlvbiBiayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1HZygpLGc9RGcuc3VzcGVuc2U7Zj1IZyhmLGUsZyk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOntpZihkYyhjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEwoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih1KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihMKGspKXtjPUZmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUFmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9d2coZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1cbmQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTt4ZyhlLGIpO0lnKGUsZik7cmV0dXJuIGZ9ZnVuY3Rpb24gY2soYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBkayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO251bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkJiZhLnJldHJ5VGltZTxiJiYoYS5yZXRyeVRpbWU9Yil9ZnVuY3Rpb24gZWsoYSxiKXtkayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmZGsoYSxiKX1cbmZ1bmN0aW9uIGZrKGEsYixjKXtjPW51bGwhPWMmJiEwPT09Yy5oeWRyYXRlO3ZhciBkPW5ldyBhayhhLGIsYyksZT1TaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7ZC5jdXJyZW50PWU7ZS5zdGF0ZU5vZGU9ZDt1ZyhlKTthW09kXT1kLmN1cnJlbnQ7YyYmMCE9PWImJkpjKGEsOT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQpO3RoaXMuX2ludGVybmFsUm9vdD1kfWZrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7YmsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07ZmsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87YmsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW09kXT1udWxsfSl9O1xuZnVuY3Rpb24gZ2soYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIGhrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgZmsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiBpayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2guY2FsbChhKX19YmsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1oayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1jayhnKTtrLmNhbGwoYSl9fU5qKGZ1bmN0aW9uKCl7YmsoYixnLGEsZSl9KX1yZXR1cm4gY2soZyl9ZnVuY3Rpb24gamsoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjokYSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbndjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWhnKEdnKCksMTUwLDEwMCk7SWcoYSxiKTtlayhhLGIpfX07eGM9ZnVuY3Rpb24oYSl7MTM9PT1hLnRhZyYmKElnKGEsMyksZWsoYSwzKSl9O3ljPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUdnKCk7Yj1IZyhiLGEsbnVsbCk7SWcoYSxiKTtlayhhLGIpfX07XG56YT1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkNiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1RZChkKTtpZighZSl0aHJvdyBFcnJvcih1KDkwKSk7eWIoZCk7Q2IoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOktiKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZIYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0ZhPU1qO1xuR2E9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1XO1d8PTQ7dHJ5e3JldHVybiBjZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtXPWYsVz09PVYmJmdnKCl9fTtIYT1mdW5jdGlvbigpeyhXJigxfGZqfGdqKSk9PT1WJiYoTGooKSxEaigpKX07SWE9ZnVuY3Rpb24oYSxiKXt2YXIgYz1XO1d8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX07ZnVuY3Rpb24ga2soYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gamsoYSxiLG51bGwsYyl9dmFyIGxrPXtFdmVudHM6W05jLFBkLFFkLHhhLHRhLFhkLGZ1bmN0aW9uKGEpe2pjKGEsV2QpfSxEYSxFYSxpZCxtYyxEaix7Y3VycmVudDohMX1dfTtcbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBZaihuKHt9LGEse292ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWhjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9LGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6dGMsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4xMy4xXCIsXG5yZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWxrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPWtrO2V4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHUoMTg4KSk7dGhyb3cgRXJyb3IodSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1oYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O1xuZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgxODcpKTt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBjZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtXPWMsZ2coKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGlrKG51bGwsYSxiLCEwLGMpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGlrKG51bGwsYSxiLCExLGMpfTtcbmV4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighZ2soYSkpdGhyb3cgRXJyb3IodSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KE5qKGZ1bmN0aW9uKCl7aWsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW09kXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9TWo7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4ga2soYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFnayhjKSl0aHJvdyBFcnJvcih1KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcil0aHJvdyBFcnJvcih1KDM4KSk7cmV0dXJuIGlrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xMy4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjE5LjFcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsayxsO1xuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHA9bnVsbCxxPW51bGwsdD1mdW5jdGlvbigpe2lmKG51bGwhPT1wKXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3AoITAsYSk7cD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodCwwKSxiO319LHU9RGF0ZS5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpLXV9O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXA/c2V0VGltZW91dChmLDAsYSk6KHA9YSxzZXRUaW1lb3V0KHQsMCkpfTtnPWZ1bmN0aW9uKGEsYil7cT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQocSl9O2s9ZnVuY3Rpb24oKXtyZXR1cm4hMX07bD1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB3PXdpbmRvdy5wZXJmb3JtYW5jZSx4PXdpbmRvdy5EYXRlLFxueT13aW5kb3cuc2V0VGltZW91dCx6PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgQT13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKX1pZihcIm9iamVjdFwiPT09XG50eXBlb2YgdyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHcubm93KWV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHcubm93KCl9O2Vsc2V7dmFyIEI9eC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpLUJ9fXZhciBDPSExLEQ9bnVsbCxFPS0xLEY9NSxHPTA7az1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1HfTtsPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3QgdW5zdXBwb3J0ZWRcIik6Rj0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEg9bmV3IE1lc3NhZ2VDaGFubmVsLEk9SC5wb3J0MjtILnBvcnQxLm9ubWVzc2FnZT1cbmZ1bmN0aW9uKCl7aWYobnVsbCE9PUQpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7Rz1hK0Y7dHJ5e0QoITAsYSk/SS5wb3N0TWVzc2FnZShudWxsKTooQz0hMSxEPW51bGwpfWNhdGNoKGIpe3Rocm93IEkucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQz0hMX07Zj1mdW5jdGlvbihhKXtEPWE7Q3x8KEM9ITAsSS5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtFPXkoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3ooRSk7RT0tMX19ZnVuY3Rpb24gSihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxLKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBMKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBNKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPksobixjKSl2b2lkIDAhPT1yJiYwPksocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPksocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEsoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIE49W10sTz1bXSxQPTEsUT1udWxsLFI9MyxTPSExLFQ9ITEsVT0hMTtcbmZ1bmN0aW9uIFYoYSl7Zm9yKHZhciBiPUwoTyk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylNKE8pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpTShPKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEooTixiKTtlbHNlIGJyZWFrO2I9TChPKX19ZnVuY3Rpb24gVyhhKXtVPSExO1YoYSk7aWYoIVQpaWYobnVsbCE9PUwoTikpVD0hMCxmKFgpO2Vsc2V7dmFyIGI9TChPKTtudWxsIT09YiYmZyhXLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFgoYSxiKXtUPSExO1UmJihVPSExLGgoKSk7Uz0hMDt2YXIgYz1SO3RyeXtWKGIpO2ZvcihRPUwoTik7bnVsbCE9PVEmJighKFEuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFrKCkpOyl7dmFyIGQ9US5jYWxsYmFjaztpZihudWxsIT09ZCl7US5jYWxsYmFjaz1udWxsO1I9US5wcmlvcml0eUxldmVsO3ZhciBlPWQoUS5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP1EuY2FsbGJhY2s9ZTpRPT09TChOKSYmTShOKTtWKGIpfWVsc2UgTShOKTtRPUwoTil9aWYobnVsbCE9PVEpdmFyIG09ITA7ZWxzZXt2YXIgbj1MKE8pO251bGwhPT1uJiZnKFcsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e1E9bnVsbCxSPWMsUz0hMX19XG5mdW5jdGlvbiBZKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319dmFyIFo9bDtleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7VHx8U3x8KFQ9ITAsZihYKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBSfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEwoTil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUil7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Un12YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1I9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVo7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1SO1I9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1I9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3ZhciBlPWMuZGVsYXk7ZT1cIm51bWJlclwiPT09dHlwZW9mIGUmJjA8ZT9kK2U6ZDtjPVwibnVtYmVyXCI9PT10eXBlb2YgYy50aW1lb3V0P2MudGltZW91dDpZKGEpfWVsc2UgYz1ZKGEpLGU9ZDtjPWUrYzthPXtpZDpQKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmUsZXhwaXJhdGlvblRpbWU6Yyxzb3J0SW5kZXg6LTF9O2U+ZD8oYS5zb3J0SW5kZXg9ZSxKKE8sYSksbnVsbD09PUwoTikmJmE9PT1MKE8pJiYoVT9oKCk6VT0hMCxnKFcsZS1kKSkpOihhLnNvcnRJbmRleD1jLEooTixhKSxUfHxTfHwoVD0hMCxmKFgpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7VihhKTt2YXIgYj1MKE4pO3JldHVybiBiIT09USYmbnVsbCE9PVEmJm51bGwhPT1iJiZudWxsIT09Yi5jYWxsYmFjayYmYi5zdGFydFRpbWU8PWEmJmIuZXhwaXJhdGlvblRpbWU8US5leHBpcmF0aW9uVGltZXx8aygpfTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1SO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtSPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9mb290ZXIuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18odHJ1ZSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJmb290ZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIwMywgNTAsIDUwLCAwLjcxKTtcXHJcXG59XFxyXFxuXFxyXFxuLmZvb3Rlci1oZWFkZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcclxcbn1cXHJcXG5cXHJcXG5mb290ZXIgYSB7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uZm9vdGVyLWhlYWRlciB7XFxyXFxuICAgIHdpZHRoOiA4MCU7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuZGl2LmxvZ28tY29udGFpbmVyIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB0b3A6IDcwcHg7XFxyXFxufVxcclxcblxcclxcbi5saW5rLWNvbnRhaW5lciB7XFxyXFxuICAgIGJvcmRlci1ib3R0b206IDJweCB3aGl0ZSBzb2xpZDtcXHJcXG4gICAgd2lkdGg6IDgwJTtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDQwcHg7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAyMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubGluay1jb250YWluZXIgYSB7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbn1cXHJcXG5cXHJcXG4ubGluay0xIHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICBoZWlnaHQ6IDE1MHB4O1xcclxcbiAgICBib3JkZXItcmlnaHQ6IDFweCB3aGl0ZSBzb2xpZDtcXHJcXG4gICAgd2lkdGg6IDMyJTtcXHJcXG59XFxyXFxuXFxyXFxuLmxpbmstMSBhOm50aC1jaGlsZCgxKSB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgdG9wOiA1MHB4O1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4ubGluay0xIGE6bnRoLWNoaWxkKDIpIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB0b3A6IDgwcHg7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5saW5rLTIge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgIGhlaWdodDogMTUwcHg7XFxyXFxuICAgIGJvcmRlci1yaWdodDogMXB4IHdoaXRlIHNvbGlkO1xcclxcbiAgICB3aWR0aDogMzIlO1xcclxcbn1cXHJcXG5cXHJcXG4ubGluay0yIGE6bnRoLWNoaWxkKDEpIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB0b3A6IDUwcHg7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5saW5rLTIgYTpudGgtY2hpbGQoMikge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHRvcDogODBweDtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmxpbmstMyB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgaGVpZ2h0OiAxNTBweDtcXHJcXG4gICAgd2lkdGg6IDIwJTtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubmV0d29ya3Mge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgIGJvcmRlci1ib3R0b206IDFweCB3aGl0ZSBzb2xpZDtcXHJcXG4gICAgd2lkdGg6IDUwJTtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4ubmV0d29ya3MtY2hpbGQge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmU7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBwYWRkaW5nLXRvcDogNTBweDtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDUwcHg7XFxyXFxufVxcclxcblxcclxcbi5jb3B5cmlnaHQge1xcclxcbiAgICB3aWR0aDogMjAlO1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiZm9vdGVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLHlDQUF5QztBQUM3Qzs7QUFFQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxZQUFZO0lBQ1oscUJBQXFCO0FBQ3pCOztBQUVBO0lBQ0ksVUFBVTtJQUNWLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsU0FBUztBQUNiOztBQUVBO0lBQ0ksOEJBQThCO0lBQzlCLFVBQVU7SUFDVixpQkFBaUI7SUFDakIsb0JBQW9CO0FBQ3hCOztBQUVBO0lBQ0ksY0FBYztBQUNsQjs7QUFFQTtJQUNJLHFCQUFxQjtJQUNyQixhQUFhO0lBQ2IsNkJBQTZCO0lBQzdCLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsY0FBYztJQUNkLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsY0FBYztJQUNkLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLHFCQUFxQjtJQUNyQixhQUFhO0lBQ2IsNkJBQTZCO0lBQzdCLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsY0FBYztJQUNkLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixTQUFTO0lBQ1QsY0FBYztJQUNkLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLHFCQUFxQjtJQUNyQixhQUFhO0lBQ2IsVUFBVTtJQUNWLGtCQUFrQjtJQUNsQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxxQkFBcUI7SUFDckIsOEJBQThCO0lBQzlCLFVBQVU7SUFDVixZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLG9CQUFvQjtBQUN4Qjs7QUFFQTtJQUNJLFVBQVU7SUFDVixZQUFZO0lBQ1osZUFBZTtBQUNuQlwiLFwiZmlsZVwiOlwiZm9vdGVyLmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJmb290ZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIwMywgNTAsIDUwLCAwLjcxKTtcXHJcXG59XFxyXFxuXFxyXFxuLmZvb3Rlci1oZWFkZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcclxcbn1cXHJcXG5cXHJcXG5mb290ZXIgYSB7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uZm9vdGVyLWhlYWRlciB7XFxyXFxuICAgIHdpZHRoOiA4MCU7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuZGl2LmxvZ28tY29udGFpbmVyIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB0b3A6IDcwcHg7XFxyXFxufVxcclxcblxcclxcbi5saW5rLWNvbnRhaW5lciB7XFxyXFxuICAgIGJvcmRlci1ib3R0b206IDJweCB3aGl0ZSBzb2xpZDtcXHJcXG4gICAgd2lkdGg6IDgwJTtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDQwcHg7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAyMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubGluay1jb250YWluZXIgYSB7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbn1cXHJcXG5cXHJcXG4ubGluay0xIHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICBoZWlnaHQ6IDE1MHB4O1xcclxcbiAgICBib3JkZXItcmlnaHQ6IDFweCB3aGl0ZSBzb2xpZDtcXHJcXG4gICAgd2lkdGg6IDMyJTtcXHJcXG59XFxyXFxuXFxyXFxuLmxpbmstMSBhOm50aC1jaGlsZCgxKSB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgdG9wOiA1MHB4O1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4ubGluay0xIGE6bnRoLWNoaWxkKDIpIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB0b3A6IDgwcHg7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5saW5rLTIge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgIGhlaWdodDogMTUwcHg7XFxyXFxuICAgIGJvcmRlci1yaWdodDogMXB4IHdoaXRlIHNvbGlkO1xcclxcbiAgICB3aWR0aDogMzIlO1xcclxcbn1cXHJcXG5cXHJcXG4ubGluay0yIGE6bnRoLWNoaWxkKDEpIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB0b3A6IDUwcHg7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5saW5rLTIgYTpudGgtY2hpbGQoMikge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIHRvcDogODBweDtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmxpbmstMyB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgaGVpZ2h0OiAxNTBweDtcXHJcXG4gICAgd2lkdGg6IDIwJTtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4ubmV0d29ya3Mge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgIGJvcmRlci1ib3R0b206IDFweCB3aGl0ZSBzb2xpZDtcXHJcXG4gICAgd2lkdGg6IDUwJTtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4ubmV0d29ya3MtY2hpbGQge1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmU7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBwYWRkaW5nLXRvcDogNTBweDtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDUwcHg7XFxyXFxufVxcclxcblxcclxcbi5jb3B5cmlnaHQge1xcclxcbiAgICB3aWR0aDogMjAlO1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIGZvbnQtc2l6ZTogMTJweDtcXHJcXG59XCJdfV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbmF2YmFyLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKHRydWUpO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLm5hdmJhciB7XFxyXFxuICAgIGJhY2tncm91bmQ6IHJnYmEoMjAzLCA1MCwgNTAsIDAuNzEpO1xcclxcbiAgICBoZWlnaHQ6IDEwMHB4O1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gICAgZm9udC1mYW1pbHk6IENhcmRvO1xcclxcbn1cXHJcXG5cXHJcXG4ubmFtZSB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgd2lkdGg6IDI1MHB4O1xcclxcbiAgICBoZWlnaHQ6IDQycHg7XFxyXFxuICAgIGxlZnQ6IDY2cHg7XFxyXFxuICAgIHRvcDogMzlweDtcXHJcXG4gICAgZm9udC1mYW1pbHk6IENhcmRvO1xcclxcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICAgIGZvbnQtc2l6ZTogMzZweDtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XFxyXFxuICAgIC8qIG9yIDU2JSAqL1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIGNvbG9yOiAjRkZGRkZGO1xcclxcbn1cXHJcXG5cXHJcXG4ubG9nbyB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgd2lkdGg6IDUwcHg7XFxyXFxuICAgIGhlaWdodDogNTVweDtcXHJcXG4gICAgbGVmdDogMzBweDtcXHJcXG4gICAgdG9wOiAxNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4udGl0cmUyIHtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICB3aWR0aDogMTc4cHg7XFxyXFxuICAgIGhlaWdodDogMjhweDtcXHJcXG4gICAgbGVmdDogMjkzcHg7XFxyXFxuICAgIHRvcDogNDJweDtcXHJcXG4gICAgZm9udC1mYW1pbHk6IENhcmRvO1xcclxcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICAgIGZvbnQtc2l6ZTogMjRweDtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XFxyXFxuICAgIC8qIG9yIDgzJSAqL1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIGNvbG9yOiAjRkZGRkZGO1xcclxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJuYXZiYXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksbUNBQW1DO0lBQ25DLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLFlBQVk7SUFDWixVQUFVO0lBQ1YsU0FBUztJQUNULGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsV0FBVztJQUNYLGtCQUFrQjtJQUNsQixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLFdBQVc7SUFDWCxZQUFZO0lBQ1osVUFBVTtJQUNWLFNBQVM7QUFDYjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osWUFBWTtJQUNaLFdBQVc7SUFDWCxTQUFTO0lBQ1Qsa0JBQWtCO0lBQ2xCLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLGNBQWM7QUFDbEJcIixcImZpbGVcIjpcIm5hdmJhci5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm5hdmJhciB7XFxyXFxuICAgIGJhY2tncm91bmQ6IHJnYmEoMjAzLCA1MCwgNTAsIDAuNzEpO1xcclxcbiAgICBoZWlnaHQ6IDEwMHB4O1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gICAgZm9udC1mYW1pbHk6IENhcmRvO1xcclxcbn1cXHJcXG5cXHJcXG4ubmFtZSB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgd2lkdGg6IDI1MHB4O1xcclxcbiAgICBoZWlnaHQ6IDQycHg7XFxyXFxuICAgIGxlZnQ6IDY2cHg7XFxyXFxuICAgIHRvcDogMzlweDtcXHJcXG4gICAgZm9udC1mYW1pbHk6IENhcmRvO1xcclxcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICAgIGZvbnQtc2l6ZTogMzZweDtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XFxyXFxuICAgIC8qIG9yIDU2JSAqL1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIGNvbG9yOiAjRkZGRkZGO1xcclxcbn1cXHJcXG5cXHJcXG4ubG9nbyB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgd2lkdGg6IDUwcHg7XFxyXFxuICAgIGhlaWdodDogNTVweDtcXHJcXG4gICAgbGVmdDogMzBweDtcXHJcXG4gICAgdG9wOiAxNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4udGl0cmUyIHtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICB3aWR0aDogMTc4cHg7XFxyXFxuICAgIGhlaWdodDogMjhweDtcXHJcXG4gICAgbGVmdDogMjkzcHg7XFxyXFxuICAgIHRvcDogNDJweDtcXHJcXG4gICAgZm9udC1mYW1pbHk6IENhcmRvO1xcclxcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuICAgIGZvbnQtc2l6ZTogMjRweDtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XFxyXFxuICAgIC8qIG9yIDgzJSAqL1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIGNvbG9yOiAjRkZGRkZGO1xcclxcbn1cIl19XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgX19ERVZfXyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDEgPyBsZW4gLSAxIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMTsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAxXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cblxuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KG51bGwsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbW9kYWwuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18odHJ1ZSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuTW9kYWwge1xcclxcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICAgIHotaW5kZXg6IDUwMDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xcclxcbiAgICAvKiBib3gtc2hhZG93OiAxcHggMXB4IDFweCBibGFjazsqL1xcclxcbiAgICBwYWRkaW5nOiAxNnB4O1xcclxcbiAgICBsZWZ0OiAxNSU7XFxyXFxuICAgIHRvcDogMzAlO1xcclxcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLW91dDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDYwMHB4KSB7XFxyXFxuICAgIC5Nb2RhbCB7XFxyXFxuICAgICAgICB3aWR0aDogNTAwcHg7XFxyXFxuICAgICAgICBsZWZ0OiBjYWxjKDUwJSAtIDI1MHB4KTtcXHJcXG4gICAgfVxcclxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJtb2RhbC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxlQUFlO0lBQ2YsWUFBWTtJQUNaLHVCQUF1QjtJQUN2QixXQUFXO0lBQ1gsc0JBQXNCO0lBQ3RCLGtDQUFrQztJQUNsQyxhQUFhO0lBQ2IsU0FBUztJQUNULFFBQVE7SUFDUixzQkFBc0I7SUFDdEIsNkJBQTZCO0lBQzdCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJO1FBQ0ksWUFBWTtRQUNaLHVCQUF1QjtJQUMzQjtBQUNKXCIsXCJmaWxlXCI6XCJtb2RhbC5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLk1vZGFsIHtcXHJcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgICB6LWluZGV4OiA1MDA7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcXHJcXG4gICAgLyogYm94LXNoYWRvdzogMXB4IDFweCAxcHggYmxhY2s7Ki9cXHJcXG4gICAgcGFkZGluZzogMTZweDtcXHJcXG4gICAgbGVmdDogMTUlO1xcclxcbiAgICB0b3A6IDMwJTtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZS1vdXQ7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxufVxcclxcblxcclxcbkBtZWRpYSAobWluLXdpZHRoOiA2MDBweCkge1xcclxcbiAgICAuTW9kYWwge1xcclxcbiAgICAgICAgd2lkdGg6IDUwMHB4O1xcclxcbiAgICAgICAgbGVmdDogY2FsYyg1MCUgLSAyNTBweCk7XFxyXFxuICAgIH1cXHJcXG59XCJdfV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmVjaGVyY2hlLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyBmcm9tIFwiLi4vaW1nL2ltYWdlX3NpdGUvaW1hZ2VzL2RvLXBldC1zaXR0ZXJzLW5lZWQtcGV0LXNpdHRlci1pbnN1cmFuY2UtdGhlLXBldC1zaXR0ZXItYmxvZy5qcGdcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyBmcm9tIFwiLi4vaW1nL2ltYWdlX3NpdGUvaW1hZ2VzL0RvZ3NfQ2F0c19SYWJiaXRzXzUwNDc1OC5qcGdcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipwYWdlIFJlY2hlcmNoZSoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxyXFxuXFxyXFxuLmZvcm1SZWNoZXJjaGVDb250YWluZXIge1xcclxcbiAgICAvKmJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vaW1nL2Nhcm91c3NlbC9pbWFnZTMuanBnJyk7Ki9cXHJcXG4gICAgd2lkdGg6IDYwJTtcXHJcXG4gICAgbWFyZ2luOiBhdXRvXFxyXFxufVxcclxcblxcclxcbmgxIHtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4uaW5mb2xldHRyZURpdiB7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7XFxyXFxuICAgIC8qIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vaW1nL2ltYWdlX3NpdGUvaW1hZ2VzL0RvZ3NfQ2F0c19SYWJiaXRzXzUwNDc1OC5qcGcnKTsqL1xcclxcbiAgICB3aWR0aDogNjAlO1xcclxcbiAgICBoZWlnaHQ6IDUwdmg7XFxyXFxuICAgIG1hcmdpbjogYXV0b1xcclxcbn1cXHJcXG5cXHJcXG4uaW5mb2xldHRyZURpdiBoMSB7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgd2lkdGg6IDgyJTtcXHJcXG59XFxyXFxuXFxyXFxuLnJlc3VsdGF0UmVjaGVyY2hlRGl2IHtcXHJcXG4gICAgYm9yZGVyOiBzb2xpZCByZ2JhKDIwMywgNTAsIDUwLCAwLjcxKTtcXHJcXG4gICAgLyogYm9yZGVyLXJhZGl1czogMiU7ICovXFxyXFxuICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDElO1xcclxcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMSU7XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIHdpZHRoOiA4MCU7XFxyXFxuICAgIGJveC1zaGFkb3c6IGdyYXk7XFxyXFxuICAgIC8qIGJveC1zaGFkb3c6IDZweCAzcHggZ3JleTsgKi9cXHJcXG4gICAgbWFyZ2luOiAxJTtcXHJcXG4gICAgYm94LXNoYWRvdzogMCAwIDdweCAxcHggZ3JleTtcXHJcXG59XFxyXFxuXFxyXFxuLnJlc3VsdGF0UmVjaGVyY2hlRGl2IGltZyB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdWx0YXRSZWNoZXJjaGVEaXYgaDIge1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIGZvbnQtc2l6ZTogNTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnJlc3VsdGF0UmVjaGVyY2hlRGl2IGgyIHtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICBmb250LXNpemU6IDUwcHg7XFxyXFxufVxcclxcblxcclxcbi5yZXN1bHRhdFJlY2hlcmNoZURpdiBidXR0b24ge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIwMywgNTAsIDUwLCAwLjcxKTtcXHJcXG4gICAgLyogYm9yZGVyOiBub25lOyAqL1xcclxcbiAgICBib3JkZXItY29sb3I6IDFweCBzb2xpZCBncmV5O1xcclxcbiAgICBib3JkZXItY29sb3I6IG9sZGxhY2U7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDUlO1xcclxcbn1cXHJcXG5cXHJcXG5oMiwgcCB7XFxyXFxuICAgIC8qIHdpZHRoOiAyMCU7Ki9cXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG5idXR0b24ge1xcclxcbiAgICB3aWR0aDogNTAlO1xcclxcbn1cXHJcXG5cXHJcXG4vKmgxIHtcXHJcXG4gICAgd2lkdGg6IDU5JTtcXHJcXG59Ki9cXHJcXG5cXHJcXG4uZGl2QW5ub25jZSB7XFxyXFxuICAgIG1hcmdpbjogNSU7XFxyXFxufVxcclxcblxcclxcbmJvZHkge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjQ0MzM2MWZcXHJcXG59XFxyXFxuXFxyXFxuI2RpdlB1YmxpY2l0ZSB7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIik7XFxyXFxuICAgIGhlaWdodDogNjB2aDtcXHJcXG59XFxyXFxuXFxyXFxuI2RpdlBsdWJpY2l0ZTIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fICsgXCIpO1xcclxcbiAgICBoZWlnaHQ6IDYwdmg7XFxyXFxuICAgIG1hcmdpbi10b3A6IDIlXFxyXFxufVxcclxcblxcclxcbi5zdGFyIHtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICB0cmFuc2l0aW9uOiBjb2xvciAyMDBtcztcXHJcXG59XFxyXFxuXFxyXFxuI2luZm9sZXR0cmUge1xcclxcbiAgICBvcGFjaXR5OiAwLjU7XFxyXFxuICAgIHdpZHRoOiA0MCU7XFxyXFxufVxcclxcblxcclxcbiNzZXJ2aWNlMSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNzYsIDE3NSwgODAsIDAuMyk7XFxyXFxufVxcclxcblxcclxcbiNzZXJ2aWNlMiB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNzYsIDE3NSwgODAsIDAuMyk7XFxyXFxufVxcclxcblxcclxcbi5ncmV5Ym94ZGl2IHtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICB0b3A6IDIwJTtcXHJcXG4gICAgbGVmdDogMjUlO1xcclxcbiAgICBtYXJnaW4tbGVmdDogNDAlO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiAyMDBweDtcXHJcXG4gICAgcGFkZGluZy10b3A6IDUwcHg7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgb3BhY2l0eTogMC44O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmV5O1xcclxcbiAgICB3aWR0aDogNTAlO1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxufVxcclxcblxcclxcbi5zZXJ2aWNlUHJvcG9zZXMge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIyMCwgMjIwLCAyMjAsIDAuNyk7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcInJlY2hlcmNoZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsa0dBQWtHOztBQUVsRztJQUNJLHdEQUF3RDtJQUN4RCxVQUFVO0lBQ1Y7QUFDSjs7QUFFQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSx5REFBa0g7SUFDbEgsbUZBQW1GO0lBQ25GLFVBQVU7SUFDVixZQUFZO0lBQ1o7QUFDSjs7QUFFQTtJQUNJLFlBQVk7SUFDWixVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxxQ0FBcUM7SUFDckMsdUJBQXVCO0lBQ3ZCLDZCQUE2QjtJQUM3Qiw4QkFBOEI7SUFDOUIsYUFBYTtJQUNiLFVBQVU7SUFDVixnQkFBZ0I7SUFDaEIsOEJBQThCO0lBQzlCLFVBQVU7SUFDViw0QkFBNEI7QUFDaEM7O0FBRUE7SUFDSSxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxZQUFZO0lBQ1osZUFBZTtBQUNuQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixlQUFlO0FBQ25COztBQUVBO0lBQ0kseUNBQXlDO0lBQ3pDLGtCQUFrQjtJQUNsQiw0QkFBNEI7SUFDNUIscUJBQXFCO0lBQ3JCLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGVBQWU7SUFDZixlQUFlO0FBQ25COztBQUVBO0lBQ0ksVUFBVTtBQUNkOztBQUVBOztFQUVFOztBQUVGO0lBQ0ksVUFBVTtBQUNkOztBQUVBO0lBQ0k7QUFDSjs7QUFFQTtJQUNJLHlEQUE4RTtJQUM5RSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0kseURBQThFO0lBQzlFLFlBQVk7SUFDWjtBQUNKOztBQUVBO0lBQ0ksZUFBZTtJQUNmLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixVQUFVO0FBQ2Q7O0FBRUE7SUFDSSx3Q0FBd0M7QUFDNUM7O0FBRUE7SUFDSSx3Q0FBd0M7QUFDNUM7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsUUFBUTtJQUNSLFNBQVM7SUFDVCxnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsWUFBWTtJQUNaLFlBQVk7SUFDWixzQkFBc0I7SUFDdEIsVUFBVTtJQUNWLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSwwQ0FBMEM7QUFDOUNcIixcImZpbGVcIjpcInJlY2hlcmNoZS5jc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipwYWdlIFJlY2hlcmNoZSoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxyXFxuXFxyXFxuLmZvcm1SZWNoZXJjaGVDb250YWluZXIge1xcclxcbiAgICAvKmJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vaW1nL2Nhcm91c3NlbC9pbWFnZTMuanBnJyk7Ki9cXHJcXG4gICAgd2lkdGg6IDYwJTtcXHJcXG4gICAgbWFyZ2luOiBhdXRvXFxyXFxufVxcclxcblxcclxcbmgxIHtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbn1cXHJcXG5cXHJcXG4uaW5mb2xldHRyZURpdiB7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vaW1nL2ltYWdlX3NpdGUvaW1hZ2VzL2RvLXBldC1zaXR0ZXJzLW5lZWQtcGV0LXNpdHRlci1pbnN1cmFuY2UtdGhlLXBldC1zaXR0ZXItYmxvZy5qcGcnKTtcXHJcXG4gICAgLyogYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuLi9pbWcvaW1hZ2Vfc2l0ZS9pbWFnZXMvRG9nc19DYXRzX1JhYmJpdHNfNTA0NzU4LmpwZycpOyovXFxyXFxuICAgIHdpZHRoOiA2MCU7XFxyXFxuICAgIGhlaWdodDogNTB2aDtcXHJcXG4gICAgbWFyZ2luOiBhdXRvXFxyXFxufVxcclxcblxcclxcbi5pbmZvbGV0dHJlRGl2IGgxIHtcXHJcXG4gICAgbWFyZ2luOiBhdXRvO1xcclxcbiAgICB3aWR0aDogODIlO1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdWx0YXRSZWNoZXJjaGVEaXYge1xcclxcbiAgICBib3JkZXI6IHNvbGlkIHJnYmEoMjAzLCA1MCwgNTAsIDAuNzEpO1xcclxcbiAgICAvKiBib3JkZXItcmFkaXVzOiAyJTsgKi9cXHJcXG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMSU7XFxyXFxuICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAxJTtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgd2lkdGg6IDgwJTtcXHJcXG4gICAgYm94LXNoYWRvdzogZ3JheTtcXHJcXG4gICAgLyogYm94LXNoYWRvdzogNnB4IDNweCBncmV5OyAqL1xcclxcbiAgICBtYXJnaW46IDElO1xcclxcbiAgICBib3gtc2hhZG93OiAwIDAgN3B4IDFweCBncmV5O1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdWx0YXRSZWNoZXJjaGVEaXYgaW1nIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxufVxcclxcblxcclxcbi5yZXN1bHRhdFJlY2hlcmNoZURpdiBoMiB7XFxyXFxuICAgIG1hcmdpbjogYXV0bztcXHJcXG4gICAgZm9udC1zaXplOiA1MHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucmVzdWx0YXRSZWNoZXJjaGVEaXYgaDIge1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgIGZvbnQtc2l6ZTogNTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnJlc3VsdGF0UmVjaGVyY2hlRGl2IGJ1dHRvbiB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjAzLCA1MCwgNTAsIDAuNzEpO1xcclxcbiAgICAvKiBib3JkZXI6IG5vbmU7ICovXFxyXFxuICAgIGJvcmRlci1jb2xvcjogMXB4IHNvbGlkIGdyZXk7XFxyXFxuICAgIGJvcmRlci1jb2xvcjogb2xkbGFjZTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNSU7XFxyXFxufVxcclxcblxcclxcbmgyLCBwIHtcXHJcXG4gICAgLyogd2lkdGg6IDIwJTsqL1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbmJ1dHRvbiB7XFxyXFxuICAgIHdpZHRoOiA1MCU7XFxyXFxufVxcclxcblxcclxcbi8qaDEge1xcclxcbiAgICB3aWR0aDogNTklO1xcclxcbn0qL1xcclxcblxcclxcbi5kaXZBbm5vbmNlIHtcXHJcXG4gICAgbWFyZ2luOiA1JTtcXHJcXG59XFxyXFxuXFxyXFxuYm9keSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmNDQzMzYxZlxcclxcbn1cXHJcXG5cXHJcXG4jZGl2UHVibGljaXRlIHtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuLi9pbWcvaW1hZ2Vfc2l0ZS9pbWFnZXMvRG9nc19DYXRzX1JhYmJpdHNfNTA0NzU4LmpwZycpO1xcclxcbiAgICBoZWlnaHQ6IDYwdmg7XFxyXFxufVxcclxcblxcclxcbiNkaXZQbHViaWNpdGUyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuLi9pbWcvaW1hZ2Vfc2l0ZS9pbWFnZXMvRG9nc19DYXRzX1JhYmJpdHNfNTA0NzU4LmpwZycpO1xcclxcbiAgICBoZWlnaHQ6IDYwdmg7XFxyXFxuICAgIG1hcmdpbi10b3A6IDIlXFxyXFxufVxcclxcblxcclxcbi5zdGFyIHtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICB0cmFuc2l0aW9uOiBjb2xvciAyMDBtcztcXHJcXG59XFxyXFxuXFxyXFxuI2luZm9sZXR0cmUge1xcclxcbiAgICBvcGFjaXR5OiAwLjU7XFxyXFxuICAgIHdpZHRoOiA0MCU7XFxyXFxufVxcclxcblxcclxcbiNzZXJ2aWNlMSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNzYsIDE3NSwgODAsIDAuMyk7XFxyXFxufVxcclxcblxcclxcbiNzZXJ2aWNlMiB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNzYsIDE3NSwgODAsIDAuMyk7XFxyXFxufVxcclxcblxcclxcbi5ncmV5Ym94ZGl2IHtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICB0b3A6IDIwJTtcXHJcXG4gICAgbGVmdDogMjUlO1xcclxcbiAgICBtYXJnaW4tbGVmdDogNDAlO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiAyMDBweDtcXHJcXG4gICAgcGFkZGluZy10b3A6IDUwcHg7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgb3BhY2l0eTogMC44O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmV5O1xcclxcbiAgICB3aWR0aDogNTAlO1xcclxcbiAgICBtYXJnaW46IGF1dG87XFxyXFxufVxcclxcblxcclxcbi5zZXJ2aWNlUHJvcG9zZXMge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIyMCwgMjIwLCAyMjAsIDAuNyk7XFxyXFxufVwiXX1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Byb2ZpbC5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5tb2RhbC1ib2R5IC5teC0zIHtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG59XFxyXFxuXFxyXFxuI2V4YW1wbGVGb3JtQ29udHJvbEZpbGUxIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0RDRENEQztcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgIHBhZGRpbmc6IDIwcHg7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBvdmVybGluZTtcXHJcXG4gICAgd2lkdGg6IDI1JTtcXHJcXG59XFxyXFxuXFxyXFxuLm1kLWZvcm0gLm1iLTUge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgcGFkZGluZzogMTJweDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbiAgICByZXNpemU6IHZlcnRpY2FsO1xcclxcbn1cXHJcXG5cXHJcXG5sYWJlbCB7XFxyXFxuICAgIHBhZGRpbmc6IDEycHggMTJweCAxMnB4IDA7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG59XFxyXFxuXFxyXFxuLmNvbC1tZC02IC5teC1hdXRvIHtcXHJcXG4gICAgd2lkdGg6IDEwMDBweDtcXHJcXG59XFxyXFxuXFxyXFxudHI6bnRoLWNoaWxkKGV2ZW4pIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcXHJcXG59XFxyXFxuXFxyXFxudHI6aG92ZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkO1xcclxcbn1cXHJcXG5cXHJcXG50ciB0ZCB7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XFxyXFxuICAgIHBhZGRpbmc6IDhweDtcXHJcXG59XFxyXFxuXFxyXFxudHIge1xcclxcbiAgICBwYWRkaW5nLXRvcDogMTJweDtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDEycHg7XFxyXFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxyXFxufVxcclxcblxcclxcbiNib3V0b24xIHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICBjb2xvcjogIzI1MjQyNDtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcclxcbiAgICB0ZXh0LWRlY29yYXRpb24tY29sb3I6IGRhcmtncmF5O1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWI4YjhiO1xcclxcbiAgICBib3JkZXI6IDFweCB0cmFuc3BhcmVudDtcXHJcXG4gICAgLyogcGFkZGluZzogMC4zNzVyZW0gLTE0LjI1cmVtOyovXFxyXFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IDEuNTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogLjI1cmVtO1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIGJvdHRvbTogLTcwOHB4O1xcclxcbiAgICBtYXJnaW46IDAgMiU7XFxyXFxuICAgIHdpZHRoOiAxN2VtO1xcclxcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIHRvcDogNTAlO1xcclxcbiAgICBsZWZ0OiAyMCU7XFxyXFxufVxcclxcblxcclxcbi5pbWFnZS1wcm9maWwge1xcclxcbiAgICB3aWR0aDogMTAwcHg7XFxyXFxuICAgIGhlaWdodDogMTAwcHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDQ5cHg7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IC0yOTdweDtcXHJcXG59XFxyXFxuXFxyXFxuLmZvcm0tY29udHJvbC1maWxlIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHtcXHJcXG4gICAgLmNvbC0yNSwgLmNvbC03NSwgI2JvdXRvbjEsIHRyLCB0ZCwgI2V4YW1wbGVGb3JtQ29udHJvbEZpbGUxLCAuaW1hZ2UtcHJvZmlsLCAubW9kYWwtYm9keSAubXgtMyB7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIG1hcmdpbi10b3A6IDA7XFxyXFxuICAgIH1cXHJcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wicHJvZmlsLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIseUJBQXlCO0lBQ3pCLFVBQVU7QUFDZDs7QUFFQTtJQUNJLFdBQVc7SUFDWCxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIscUJBQXFCO0FBQ3pCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLHNCQUFzQjtJQUN0QixZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLG9CQUFvQjtJQUNwQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxxQkFBcUI7SUFDckIsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsK0JBQStCO0lBQy9CLHlCQUF5QjtJQUN6Qix1QkFBdUI7SUFDdkIsZ0NBQWdDO0lBQ2hDLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIscUJBQXFCO0lBQ3JCLGtCQUFrQjtJQUNsQixjQUFjO0lBQ2QsWUFBWTtJQUNaLFdBQVc7SUFDWCxxQkFBcUI7SUFDckIsUUFBUTtJQUNSLFNBQVM7QUFDYjs7QUFFQTtJQUNJLFlBQVk7SUFDWixhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsWUFBWTtBQUNoQjs7QUFFQTtJQUNJO1FBQ0ksV0FBVztRQUNYLGFBQWE7SUFDakI7QUFDSlwiLFwiZmlsZVwiOlwicHJvZmlsLmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubW9kYWwtYm9keSAubXgtMyB7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxufVxcclxcblxcclxcbiNleGFtcGxlRm9ybUNvbnRyb2xGaWxlMSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNEQ0RDREM7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG4gICAgY29sb3I6IHdoaXRlO1xcclxcbiAgICBwYWRkaW5nOiAyMHB4O1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIHRleHQtZGVjb3JhdGlvbjogb3ZlcmxpbmU7XFxyXFxuICAgIHdpZHRoOiAyNSU7XFxyXFxufVxcclxcblxcclxcbi5tZC1mb3JtIC5tYi01IHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIHBhZGRpbmc6IDEycHg7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG4gICAgcmVzaXplOiB2ZXJ0aWNhbDtcXHJcXG59XFxyXFxuXFxyXFxubGFiZWwge1xcclxcbiAgICBwYWRkaW5nOiAxMnB4IDEycHggMTJweCAwO1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxufVxcclxcblxcclxcbi5jb2wtbWQtNiAubXgtYXV0byB7XFxyXFxuICAgIHdpZHRoOiAxMDAwcHg7XFxyXFxufVxcclxcblxcclxcbnRyOm50aC1jaGlsZChldmVuKSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XFxyXFxufVxcclxcblxcclxcbnRyOmhvdmVyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcXHJcXG59XFxyXFxuXFxyXFxudHIgdGQge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xcclxcbiAgICBwYWRkaW5nOiA4cHg7XFxyXFxufVxcclxcblxcclxcbnRyIHtcXHJcXG4gICAgcGFkZGluZy10b3A6IDEycHg7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAxMnB4O1xcclxcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcclxcbn1cXHJcXG5cXHJcXG4jYm91dG9uMSB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgY29sb3I6ICMyNTI0MjQ7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uLWNvbG9yOiBkYXJrZ3JheTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ViOGI4YjtcXHJcXG4gICAgYm9yZGVyOiAxcHggdHJhbnNwYXJlbnQ7XFxyXFxuICAgIC8qIHBhZGRpbmc6IDAuMzc1cmVtIC0xNC4yNXJlbTsqL1xcclxcbiAgICBmb250LXNpemU6IDFyZW07XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxLjU7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IC4yNXJlbTtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBib3R0b206IC03MDhweDtcXHJcXG4gICAgbWFyZ2luOiAwIDIlO1xcclxcbiAgICB3aWR0aDogMTdlbTtcXHJcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyO1xcclxcbiAgICB0b3A6IDUwJTtcXHJcXG4gICAgbGVmdDogMjAlO1xcclxcbn1cXHJcXG5cXHJcXG4uaW1hZ2UtcHJvZmlsIHtcXHJcXG4gICAgd2lkdGg6IDEwMHB4O1xcclxcbiAgICBoZWlnaHQ6IDEwMHB4O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiA0OXB4O1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAtMjk3cHg7XFxyXFxufVxcclxcblxcclxcbi5mb3JtLWNvbnRyb2wtZmlsZSB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IGF1dG87XFxyXFxufVxcclxcblxcclxcbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XFxyXFxuICAgIC5jb2wtMjUsIC5jb2wtNzUsICNib3V0b24xLCB0ciwgdGQsICNleGFtcGxlRm9ybUNvbnRyb2xGaWxlMSwgLmltYWdlLXByb2ZpbCwgLm1vZGFsLWJvZHkgLm14LTMge1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICBtYXJnaW4tdG9wOiAwO1xcclxcbiAgICB9XFxyXFxufVwiXX1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKHRydWUpO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnJvdyB7XFxyXFxuICAgIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcclxcbiAgICAvKiBJRTEwICovXFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIC1tcy1mbGV4LXdyYXA6IHdyYXA7XFxyXFxuICAgIC8qIElFMTAgKi9cXHJcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICBtYXJnaW46IDAgLTE2cHg7XFxyXFxufVxcclxcblxcclxcbi5jb2wtMjUge1xcclxcbiAgICAtbXMtZmxleDogMjUlO1xcclxcbiAgICAvKiBJRTEwICovXFxyXFxuICAgIGZsZXg6IDI1JTtcXHJcXG59XFxyXFxuXFxyXFxuLmNvbC01MCB7XFxyXFxuICAgIC1tcy1mbGV4OiA1MCU7XFxyXFxuICAgIC8qIElFMTAgKi9cXHJcXG4gICAgZmxleDogNTAlO1xcclxcbn1cXHJcXG5cXHJcXG4uY29sLTc1IHtcXHJcXG4gICAgLW1zLWZsZXg6IDc1JTtcXHJcXG4gICAgLyogSUUxMCAqL1xcclxcbiAgICBmbGV4OiA3NSU7XFxyXFxufVxcclxcblxcclxcbi5jb2wtMjUsIC5jb2wtNTAsIC5jb2wtNzUge1xcclxcbiAgICBwYWRkaW5nOiAwIDE2cHg7XFxyXFxufVxcclxcblxcclxcbi5jb250YWluZXJQYXltZW50IHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxuICAgIHBhZGRpbmc6IDVweCAyMHB4IDE1cHggMjBweDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgbGlnaHRncmV5O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxyXFxufVxcclxcblxcclxcbmlucHV0W3R5cGU9dGV4dF0ge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcXHJcXG4gICAgcGFkZGluZzogMTJweDtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xcclxcbn1cXHJcXG5cXHJcXG5sYWJlbCB7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbn1cXHJcXG5cXHJcXG4uaWNvbi1jb250YWluZXIge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcclxcbiAgICBwYWRkaW5nOiA3cHggMDtcXHJcXG4gICAgZm9udC1zaXplOiAyNHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uYnRuUGF5bWVudCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlYjhiOGI7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgcGFkZGluZzogMTJweDtcXHJcXG4gICAgbWFyZ2luOiAxMHB4IDA7XFxyXFxuICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICBmb250LXNpemU6IDE3cHg7XFxyXFxufVxcclxcblxcclxcbi5idG46aG92ZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBwaW5rO1xcclxcbn1cXHJcXG5cXHJcXG5zcGFuLnByaWNlIHtcXHJcXG4gICAgZmxvYXQ6IHJpZ2h0O1xcclxcbiAgICBjb2xvcjogZ3JleTtcXHJcXG59XFxyXFxuXFxyXFxuLyogUmVzcG9uc2l2ZSBsYXlvdXQgLSB3aGVuIHRoZSBzY3JlZW4gaXMgbGVzcyB0aGFuIDgwMHB4IHdpZGUsIG1ha2UgdGhlIHR3byBjb2x1bW5zIHN0YWNrIG9uIHRvcCBvZiBlYWNoIG90aGVyIGluc3RlYWQgb2YgbmV4dCB0byBlYWNoIG90aGVyIChhbmQgY2hhbmdlIHRoZSBkaXJlY3Rpb24gLSBtYWtlIHRoZSBcXFwiY2FydFxcXCIgY29sdW1uIGdvIG9uIHRvcCkgKi9cXHJcXG5cXHJcXG5AbWVkaWEgKG1heC13aWR0aDogODAwcHgpIHtcXHJcXG4gICAgLnJvdyB7XFxyXFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7XFxyXFxuICAgIH1cXHJcXG4gICAgLmNvbC0yNSB7XFxyXFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcclxcbiAgICB9XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcInBheW1lbnQuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksb0JBQW9CO0lBQ3BCLFNBQVM7SUFDVCxhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLFNBQVM7SUFDVCxlQUFlO0lBQ2YsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixTQUFTO0lBQ1QsU0FBUztBQUNiOztBQUVBO0lBQ0ksYUFBYTtJQUNiLFNBQVM7SUFDVCxTQUFTO0FBQ2I7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsU0FBUztJQUNULFNBQVM7QUFDYjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsMkJBQTJCO0lBQzNCLDJCQUEyQjtJQUMzQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsY0FBYztJQUNkLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtJQUNaLGFBQWE7SUFDYixjQUFjO0lBQ2QsWUFBWTtJQUNaLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osV0FBVztBQUNmOztBQUVBLDZNQUE2TTs7QUFFN007SUFDSTtRQUNJLDhCQUE4QjtJQUNsQztJQUNBO1FBQ0ksbUJBQW1CO0lBQ3ZCO0FBQ0pcIixcImZpbGVcIjpcInBheW1lbnQuY3NzXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5yb3cge1xcclxcbiAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXHJcXG4gICAgLyogSUUxMCAqL1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAtbXMtZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICAvKiBJRTEwICovXFxyXFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXHJcXG4gICAgbWFyZ2luOiAwIC0xNnB4O1xcclxcbn1cXHJcXG5cXHJcXG4uY29sLTI1IHtcXHJcXG4gICAgLW1zLWZsZXg6IDI1JTtcXHJcXG4gICAgLyogSUUxMCAqL1xcclxcbiAgICBmbGV4OiAyNSU7XFxyXFxufVxcclxcblxcclxcbi5jb2wtNTAge1xcclxcbiAgICAtbXMtZmxleDogNTAlO1xcclxcbiAgICAvKiBJRTEwICovXFxyXFxuICAgIGZsZXg6IDUwJTtcXHJcXG59XFxyXFxuXFxyXFxuLmNvbC03NSB7XFxyXFxuICAgIC1tcy1mbGV4OiA3NSU7XFxyXFxuICAgIC8qIElFMTAgKi9cXHJcXG4gICAgZmxleDogNzUlO1xcclxcbn1cXHJcXG5cXHJcXG4uY29sLTI1LCAuY29sLTUwLCAuY29sLTc1IHtcXHJcXG4gICAgcGFkZGluZzogMCAxNnB4O1xcclxcbn1cXHJcXG5cXHJcXG4uY29udGFpbmVyUGF5bWVudCB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcclxcbiAgICBwYWRkaW5nOiA1cHggMjBweCAxNXB4IDIwcHg7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGxpZ2h0Z3JleTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xcclxcbn1cXHJcXG5cXHJcXG5pbnB1dFt0eXBlPXRleHRdIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxyXFxuICAgIHBhZGRpbmc6IDEycHg7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXHJcXG59XFxyXFxuXFxyXFxubGFiZWwge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG59XFxyXFxuXFxyXFxuLmljb24tY29udGFpbmVyIHtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcXHJcXG4gICAgcGFkZGluZzogN3B4IDA7XFxyXFxuICAgIGZvbnQtc2l6ZTogMjRweDtcXHJcXG59XFxyXFxuXFxyXFxuLmJ0blBheW1lbnQge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWI4YjhiO1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxuICAgIHBhZGRpbmc6IDEycHg7XFxyXFxuICAgIG1hcmdpbjogMTBweCAwO1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgZm9udC1zaXplOiAxN3B4O1xcclxcbn1cXHJcXG5cXHJcXG4uYnRuOmhvdmVyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcGluaztcXHJcXG59XFxyXFxuXFxyXFxuc3Bhbi5wcmljZSB7XFxyXFxuICAgIGZsb2F0OiByaWdodDtcXHJcXG4gICAgY29sb3I6IGdyZXk7XFxyXFxufVxcclxcblxcclxcbi8qIFJlc3BvbnNpdmUgbGF5b3V0IC0gd2hlbiB0aGUgc2NyZWVuIGlzIGxlc3MgdGhhbiA4MDBweCB3aWRlLCBtYWtlIHRoZSB0d28gY29sdW1ucyBzdGFjayBvbiB0b3Agb2YgZWFjaCBvdGhlciBpbnN0ZWFkIG9mIG5leHQgdG8gZWFjaCBvdGhlciAoYW5kIGNoYW5nZSB0aGUgZGlyZWN0aW9uIC0gbWFrZSB0aGUgXFxcImNhcnRcXFwiIGNvbHVtbiBnbyBvbiB0b3ApICovXFxyXFxuXFxyXFxuQG1lZGlhIChtYXgtd2lkdGg6IDgwMHB4KSB7XFxyXFxuICAgIC5yb3cge1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlO1xcclxcbiAgICB9XFxyXFxuICAgIC5jb2wtMjUge1xcclxcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcXHJcXG4gICAgfVxcclxcbn1cIl19XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9kZW1hbmRlLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKHRydWUpO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogREVNQU5ERSBQUk9GSUwgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxyXFxuXFxyXFxuLmRlbWFuZGV3cmFwcGVyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxufVxcclxcblxcclxcbi5jb21tZW50Qm94IHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMDIsIDIwMiwgMjAyLCAwLjUpXFxyXFxufVxcclxcblxcclxcbi5pbmZvU2l0dGVyV3JhcHBlciAuaDIge1xcclxcbiAgICBmb250LXNpemU6IDUwcHg7XFxyXFxufVxcclxcblxcclxcbi5pbmZvU2l0dGVyV3JhcHBlciAuaDYge1xcclxcbiAgICBmb250LXNpemU6IDI0cHg7XFxyXFxufVxcclxcblxcclxcbi5mZWVkYmFja0NvbW1lbnQge1xcclxcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzdiN2Y4MTtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmZlZWRiYWNrQ29tbWVudCBoMyB7XFxyXFxuICAgIGNvbG9yOiByZWQ7XFxyXFxuICAgIGZvbnQtc2l6ZTogMzZweDtcXHJcXG59XFxyXFxuXFxyXFxuLmZlZWRiYWNrQ29tbWVudCBoNCB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG59XFxyXFxuXFxyXFxuLmZlZWRiYWNrQ29tbWVudCBwIHtcXHJcXG4gICAgZm9udC1zaXplOiAyNHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucHJpeEV0U2VydmljZVdyYXBwZXIge1xcclxcbiAgICBtYXJnaW4tdG9wOiAtMTUlO1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjAyLCAyMDIsIDIwMiwgMC41KTtcXHJcXG4gICAgd2lkdGg6IDQwJTtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDIlO1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMTIlO1xcclxcbiAgICBoZWlnaHQ6IDYwdmg7XFxyXFxufVxcclxcblxcclxcbi5zZXJ2aWNlQm94IHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMDIsIDIwMiwgMjAyLCAwLjUpO1xcclxcbn1cXHJcXG5cXHJcXG4ucGF5QnV0dG9uIHt9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiZGVtYW5kZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEseUZBQXlGOztBQUV6RjtJQUNJLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJO0FBQ0o7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGdDQUFnQztJQUNoQyxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxVQUFVO0lBQ1YsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQiwwQ0FBMEM7SUFDMUMsVUFBVTtJQUNWLGVBQWU7SUFDZixtQkFBbUI7SUFDbkIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLDBDQUEwQztBQUM5Qzs7QUFFQSxZQUFZXCIsXCJmaWxlXCI6XCJkZW1hbmRlLmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBERU1BTkRFIFBST0ZJTCAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXHJcXG5cXHJcXG4uZGVtYW5kZXdyYXBwZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXHJcXG59XFxyXFxuXFxyXFxuLmNvbW1lbnRCb3gge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIwMiwgMjAyLCAyMDIsIDAuNSlcXHJcXG59XFxyXFxuXFxyXFxuLmluZm9TaXR0ZXJXcmFwcGVyIC5oMiB7XFxyXFxuICAgIGZvbnQtc2l6ZTogNTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmluZm9TaXR0ZXJXcmFwcGVyIC5oNiB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMjRweDtcXHJcXG59XFxyXFxuXFxyXFxuLmZlZWRiYWNrQ29tbWVudCB7XFxyXFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjN2I3ZjgxO1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZmVlZGJhY2tDb21tZW50IGgzIHtcXHJcXG4gICAgY29sb3I6IHJlZDtcXHJcXG4gICAgZm9udC1zaXplOiAzNnB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZmVlZGJhY2tDb21tZW50IGg0IHtcXHJcXG4gICAgZm9udC1zaXplOiAxOHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZmVlZGJhY2tDb21tZW50IHAge1xcclxcbiAgICBmb250LXNpemU6IDI0cHg7XFxyXFxufVxcclxcblxcclxcbi5wcml4RXRTZXJ2aWNlV3JhcHBlciB7XFxyXFxuICAgIG1hcmdpbi10b3A6IC0xNSU7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMDIsIDIwMiwgMjAyLCAwLjUpO1xcclxcbiAgICB3aWR0aDogNDAlO1xcclxcbiAgICBtYXJnaW4tbGVmdDogMiU7XFxyXFxuICAgIHBhZGRpbmctYm90dG9tOiAxMiU7XFxyXFxuICAgIGhlaWdodDogNjB2aDtcXHJcXG59XFxyXFxuXFxyXFxuLnNlcnZpY2VCb3gge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIwMiwgMjAyLCAyMDIsIDAuNSk7XFxyXFxufVxcclxcblxcclxcbi5wYXlCdXR0b24ge31cIl19XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCdcclxuXHJcbmNvbnN0IFRkQ29tcG9zYW50ID0gKHsgbm9tLCBwcmVub20sIGVtYWlsLCBldGF0Q29tcHRlIH0pID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICA8dGQ+e25vbX08L3RkPjx0ZD57cHJlbm9tfTwvdGQ+PHRkPntlbWFpbH08L3RkPlxyXG4gICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICB7ZXRhdENvbXB0ZX1cclxuICAgICAgICAgICAgPC90ZD5cclxuXHJcbiAgICAgICAgPC90cj5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBUZENvbXBvc2FudFxyXG4iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG52YXIgcHJlZml4ID0gJ0ludmFyaWFudCBmYWlsZWQnO1xuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW52YXJpYW50O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIHBhdGgudG9Mb3dlckNhc2UoKS5pbmRleE9mKHByZWZpeC50b0xvd2VyQ2FzZSgpKSA9PT0gMCAmJiAnLz8jJy5pbmRleE9mKHBhdGguY2hhckF0KHByZWZpeC5sZW5ndGgpKSAhPT0gLTE7XG59XG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuXG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG5cbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbjtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKSA6IHZvaWQgMDtcbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJykgOiB2b2lkIDA7XG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5mdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cblxuZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZm9yY2VSZWZyZXNoID0gX3Byb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQkMSA9ICdoYXNoY2hhbmdlJztcbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG5mdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XG4gIHZhciBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpICsgJyMnICsgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IF9wcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB2b2lkIDAgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsJCQxKGEsIGIpIHtcbiAgICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2g7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbCQkMShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH0gLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG5cblxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHZhciBiYXNlVGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgIHZhciBocmVmID0gJyc7XG5cbiAgICBpZiAoYmFzZVRhZyAmJiBiYXNlVGFnLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB7XG4gICAgICBocmVmID0gc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHJlZiArICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKSA6IHZvaWQgMDtcbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKSA6IHZvaWQgMDtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gX3Byb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHZvaWQgMCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IF9wcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG5cbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5leHBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgcGFyc2VQYXRoLCBjcmVhdGVQYXRoIH07XG4iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gJ21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGhpc3RvcnlDb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQkMSA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgY29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQkMShcIlJvdXRlclwiKTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIFJvdXRlci5jb21wdXRlUm9vdE1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZVJvb3RNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBSb3V0ZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5oaXN0b3J5LmxvY2F0aW9uXG4gICAgfTsgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cblxuICAgIF90aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcblxuICAgIGlmICghcHJvcHMuc3RhdGljQ29udGV4dCkge1xuICAgICAgX3RoaXMudW5saXN0ZW4gPSBwcm9wcy5oaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9jYXRpb246IHRoaXMuX3BlbmRpbmdMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVubGlzdGVuKSB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksXG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgfVxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoaGlzdG9yeUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGwsXG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy5oaXN0b3J5XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlTWVtb3J5SGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lbW9yeVJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKCF3aGVuIHx8IGNvbnRleHQuc3RhdGljQ29udGV4dCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IGNvbnRleHQuaGlzdG9yeS5ibG9jaztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLm1lc3NhZ2UgIT09IG1lc3NhZ2UpIHtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVubW91bnQ6IGZ1bmN0aW9uIG9uVW5tb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIG1lc3NhZ2VUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKTtcbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCkge1xuICBpZiAoY2FjaGVbcGF0aF0pIHJldHVybiBjYWNoZVtwYXRoXTtcbiAgdmFyIGdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdGhdID0gZ2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0b3I7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdGggYW5kIHBhcmFtZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gXCIvXCI7XG4gIH1cblxuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoID09PSBcIi9cIiA/IHBhdGggOiBjb21waWxlUGF0aChwYXRoKShwYXJhbXMsIHtcbiAgICBwcmV0dHk6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJlZGlyZWN0KF9yZWYpIHtcbiAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBfcmVmJHB1c2ggPSBfcmVmLnB1c2gsXG4gICAgICBwdXNoID0gX3JlZiRwdXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkcHVzaDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuXG4gICAgICAgIGlmICghbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgcGF0aDogb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuICB2YXIgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG4gIHJldHVybiBwYXRocy5yZWR1Y2UoZnVuY3Rpb24gKG1hdGNoZWQsIHBhdGgpIHtcbiAgICBpZiAoIXBhdGggJiYgcGF0aCAhPT0gXCJcIikgcmV0dXJuIG51bGw7XG4gICAgaWYgKG1hdGNoZWQpIHJldHVybiBtYXRjaGVkO1xuXG4gICAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoJDEocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmVcbiAgICB9KSxcbiAgICAgICAgcmVnZXhwID0gX2NvbXBpbGVQYXRoLnJlZ2V4cCxcbiAgICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gICAgdmFyIG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG4gICAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuICAgIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAvLyB0aGUgcGF0aCB1c2VkIHRvIG1hdGNoXG4gICAgICB1cmw6IHBhdGggPT09IFwiL1wiICYmIHVybCA9PT0gXCJcIiA/IFwiL1wiIDogdXJsLFxuICAgICAgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgICBpc0V4YWN0OiBpc0V4YWN0LFxuICAgICAgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIHBhdGgpIHtcbiAgdmFyIHZhbHVlID0gY2hpbGRyZW4ocHJvcHMpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHZhbHVlICE9PSB1bmRlZmluZWQsIFwiWW91IHJldHVybmVkIGB1bmRlZmluZWRgIGZyb20gdGhlIGBjaGlsZHJlbmAgZnVuY3Rpb24gb2YgXCIgKyAoXCI8Um91dGVcIiArIChwYXRoID8gXCIgcGF0aD1cXFwiXCIgKyBwYXRoICsgXCJcXFwiXCIgOiBcIlwiKSArIFwiPiwgYnV0IHlvdSBcIikgKyBcInNob3VsZCBoYXZlIHJldHVybmVkIGEgUmVhY3QgZWxlbWVudCBvciBgbnVsbGBcIikgOiB2b2lkIDA7XG4gIHJldHVybiB2YWx1ZSB8fCBudWxsO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cblxudmFyIFJvdXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JDEpIHtcbiAgICAgICFjb250ZXh0JDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQkMS5sb2NhdGlvbjtcbiAgICAgIHZhciBtYXRjaCA9IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggPyBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgOiBfdGhpcy5wcm9wcy5wYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfdGhpcy5wcm9wcykgOiBjb250ZXh0JDEubWF0Y2g7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBjb250ZXh0JDEsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogbWF0Y2hcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICByZW5kZXIgPSBfdGhpcyRwcm9wcy5yZW5kZXI7IC8vIFByZWFjdCB1c2VzIGFuIGVtcHR5IGFycmF5IGFzIGNoaWxkcmVuIGJ5XG4gICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9wc1xuICAgICAgfSwgcHJvcHMubWF0Y2ggPyBjaGlsZHJlbiA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBjaGlsZHJlbiA6IGNvbXBvbmVudCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiByZW5kZXIgPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgX3RoaXMucHJvcHMucGF0aCkgOiBjaGlsZHJlbihwcm9wcykgOiBudWxsKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGUucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudChwcm9wcywgcHJvcE5hbWUpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gJiYgIWlzVmFsaWRFbGVtZW50VHlwZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgJ2NvbXBvbmVudCcgc3VwcGxpZWQgdG8gJ1JvdXRlJzogdGhlIHByb3AgaXMgbm90IGEgdmFsaWQgUmVhY3QgY29tcG9uZW50XCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXSksXG4gICAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLmNvbXBvbmVudCksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIikgOiB2b2lkIDA7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn1cblxuZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxuXG52YXIgU3RhdGljUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUFVTSFwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgcmV0dXJuIF90aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUkVQTEFDRVwiKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdGF0aWNSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5uYXZpZ2F0ZVRvID0gZnVuY3Rpb24gbmF2aWdhdGVUbyhsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMkYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wcyRjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMkY29udGV4dDtcbiAgICBjb250ZXh0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMiRiYXNlbmFtZSA9PT0gdm9pZCAwID8gXCJcIiA6IF90aGlzJHByb3BzMiRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dCxcbiAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMiRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzMiRjb250ZXh0LFxuICAgICAgICBfdGhpcyRwcm9wczIkbG9jYXRpb24gPSBfdGhpcyRwcm9wczIubG9jYXRpb24sXG4gICAgICAgIGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyJGxvY2F0aW9uID09PSB2b2lkIDAgPyBcIi9cIiA6IF90aGlzJHByb3BzMiRsb2NhdGlvbixcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYmFzZW5hbWVcIiwgXCJjb250ZXh0XCIsIFwibG9jYXRpb25cIl0pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBmdW5jdGlvbiBjcmVhdGVIcmVmKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgICB9LFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICAgIHZhciBlbGVtZW50LCBtYXRjaDsgLy8gV2UgdXNlIFJlYWN0LkNoaWxkcmVuLmZvckVhY2ggaW5zdGVhZCBvZiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KCkuZmluZCgpXG4gICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAgICAgLy8gY29tcG9uZW50IGF0IGRpZmZlcmVudCBVUkxzLlxuXG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKF90aGlzLnByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKG1hdGNoID09IG51bGwgJiYgUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuICAgICAgICAgIHZhciBwYXRoID0gY2hpbGQucHJvcHMucGF0aCB8fCBjaGlsZC5wcm9wcy5mcm9tO1xuICAgICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX2V4dGVuZHMoe30sIGNoaWxkLnByb3BzLCB7XG4gICAgICAgICAgICBwYXRoOiBwYXRoXG4gICAgICAgICAgfSkpIDogY29udGV4dC5tYXRjaDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxcIiArIGRpc3BsYXlOYW1lICsgXCIgLz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCBjb250ZXh0LCB7XG4gICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBDLnByb3BUeXBlcyA9IHtcbiAgICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufVxuXG52YXIgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5mdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlSGlzdG9yeSgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGhpc3RvcnlDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KS5sb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVBhcmFtcygpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VSb3V0ZU1hdGNoKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHBhdGgpIDogbWF0Y2g7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZ2xvYmFsID0gd2luZG93O1xuICAgIHZhciBrZXkgPSBcIl9fcmVhY3Rfcm91dGVyX2J1aWxkX19cIjtcbiAgICB2YXIgYnVpbGROYW1lcyA9IHtcbiAgICAgIGNqczogXCJDb21tb25KU1wiLFxuICAgICAgZXNtOiBcIkVTIG1vZHVsZXNcIixcbiAgICAgIHVtZDogXCJVTURcIlxuICAgIH07XG5cbiAgICBpZiAoZ2xvYmFsW2tleV0gJiYgZ2xvYmFsW2tleV0gIT09IFwiZXNtXCIpIHtcbiAgICAgIHZhciBpbml0aWFsQnVpbGROYW1lID0gYnVpbGROYW1lc1tnbG9iYWxba2V5XV07XG4gICAgICB2YXIgc2Vjb25kYXJ5QnVpbGROYW1lID0gYnVpbGROYW1lc1tcImVzbVwiXTsgLy8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbiAgICAgIC8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGxvYWRpbmcgdGhlIFwiICsgc2Vjb25kYXJ5QnVpbGROYW1lICsgXCIgYnVpbGQgb2YgUmVhY3QgUm91dGVyIFwiICsgKFwib24gYSBwYWdlIHRoYXQgaXMgYWxyZWFkeSBydW5uaW5nIHRoZSBcIiArIGluaXRpYWxCdWlsZE5hbWUgKyBcIiBcIikgKyBcImJ1aWxkLCBzbyB0aGluZ3Mgd29uJ3Qgd29yayByaWdodC5cIik7XG4gICAgfVxuXG4gICAgZ2xvYmFsW2tleV0gPSBcImVzbVwiO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGhpc3RvcnlDb250ZXh0IGFzIF9fSGlzdG9yeUNvbnRleHQsIGNvbnRleHQgYXMgX19Sb3V0ZXJDb250ZXh0LCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLmpzLm1hcFxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXHJcblxyXG5pbXBvcnQgVGRDb21wb3NhbnQgZnJvbSAnLi4vY29tcG9uZW50L3RkLWNvbXBvc2FudCdcclxuaW1wb3J0IEJvb3RzdHJhcFN3aXRjaEJ1dHRvbiBmcm9tICdib290c3RyYXAtc3dpdGNoLWJ1dHRvbi1yZWFjdCdcclxuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcblxyXG5jbGFzcyBBZG1pbkNvbnRhaW5lciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKVxyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBpc1VzZXJBZG1pbjogZmFsc2UsXHJcbiAgICAgICAgICAgIHBldFNpdHRlcnM6IFtdXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlU2luZ2xlUG9zdCA9IHRoaXMuaGFuZGxlQ2hhbmdlU2luZ2xlUG9zdC5iaW5kKHRoaXMpXHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykgJiYgSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLnV0aWxpc2F0ZXVyLmlkX3JvbGUgPT09IDEpIHtcclxuICAgICAgICAgICAgYXhpb3MuZ2V0KCdodHRwczovL3BldHMtZnJpZW5kbHkuaGVyb2t1YXBwLmNvbS91dGlsaXNhdGV1cnMvcmVjdXBlcmF0aW9uL3BldHNpdHRlcnMvdG91dCcpXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlcycsIHJlc3BvbnNlKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwZXRTaXR0ZXJzOiByZXNwb25zZS5kYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goJy8nKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjaGVja2VkKCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1VzZXJBZG1pbjogIXRoaXMuc3RhdGUuaXNVc2VyQWRtaW4gfSlcclxuICAgICAgICBjb25zb2xlLmxvZygnaXNVc2VyQWRtaW4xJywgdGhpcy5zdGF0ZS5pc1VzZXJBZG1pbilcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVDaGFuZ2VTaW5nbGVQb3N0KGlkKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3ZhbHVlPj4+JywgdmFsdWUpXHJcbiAgICAgICAgY29uc29sZS5sb2coJ2lkPj4+JywgaWQpXHJcbiAgICAgICAgcmV0dXJuIGF4aW9zXHJcbiAgICAgICAgICAgIC5wdXQoYGh0dHBzOi8vcGV0cy1mcmllbmRseS5oZXJva3VhcHAuY29tL3V0aWxpc2F0ZXVycy92YWxpZGF0aW9uL3BldHNpdHRlci8ke2lkfWApXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdCaWVuIE1vZGlmaWVyJylcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdsb2NhbFN0b3JhZ2UnLCBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSkudXRpbGlzYXRldXIuaWRfcm9sZSlcclxuICAgICAgICAvLyAgY29uc29sZS5sb2coJ2lzVXNlckFkbWluJywgdGhpcy5zdGF0ZS5pc1VzZXJBZG1pbilcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29udGFpbmVyJz5cclxuICAgICAgICAgICAgICAgIDxoMT5BZG1pbmlzdHJhdGlvbiA8L2gxPlxyXG4gICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT0ndGFibGUnPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPk5vbSAuPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5QcmVub20gLjwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RW1haWw8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkV0YXQgZHUgY29tcHRlIC48L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5wZXRTaXR0ZXJzLm1hcChwZXRTaXR0ZXIgPT4gKFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUZENvbXBvc2FudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vbT17cGV0U2l0dGVyLm5vbX0gZW1haWw9e3BldFNpdHRlci5lbWFpbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVub209e3BldFNpdHRlci5wcmVub219XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXRhdENvbXB0ZT17cGV0U2l0dGVyLmVzdF92YWxpZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyA8Qm9vdHN0cmFwU3dpdGNoQnV0dG9uIG9ubGFiZWw9J2FjdGl2ZScgb2ZmbGFiZWw9J2Rlc2FjdGl2ZScgd2lkdGg9ezc1fSBoZWlnaHQ9ezIwfSBjaGVja2VkIG9uQ2hhbmdlPXtlID0+IHRoaXMuaGFuZGxlQ2hhbmdlU2luZ2xlUG9zdChwZXRTaXR0ZXIuaWQpfSBzaXplPSdzbScgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiA8Qm9vdHN0cmFwU3dpdGNoQnV0dG9uIG9ubGFiZWw9J2FjdGl2ZScgb2ZmbGFiZWw9J2Rlc2FjdGl2ZScgd2lkdGg9ezc1fSBoZWlnaHQ9ezIwfSBjaGVja2VkPXtmYWxzZX0gb25DaGFuZ2U9e2UgPT4gdGhpcy5oYW5kbGVDaGFuZ2VTaW5nbGVQb3N0KHBldFNpdHRlci5pZCl9IHNpemU9J3NtJyAvPn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3BldFNpdHRlci5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKEFkbWluQ29udGFpbmVyKVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5mdW5jdGlvbiBTb2NpYWxNZWRpYUljb24gKHsgZGl2Q2xhc3MsIGNsYXNzYSwgY2xhc3NJIH0pIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGxpIGNsYXNzTmFtZT17ZGl2Q2xhc3N9PlxyXG5cclxuICAgICAgICAgICAgPGEgY2xhc3NOYW1lPXtjbGFzc2F9PlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPXtjbGFzc0l9PiA8L2k+XHJcbiAgICAgICAgICAgIDwvYT5cclxuXHJcbiAgICAgICAgPC9saT5cclxuXHJcbiAgICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNvY2lhbE1lZGlhSWNvblxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCBTb2NpYWxNZWRpYUljb24gZnJvbSAnLi4vY29tcG9uZW50L2ljb24tc29jaWFsLW1lZGlhJ1xyXG5cclxuY2xhc3MgTGlzdE5ldHdvcmtzIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKVxyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBpY29uZXM6IFtdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuICAgICAgICBmZXRjaCgnaWNvbmVzLmpzb24nLCB7IG1ldGhvZDogJ0dFVCcgfSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaWNvbmVzOiByZXNwb25zZSB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlciAoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT0nbGlzdC11bnN0eWxlZCBsaXN0LWlubGluZSB0ZXh0LWNlbnRlcic+XHJcblxyXG4gICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuaWNvbmVzLm1hcCgoaWNvbiwgaW5kZXgpID0+IDxTb2NpYWxNZWRpYUljb24gZGl2Q2xhc3M9J2xpc3QtaW5saW5lLWl0ZW0nIGNsYXNzYT17aWNvbi5jbGFzc2F9IGNsYXNzST17aWNvbi5jbGFzc0l9IGtleT17aW5kZXh9IC8+KX1cclxuXHJcbiAgICAgICAgICAgIDwvdWw+XHJcblxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTGlzdE5ldHdvcmtzXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmZ1bmN0aW9uIEZvb3RlckxpbmtzICh7IGRpdkNsYXNzLCBjbGFzc0gsIGNsYXNzVWwsIHRpdHJlLCBsaSB9KSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtkaXZDbGFzc30+XHJcblxyXG4gICAgICAgICAgICA8aDUgY2xhc3NOYW1lPXtjbGFzc0h9Pnt0aXRyZX08L2g1PlxyXG5cclxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT17Y2xhc3NVbH0+XHJcbiAgICAgICAgICAgICAgICB7bGkubWFwKChpY29uLCBpbmRleCkgPT4gPGxpIGtleT17aW5kZXh9PiAgPGEgaHJlZj0nIyEnPntpY29ufTwvYT4gPC9saT4pfVxyXG5cclxuICAgICAgICAgICAgPC91bD5cclxuXHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGb290ZXJMaW5rc1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCAnLi4vLi4vLi4vc3JjL2Zvb3Rlci5jc3MnXHJcblxyXG5pbXBvcnQgTGlzdE5ldHdvcmtzIGZyb20gJy4uLy4uL2NvbnRhaW5lci9saXN0LW5ldHdvcmstY29udGFpbmVyJ1xyXG5cclxuaW1wb3J0IEZvb3RlckxpbmtzIGZyb20gJy4uL2Zvb3Rlci1saW5rcydcclxuXHJcbmNsYXNzIEZvb3RlciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICByZW5kZXIgKCkge1xyXG4gICAgICAgIGNvbnN0IGxpMSA9IFsnQ29ubmV4aW9uJywgJ01vbiBwcm9maWwnLCAnTWVzIGZhdm9yaXMnLCAnVGFibGVhdSBkZSBib3JkJ11cclxuICAgICAgICBjb25zdCBsaTIgPSBbJ0EgcHJvcG9zIGRlIG5vdXMnLCAnQ29uZGl0aW9uIGQgdXRpbGlzYXRpb24nLCAnQ29uZmlkZW50aWFsaXRlJywgJ05vdXMgY29udGFjdGVyJ11cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8Zm9vdGVyIGNsYXNzTmFtZT0ncGFnZS1mb290ZXIgZm9udC1zbWFsbCBtdC01Jz5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29udGFpbmVyIHRleHQtY2VudGVyIHRleHQtbWQtbGVmdCc+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyb3cnPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1tZC0yIG14LWF1dG8nPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd2aWV3IG92ZXJsYXkgei1kZXB0aC0xLWhhbGYnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSdzcmMvaW1nL2xvZ28ucG5nJyBjbGFzc05hbWU9J2ltZy1mbHVpZCcgYWx0PScnIHdpZHRoPScxMDB2aCcgaGVpZ2h0PScxNTB2aCcgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPScnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbWFzayByZ2JhLXdoaXRlLWxpZ2h0JyAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aHIgY2xhc3NOYW1lPSdjbGVhcmZpeCB3LTEwMCBkLW1kLW5vbmUnIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aHIgY2xhc3NOYW1lPSdjbGVhcmZpeCB3LTEwMCBkLW1kLW5vbmUnIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Rm9vdGVyTGlua3MgZGl2Q2xhc3M9J2NvbC1tZC0yIG14LWF1dG8nIGNsYXNzSD0nZm9udC13ZWlnaHQtYm9sZCB0ZXh0LXVwcGVyY2FzZSBtdC0zIG1iLTQnIGNsYXNzVWw9J2xpc3QtdW5zdHlsZWQnIHRpdHJlPSdWb3VzJyBsaT17bGkxfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGhyIGNsYXNzTmFtZT0nY2xlYXJmaXggdy0xMDAgZC1tZC1ub25lJyAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Rm9vdGVyTGlua3MgZGl2Q2xhc3M9J2NvbC1tZC0yIG14LWF1dG8nIGNsYXNzSD0nZm9udC13ZWlnaHQtYm9sZCB0ZXh0LXVwcGVyY2FzZSBtdC0zIG1iLTQnIGNsYXNzVWw9J2xpc3QtdW5zdHlsZWQnIHRpdHJlPSdBIHByb3BvcyBkZSBQZXRzIEZyaWVuZGx5JyBsaT17bGkyfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLW1kLTInPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd2aWV3IG92ZXJsYXkgei1kZXB0aC0xLWhhbGYnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSdzcmMvaW1nL2ljb25fcmVzZWF1eC9QYWllbWVudF9Mb2dvLnBuZycgY2xhc3NOYW1lPSdpbWctZmx1aWQnIGFsdD0nJyAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPGhyIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgPExpc3ROZXR3b3JrcyAvPlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmb290ZXItY29weXJpZ2h0IHRleHQtY2VudGVyIHB5LTMnPsKpIDIwMjAgQ29weXJpZ2h0OlxyXG5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPC9mb290ZXI+XHJcblxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRm9vdGVyXHJcbiIsIlxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmZ1bmN0aW9uIEltZ0NvbXBvc2FudCAoeyBzcmNJTUcsIGNsYXNzQm8gfSkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT17Y2xhc3NCb30gc3JjPXtzcmNJTUd9IGFsdD17c3JjSU1HfSAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSW1nQ29tcG9zYW50XHJcbiIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBSdW5zIGFuIGVmZmVjdCBvbmx5IHdoZW4gdGhlIGRlcGVuZGVuY2llcyBoYXZlIGNoYW5nZWQsIHNraXBwaW5nIHRoZVxuICogaW5pdGlhbCBcIm9uIG1vdW50XCIgcnVuLiBDYXV0aW9uLCBpZiB0aGUgZGVwZW5kZW5jeSBsaXN0IG5ldmVyIGNoYW5nZXMsXG4gKiB0aGUgZWZmZWN0IGlzICoqbmV2ZXIgcnVuKipcbiAqXG4gKiBgYGB0c1xuICogIGNvbnN0IHJlZiA9IHVzZVJlZjxIVE1MSW5wdXQ+KG51bGwpO1xuICpcbiAqICAvLyBmb2N1c2VzIGFuIGVsZW1lbnQgb25seSBpZiB0aGUgZm9jdXMgY2hhbmdlcywgYW5kIG5vdCBvbiBtb3VudFxuICogIHVzZVVwZGF0ZUVmZmVjdCgoKSA9PiB7XG4gKiAgICBjb25zdCBlbGVtZW50ID0gcmVmLmN1cnJlbnQ/LmNoaWxkcmVuW2ZvY3VzZWRJZHhdIGFzIEhUTUxFbGVtZW50XG4gKlxuICogICAgZWxlbWVudD8uZm9jdXMoKVxuICpcbiAqICB9LCBbZm9jdXNlZEluZGV4XSlcbiAqIGBgYFxuICogQHBhcmFtIGVmZmVjdCBBbiBlZmZlY3QgdG8gcnVuIG9uIG1vdW50XG4gKlxuICogQGNhdGVnb3J5IGVmZmVjdHNcbiAqL1xuXG5mdW5jdGlvbiB1c2VVcGRhdGVFZmZlY3QoZm4sIGRlcHMpIHtcbiAgdmFyIGlzRmlyc3QgPSB1c2VSZWYodHJ1ZSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlzRmlyc3QuY3VycmVudCkge1xuICAgICAgaXNGaXJzdC5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGZuKCk7XG4gIH0sIGRlcHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1c2VVcGRhdGVFZmZlY3Q7IiwiaW1wb3J0IHVzZVVwZGF0ZWRSZWYgZnJvbSAnLi91c2VVcGRhdGVkUmVmJztcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogQXR0YWNoIGEgY2FsbGJhY2sgdGhhdCBmaXJlcyB3aGVuIGEgY29tcG9uZW50IHVubW91bnRzXG4gKlxuICogQHBhcmFtIGZuIEhhbmRsZXIgdG8gcnVuIHdoZW4gdGhlIGNvbXBvbmVudCB1bm1vdW50c1xuICogQGNhdGVnb3J5IGVmZmVjdHNcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VXaWxsVW5tb3VudChmbikge1xuICB2YXIgb25Vbm1vdW50ID0gdXNlVXBkYXRlZFJlZihmbik7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBvblVubW91bnQuY3VycmVudCgpO1xuICAgIH07XG4gIH0sIFtdKTtcbn0iLCJpbXBvcnQgeyB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIFJldHVybnMgYSByZWYgdGhhdCBpcyBpbW1lZGlhdGVseSB1cGRhdGVkIHdpdGggdGhlIG5ldyB2YWx1ZVxuICpcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgUmVmIHZhbHVlXG4gKiBAY2F0ZWdvcnkgcmVmc1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVVwZGF0ZWRSZWYodmFsdWUpIHtcbiAgdmFyIHZhbHVlUmVmID0gdXNlUmVmKHZhbHVlKTtcbiAgdmFsdWVSZWYuY3VycmVudCA9IHZhbHVlO1xuICByZXR1cm4gdmFsdWVSZWY7XG59IiwiaW1wb3J0IHsgdXNlTWVtbywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZU1vdW50ZWQgZnJvbSAnLi91c2VNb3VudGVkJztcbmltcG9ydCB1c2VXaWxsVW5tb3VudCBmcm9tICcuL3VzZVdpbGxVbm1vdW50Jztcbi8qXG4gKiBCcm93c2VycyBpbmNsdWRpbmcgSW50ZXJuZXQgRXhwbG9yZXIsIENocm9tZSwgU2FmYXJpLCBhbmQgRmlyZWZveCBzdG9yZSB0aGVcbiAqIGRlbGF5IGFzIGEgMzItYml0IHNpZ25lZCBpbnRlZ2VyIGludGVybmFsbHkuIFRoaXMgY2F1c2VzIGFuIGludGVnZXIgb3ZlcmZsb3dcbiAqIHdoZW4gdXNpbmcgZGVsYXlzIGxhcmdlciB0aGFuIDIsMTQ3LDQ4Myw2NDcgbXMgKGFib3V0IDI0LjggZGF5cyksXG4gKiByZXN1bHRpbmcgaW4gdGhlIHRpbWVvdXQgYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHkuXG4gKlxuICogdmlhOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93T3JXb3JrZXJHbG9iYWxTY29wZS9zZXRUaW1lb3V0XG4gKi9cblxudmFyIE1BWF9ERUxBWV9NUyA9IE1hdGgucG93KDIsIDMxKSAtIDE7XG5cbmZ1bmN0aW9uIHNldENoYWluZWRUaW1lb3V0KGhhbmRsZVJlZiwgZm4sIHRpbWVvdXRBdE1zKSB7XG4gIHZhciBkZWxheU1zID0gdGltZW91dEF0TXMgLSBEYXRlLm5vdygpO1xuICBoYW5kbGVSZWYuY3VycmVudCA9IGRlbGF5TXMgPD0gTUFYX0RFTEFZX01TID8gc2V0VGltZW91dChmbiwgZGVsYXlNcykgOiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc2V0Q2hhaW5lZFRpbWVvdXQoaGFuZGxlUmVmLCBmbiwgdGltZW91dEF0TXMpO1xuICB9LCBNQVhfREVMQVlfTVMpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgY29udHJvbGxlciBvYmplY3QgZm9yIHNldHRpbmcgYSB0aW1lb3V0IHRoYXQgaXMgcHJvcGVybHkgY2xlYW5lZCB1cFxuICogb25jZSB0aGUgY29tcG9uZW50IHVubW91bnRzLiBOZXcgdGltZW91dHMgY2FuY2VsIGFuZCByZXBsYWNlIGV4aXN0aW5nIG9uZXMuXG4gKi9cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaW1lb3V0KCkge1xuICB2YXIgaXNNb3VudGVkID0gdXNlTW91bnRlZCgpOyAvLyB0eXBlcyBhcmUgY29uZnVzZWQgYmV0d2VlbiBub2RlIGFuZCB3ZWIgaGVyZSBJREtcblxuICB2YXIgaGFuZGxlUmVmID0gdXNlUmVmKCk7XG4gIHVzZVdpbGxVbm1vdW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KGhhbmRsZVJlZi5jdXJyZW50KTtcbiAgfSk7XG4gIHJldHVybiB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIHJldHVybiBjbGVhclRpbWVvdXQoaGFuZGxlUmVmLmN1cnJlbnQpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzZXQoZm4sIGRlbGF5TXMpIHtcbiAgICAgIGlmIChkZWxheU1zID09PSB2b2lkIDApIHtcbiAgICAgICAgZGVsYXlNcyA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNNb3VudGVkKCkpIHJldHVybjtcbiAgICAgIGNsZWFyKCk7XG5cbiAgICAgIGlmIChkZWxheU1zIDw9IE1BWF9ERUxBWV9NUykge1xuICAgICAgICAvLyBGb3Igc2ltcGxpY2l0eSwgaWYgdGhlIHRpbWVvdXQgaXMgc2hvcnQsIGp1c3Qgc2V0IGEgbm9ybWFsIHRpbWVvdXQuXG4gICAgICAgIGhhbmRsZVJlZi5jdXJyZW50ID0gc2V0VGltZW91dChmbiwgZGVsYXlNcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRDaGFpbmVkVGltZW91dChoYW5kbGVSZWYsIGZuLCBEYXRlLm5vdygpICsgZGVsYXlNcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNldDogc2V0LFxuICAgICAgY2xlYXI6IGNsZWFyXG4gICAgfTtcbiAgfSwgW10pO1xufSIsImltcG9ydCBvd25lcldpbmRvdyBmcm9tICcuL293bmVyV2luZG93JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUobm9kZSwgcHN1ZWRvRWxlbWVudCkge1xuICByZXR1cm4gb3duZXJXaW5kb3cobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBwc3VlZG9FbGVtZW50KTtcbn0iLCJpbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuL293bmVyRG9jdW1lbnQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJXaW5kb3cobm9kZSkge1xuICB2YXIgZG9jID0gb3duZXJEb2N1bWVudChub2RlKTtcbiAgcmV0dXJuIGRvYyAmJiBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xufSIsInZhciByVXBwZXIgPSAvKFtBLVpdKS9nO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaHlwaGVuYXRlKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoclVwcGVyLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbn0iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLTIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvMmFlYjhhMmE2YmViMDA2MTdhNDIxN2Y3ZjgyODQ5MjRmYTJhZDgxOS9zcmMvdmVuZG9yL2NvcmUvaHlwaGVuYXRlU3R5bGVOYW1lLmpzXG4gKi9cbmltcG9ydCBoeXBoZW5hdGUgZnJvbSAnLi9oeXBoZW5hdGUnO1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGh5cGhlbmF0ZShzdHJpbmcpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufSIsInZhciBzdXBwb3J0ZWRUcmFuc2Zvcm1zID0gL14oKHRyYW5zbGF0ZXxyb3RhdGV8c2NhbGUpKFh8WXxafDNkKT98bWF0cml4KDNkKT98cGVyc3BlY3RpdmV8c2tldyhYfFkpPykkL2k7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgc3VwcG9ydGVkVHJhbnNmb3Jtcy50ZXN0KHZhbHVlKSk7XG59IiwiaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSAnLi9nZXRDb21wdXRlZFN0eWxlJztcbmltcG9ydCBoeXBoZW5hdGUgZnJvbSAnLi9oeXBoZW5hdGVTdHlsZSc7XG5pbXBvcnQgaXNUcmFuc2Zvcm0gZnJvbSAnLi9pc1RyYW5zZm9ybSc7XG5cbmZ1bmN0aW9uIHN0eWxlKG5vZGUsIHByb3BlcnR5KSB7XG4gIHZhciBjc3MgPSAnJztcbiAgdmFyIHRyYW5zZm9ybXMgPSAnJztcblxuICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoaHlwaGVuYXRlKHByb3BlcnR5KSkgfHwgZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS5nZXRQcm9wZXJ0eVZhbHVlKGh5cGhlbmF0ZShwcm9wZXJ0eSkpO1xuICB9XG5cbiAgT2JqZWN0LmtleXMocHJvcGVydHkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHByb3BlcnR5W2tleV07XG5cbiAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgICBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KGh5cGhlbmF0ZShrZXkpKTtcbiAgICB9IGVsc2UgaWYgKGlzVHJhbnNmb3JtKGtleSkpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0ga2V5ICsgXCIoXCIgKyB2YWx1ZSArIFwiKSBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzICs9IGh5cGhlbmF0ZShrZXkpICsgXCI6IFwiICsgdmFsdWUgKyBcIjtcIjtcbiAgICB9XG4gIH0pO1xuXG4gIGlmICh0cmFuc2Zvcm1zKSB7XG4gICAgY3NzICs9IFwidHJhbnNmb3JtOiBcIiArIHRyYW5zZm9ybXMgKyBcIjtcIjtcbiAgfVxuXG4gIG5vZGUuc3R5bGUuY3NzVGV4dCArPSBcIjtcIiArIGNzcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGU7IiwiaW1wb3J0IGNhblVzZURPTSBmcm9tICcuL2NhblVzZURPTSc7XG5pbXBvcnQgY3NzIGZyb20gJy4vY3NzJztcbmltcG9ydCBsaXN0ZW4gZnJvbSAnLi9saXN0ZW4nO1xuZXhwb3J0IHZhciBUUkFOU0lUSU9OX1NVUFBPUlRFRCA9IGNhblVzZURPTSAmJiAnb250cmFuc2l0aW9uZW5kJyBpbiB3aW5kb3c7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VEdXJhdGlvbihub2RlKSB7XG4gIHZhciBzdHIgPSBjc3Mobm9kZSwgJ3RyYW5zaXRpb25EdXJhdGlvbicpIHx8ICcnO1xuICB2YXIgbXVsdCA9IHN0ci5pbmRleE9mKCdtcycpID09PSAtMSA/IDEwMDAgOiAxO1xuICByZXR1cm4gcGFyc2VGbG9hdChzdHIpICogbXVsdDtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlclRyYW5zaXRpb25FbmQoZWxlbWVudCkge1xuICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZXZ0LmluaXRFdmVudCgndHJhbnNpdGlvbmVuZCcsIHRydWUsIHRydWUpO1xuICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZ0KTtcbn1cblxuZnVuY3Rpb24gZW11bGF0ZVRyYW5zaXRpb25FbmQoZWxlbWVudCwgZHVyYXRpb24sIHBhZGRpbmcpIHtcbiAgaWYgKHBhZGRpbmcgPT09IHZvaWQgMCkge1xuICAgIHBhZGRpbmcgPSA1O1xuICB9XG5cbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICB2YXIgaGFuZGxlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHRyaWdnZXJUcmFuc2l0aW9uRW5kKGVsZW1lbnQpO1xuICB9LCBkdXJhdGlvbiArIHBhZGRpbmcpO1xuICB2YXIgcmVtb3ZlID0gbGlzdGVuKGVsZW1lbnQsICd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGNhbGxlZCA9IHRydWU7XG4gIH0sIHtcbiAgICBvbmNlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGNsZWFyVGltZW91dChoYW5kbGUpO1xuICAgIHJlbW92ZSgpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGVsZW1lbnQsIGhhbmRsZXIsIGR1cmF0aW9uKSB7XG4gIGlmIChkdXJhdGlvbiA9PSBudWxsKSBkdXJhdGlvbiA9IHBhcnNlRHVyYXRpb24oZWxlbWVudCkgfHwgMDtcbiAgdmFyIHJlbW92ZUVtdWxhdGUgPSBlbXVsYXRlVHJhbnNpdGlvbkVuZChlbGVtZW50LCBkdXJhdGlvbik7XG4gIHZhciByZW1vdmUgPSBsaXN0ZW4oZWxlbWVudCwgJ3RyYW5zaXRpb25lbmQnLCBoYW5kbGVyKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZW1vdmVFbXVsYXRlKCk7XG4gICAgcmVtb3ZlKCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zaXRpb25FbmQ7IiwiZXhwb3J0IGRlZmF1bHQge1xuICBkaXNhYmxlZDogZmFsc2Vcbn07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRzU2hhcGUgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuZXhwb3J0IHZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydCB2YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnQgdmFyIEVOVEVSSU5HID0gJ2VudGVyaW5nJztcbmV4cG9ydCB2YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydCB2YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZXhpdGluZzogIHsgb3BhY2l0eTogMCB9LFxuICogICBleGl0ZWQ6ICB7IG9wYWNpdHk6IDAgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbnZhciBUcmFuc2l0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0OyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG4gIDtcblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5pc01vdW50aW5nIDogbW91bnRpbmc7XG5cbiAgICB2YXIgX3JlZjIgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbYXBwZWFyaW5nXSA6IFtSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSwgYXBwZWFyaW5nXSxcbiAgICAgICAgbWF5YmVOb2RlID0gX3JlZjJbMF0sXG4gICAgICAgIG1heWJlQXBwZWFyaW5nID0gX3JlZjJbMV07XG5cbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIGVudGVyVGltZW91dCA9IGFwcGVhcmluZyA/IHRpbWVvdXRzLmFwcGVhciA6IHRpbWVvdXRzLmVudGVyOyAvLyBubyBlbnRlciBhbmltYXRpb24gc2tpcCByaWdodCB0byBFTlRFUkVEXG4gICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXRcblxuICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyIHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkVudGVyKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChlbnRlclRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRXhpdCA9IGZ1bmN0aW9uIHBlcmZvcm1FeGl0KCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBtYXliZU5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB1bmRlZmluZWQgOiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTsgLy8gbm8gZXhpdCBhbmltYXRpb24gc2tpcCByaWdodCB0byBFWElURURcblxuICAgIGlmICghZXhpdCB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRXhpdChtYXliZU5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobWF5YmVOb2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobWF5YmVOb2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm5leHRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm5leHRDYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcbiAgICB2YXIgbm9kZSA9IHRoaXMucHJvcHMubm9kZVJlZiA/IHRoaXMucHJvcHMubm9kZVJlZi5jdXJyZW50IDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHZhciBfcmVmMyA9IHRoaXMucHJvcHMubm9kZVJlZiA/IFt0aGlzLm5leHRDYWxsYmFja10gOiBbbm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2tdLFxuICAgICAgICAgIG1heWJlTm9kZSA9IF9yZWYzWzBdLFxuICAgICAgICAgIG1heWJlTmV4dENhbGxiYWNrID0gX3JlZjNbMV07XG5cbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobWF5YmVOb2RlLCBtYXliZU5leHRDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfaW4gPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgX21vdW50T25FbnRlciA9IF90aGlzJHByb3BzLm1vdW50T25FbnRlcixcbiAgICAgICAgX3VubW91bnRPbkV4aXQgPSBfdGhpcyRwcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBfYXBwZWFyID0gX3RoaXMkcHJvcHMuYXBwZWFyLFxuICAgICAgICBfZW50ZXIgPSBfdGhpcyRwcm9wcy5lbnRlcixcbiAgICAgICAgX2V4aXQgPSBfdGhpcyRwcm9wcy5leGl0LFxuICAgICAgICBfdGltZW91dCA9IF90aGlzJHByb3BzLnRpbWVvdXQsXG4gICAgICAgIF9hZGRFbmRMaXN0ZW5lciA9IF90aGlzJHByb3BzLmFkZEVuZExpc3RlbmVyLFxuICAgICAgICBfb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgIF9vbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgX29uRW50ZXJlZCA9IF90aGlzJHByb3BzLm9uRW50ZXJlZCxcbiAgICAgICAgX29uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgX29uRXhpdGluZyA9IF90aGlzJHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgX29uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgIF9ub2RlUmVmID0gX3RoaXMkcHJvcHMubm9kZVJlZixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwibW91bnRPbkVudGVyXCIsIFwidW5tb3VudE9uRXhpdFwiLCBcImFwcGVhclwiLCBcImVudGVyXCIsIFwiZXhpdFwiLCBcInRpbWVvdXRcIiwgXCJhZGRFbmRMaXN0ZW5lclwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FeGl0ZWRcIiwgXCJub2RlUmVmXCJdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpIDogUmVhY3QuY2xvbmVFbGVtZW50KFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pLCBjaGlsZFByb3BzKSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlID0gVHJhbnNpdGlvbkdyb3VwQ29udGV4dDtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBSZWFjdCByZWZlcmVuY2UgdG8gRE9NIGVsZW1lbnQgdGhhdCBuZWVkIHRvIHRyYW5zaXRpb246XG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MTEyNzEzMC80NjcxOTMyXG4gICAqXG4gICAqICAgLSBXaGVuIGBub2RlUmVmYCBwcm9wIGlzIHVzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkIHRvIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICAgKiAgICAgIChlLmcuIGBvbkVudGVyYCkgYmVjYXVzZSB1c2VyIGFscmVhZHkgaGFzIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIG5vZGUuXG4gICAqICAgLSBXaGVuIGNoYW5naW5nIGBrZXlgIHByb3Agb2YgYFRyYW5zaXRpb25gIGluIGEgYFRyYW5zaXRpb25Hcm91cGAgYSBuZXdcbiAgICogICAgIGBub2RlUmVmYCBuZWVkIHRvIGJlIHByb3ZpZGVkIHRvIGBUcmFuc2l0aW9uYCB3aXRoIGNoYW5nZWQgYGtleWAgcHJvcFxuICAgKiAgICAgKHNlZVxuICAgKiAgICAgW3Rlc3QvQ1NTVHJhbnNpdGlvbi10ZXN0LmpzXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Jsb2IvMTM0MzVmODk3YjNhYjcxZjZlMTlkNzI0ZjE0NTU5NmY1OTEwNTgxYy90ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qcyNMMzYyLUw0MzcpKS5cbiAgICovXG4gIG5vZGVSZWY6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogdHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnID8gUHJvcFR5cGVzLmFueSA6IFByb3BUeXBlcy5pbnN0YW5jZU9mKEVsZW1lbnQpXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0dXMgKGAnZW50ZXJpbmcnYCwgYCdlbnRlcmVkJ2AsXG4gICAqIGAnZXhpdGluZydgLCBgJ2V4aXRlZCdgKSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXBwbHkgY29udGV4dFxuICAgKiBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHtzdGF0ZSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdGV9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGRvZXMgbm90IHBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlblxuICAgKiBpdCBmaXJzdCBtb3VudHMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mIGBpbmAuIElmIHlvdSB3YW50IHRoaXNcbiAgICogYmVoYXZpb3IsIHNldCBib3RoIGBhcHBlYXJgIGFuZCBgaW5gIHRvIGB0cnVlYC5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogdGhlcmUgYXJlIG5vIHNwZWNpYWwgYXBwZWFyIHN0YXRlcyBsaWtlIGBhcHBlYXJpbmdgL2BhcHBlYXJlZGAsIHRoaXMgcHJvcFxuICAgKiA+IG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGVudGVyIHRyYW5zaXRpb24uIEhvd2V2ZXIsIGluIHRoZVxuICAgKiA+IGA8Q1NTVHJhbnNpdGlvbj5gIGNvbXBvbmVudCB0aGF0IGZpcnN0IGVudGVyIHRyYW5zaXRpb24gZG9lcyByZXN1bHQgaW5cbiAgICogPiBhZGRpdGlvbmFsIGAuYXBwZWFyLSpgIGNsYXNzZXMsIHRoYXQgd2F5IHlvdSBjYW4gY2hvb3NlIHRvIHN0eWxlIGl0XG4gICAqID4gZGlmZmVyZW50bHkuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBlbnRlciB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZXhpdCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogUmVxdWlyZWQgdW5sZXNzIGBhZGRFbmRMaXN0ZW5lcmAgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnM6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXs1MDB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBvciBpbmRpdmlkdWFsbHk6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBhcHBlYXI6IDUwMCxcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiAtIGBhcHBlYXJgIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBgZW50ZXJgXG4gICAqIC0gYGVudGVyYCBkZWZhdWx0cyB0byBgMGBcbiAgICogLSBgZXhpdGAgZGVmYXVsdHMgdG8gYDBgXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXIgfCB7IGVudGVyPzogbnVtYmVyLCBleGl0PzogbnVtYmVyLCBhcHBlYXI/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSB0aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwdC5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nXG4gICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59IDoge307IC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IFVOTU9VTlRFRDtcblRyYW5zaXRpb24uRVhJVEVEID0gRVhJVEVEO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IEVOVEVSSU5HO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gRU5URVJFRDtcblRyYW5zaXRpb24uRVhJVElORyA9IEVYSVRJTkc7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uOyIsInZhciBySHlwaGVuID0gLy0oLikvZztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2Uockh5cGhlbiwgZnVuY3Rpb24gKF8sIGNocikge1xuICAgIHJldHVybiBjaHIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbnZhciBUaGVtZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcbnZhciBDb25zdW1lciA9IFRoZW1lQ29udGV4dC5Db25zdW1lcixcbiAgICBQcm92aWRlciA9IFRoZW1lQ29udGV4dC5Qcm92aWRlcjtcblxuZnVuY3Rpb24gVGhlbWVQcm92aWRlcihfcmVmKSB7XG4gIHZhciBwcmVmaXhlcyA9IF9yZWYucHJlZml4ZXMsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBjb3BpZWRQcmVmaXhlcyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgcHJlZml4ZXMpO1xuICB9LCBbcHJlZml4ZXNdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvcGllZFByZWZpeGVzXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUJvb3RzdHJhcFByZWZpeChwcmVmaXgsIGRlZmF1bHRQcmVmaXgpIHtcbiAgdmFyIHByZWZpeGVzID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICByZXR1cm4gcHJlZml4IHx8IHByZWZpeGVzW2RlZmF1bHRQcmVmaXhdIHx8IGRlZmF1bHRQcmVmaXg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChDb21wb25lbnQsIG9wdHMpIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJykgb3B0cyA9IHtcbiAgICBwcmVmaXg6IG9wdHNcbiAgfTtcbiAgdmFyIGlzQ2xhc3N5ID0gQ29tcG9uZW50LnByb3RvdHlwZSAmJiBDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ7IC8vIElmIGl0J3MgYSBmdW5jdGlvbmFsIGNvbXBvbmVudCBtYWtlIHN1cmUgd2UgZG9uJ3QgYnJlYWsgaXQgd2l0aCBhIHJlZlxuXG4gIHZhciBfb3B0cyA9IG9wdHMsXG4gICAgICBwcmVmaXggPSBfb3B0cy5wcmVmaXgsXG4gICAgICBfb3B0cyRmb3J3YXJkUmVmQXMgPSBfb3B0cy5mb3J3YXJkUmVmQXMsXG4gICAgICBmb3J3YXJkUmVmQXMgPSBfb3B0cyRmb3J3YXJkUmVmQXMgPT09IHZvaWQgMCA/IGlzQ2xhc3N5ID8gJ3JlZicgOiAnaW5uZXJSZWYnIDogX29wdHMkZm9yd2FyZFJlZkFzO1xuICB2YXIgV3JhcHBlZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCByZWYpIHtcbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgX3JlZjIpO1xuXG4gICAgcHJvcHNbZm9yd2FyZFJlZkFzXSA9IHJlZjtcbiAgICB2YXIgYnNQcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgocHJvcHMuYnNQcmVmaXgsIHByZWZpeCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBic1ByZWZpeDogYnNQcmVmaXhcbiAgICB9KSk7XG4gIH0pO1xuICBXcmFwcGVkLmRpc3BsYXlOYW1lID0gXCJCb290c3RyYXAoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuICByZXR1cm4gV3JhcHBlZDtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50LCBDb25zdW1lciBhcyBUaGVtZUNvbnN1bWVyIH07XG5leHBvcnQgZGVmYXVsdCBUaGVtZVByb3ZpZGVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBjYW1lbGl6ZSBmcm9tICdkb20taGVscGVycy9jYW1lbGl6ZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQm9vdHN0cmFwUHJlZml4IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIHBhc2NhbENhc2UgPSBmdW5jdGlvbiBwYXNjYWxDYXNlKHN0cikge1xuICByZXR1cm4gc3RyWzBdLnRvVXBwZXJDYXNlKCkgKyBjYW1lbGl6ZShzdHIpLnNsaWNlKDEpO1xufTtcblxuLy8gVE9ETzogZW1zdHJpY3RlbiAmIGZpeCB0aGUgdHlwaW5nIGhlcmUhIGBjcmVhdGVXaXRoQnNQcmVmaXg8VEVsZW1lbnRUeXBlPi4uLmBcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVdpdGhCc1ByZWZpeChwcmVmaXgsIF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgIGRpc3BsYXlOYW1lID0gX3JlZiRkaXNwbGF5TmFtZSA9PT0gdm9pZCAwID8gcGFzY2FsQ2FzZShwcmVmaXgpIDogX3JlZiRkaXNwbGF5TmFtZSxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYuQ29tcG9uZW50LFxuICAgICAgZGVmYXVsdFByb3BzID0gX3JlZi5kZWZhdWx0UHJvcHM7XG5cbiAgdmFyIEJzQ29tcG9uZW50ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZjIsIHJlZikge1xuICAgIHZhciBjbGFzc05hbWUgPSBfcmVmMi5jbGFzc05hbWUsXG4gICAgICAgIGJzUHJlZml4ID0gX3JlZjIuYnNQcmVmaXgsXG4gICAgICAgIF9yZWYyJGFzID0gX3JlZjIuYXMsXG4gICAgICAgIFRhZyA9IF9yZWYyJGFzID09PSB2b2lkIDAgPyBDb21wb25lbnQgfHwgJ2RpdicgOiBfcmVmMiRhcyxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiY2xhc3NOYW1lXCIsIFwiYnNQcmVmaXhcIiwgXCJhc1wiXSk7XG5cbiAgICB2YXIgcmVzb2x2ZWRQcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsIHByZWZpeCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRhZywgX2V4dGVuZHMoe1xuICAgICAgcmVmOiByZWYsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCByZXNvbHZlZFByZWZpeClcbiAgICB9LCBwcm9wcykpO1xuICB9KTtcbiAgQnNDb21wb25lbnQuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuICBCc0NvbXBvbmVudC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICByZXR1cm4gQnNDb21wb25lbnQ7XG59IiwiaW1wb3J0IGNyZWF0ZVdpdGhCc1ByZWZpeCBmcm9tICcuL2NyZWF0ZVdpdGhCc1ByZWZpeCc7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVXaXRoQnNQcmVmaXgoJ2Nhcm91c2VsLWNhcHRpb24nKTsiLCJpbXBvcnQgY3JlYXRlV2l0aEJzUHJlZml4IGZyb20gJy4vY3JlYXRlV2l0aEJzUHJlZml4JztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVdpdGhCc1ByZWZpeCgnY2Fyb3VzZWwtaXRlbScpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLFxuICogYnV0IG9ubHkgbWFwcyBvdmVyIGNoaWxkcmVuIHRoYXQgYXJlIFwidmFsaWQgZWxlbWVudHNcIi5cbiAqXG4gKiBUaGUgbWFwRnVuY3Rpb24gcHJvdmlkZWQgaW5kZXggd2lsbCBiZSBub3JtYWxpc2VkIHRvIHRoZSBjb21wb25lbnRzIG1hcHBlZCxcbiAqIHNvIGFuIGludmFsaWQgY29tcG9uZW50IHdvdWxkIG5vdCBpbmNyZWFzZSB0aGUgaW5kZXguXG4gKlxuICovXG5cbmZ1bmN0aW9uIG1hcChjaGlsZHJlbiwgZnVuYykge1xuICB2YXIgaW5kZXggPSAwO1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpID8gZnVuYyhjaGlsZCwgaW5kZXgrKykgOiBjaGlsZDtcbiAgfSk7XG59XG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggY2hpbGRyZW4gdGhhdCBhcmUgXCJ2YWxpZCBlbGVtZW50c1wiLlxuICpcbiAqIFRoZSBwcm92aWRlZCBmb3JFYWNoRnVuYyhjaGlsZCwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkIHdpdGggdGhlIGluZGV4IHJlZmxlY3RpbmcgdGhlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIFwidmFsaWQgY29tcG9uZW50c1wiLlxuICovXG5cblxuZnVuY3Rpb24gZm9yRWFjaChjaGlsZHJlbiwgZnVuYykge1xuICB2YXIgaW5kZXggPSAwO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSBmdW5jKGNoaWxkLCBpbmRleCsrKTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IG1hcCwgZm9yRWFjaCB9OyIsIi8qKlxuICogU2FmZSBjaGFpbmVkIGZ1bmN0aW9uXG4gKlxuICogV2lsbCBvbmx5IGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiBuZWVkZWQsXG4gKiBvdGhlcndpc2Ugd2lsbCBwYXNzIGJhY2sgZXhpc3RpbmcgZnVuY3Rpb25zIG9yIG51bGwuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY3Rpb25zIHRvIGNoYWluXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb258bnVsbH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3MuZmlsdGVyKGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGYgIT0gbnVsbDtcbiAgfSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGYpIHtcbiAgICBpZiAodHlwZW9mIGYgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBBcmd1bWVudCBUeXBlLCBtdXN0IG9ubHkgcHJvdmlkZSBmdW5jdGlvbnMsIHVuZGVmaW5lZCwgb3IgbnVsbC4nKTtcbiAgICB9XG5cbiAgICBpZiAoYWNjID09PSBudWxsKSByZXR1cm4gZjtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgYWNjLmFwcGx5KHRoaXMsIGFyZ3MpOyAvLyBAdHMtaWdub3JlXG5cbiAgICAgIGYuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBpc1RyaXZpYWxIcmVmKGhyZWYpIHtcbiAgcmV0dXJuICFocmVmIHx8IGhyZWYudHJpbSgpID09PSAnIyc7XG59XG4vKipcbiAqIFRoZXJlIGFyZSBzaXR1YXRpb25zIGR1ZSB0byBicm93c2VyIHF1aXJrcyBvciBCb290c3RyYXAgQ1NTIHdoZXJlXG4gKiBhbiBhbmNob3IgdGFnIGlzIG5lZWRlZCwgd2hlbiBzZW1hbnRpY2FsbHkgYSBidXR0b24gdGFnIGlzIHRoZVxuICogYmV0dGVyIGNob2ljZS4gU2FmZUFuY2hvciBlbnN1cmVzIHRoYXQgd2hlbiBhbiBhbmNob3IgaXMgdXNlZCBsaWtlIGFcbiAqIGJ1dHRvbiBpdHMgYWNjZXNzaWJsZS4gSXQgYWxzbyBlbXVsYXRlcyBpbnB1dCBgZGlzYWJsZWRgIGJlaGF2aW9yIGZvclxuICogbGlua3MsIHdoaWNoIGlzIHVzdWFsbHkgZGVzaXJhYmxlIGZvciBCdXR0b25zLCBOYXZJdGVtcywgRHJvcGRvd25JdGVtcywgZXRjLlxuICovXG5cblxudmFyIFNhZmVBbmNob3IgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIF9yZWYkYXMgPSBfcmVmLmFzLFxuICAgICAgQ29tcG9uZW50ID0gX3JlZiRhcyA9PT0gdm9pZCAwID8gJ2EnIDogX3JlZiRhcyxcbiAgICAgIGRpc2FibGVkID0gX3JlZi5kaXNhYmxlZCxcbiAgICAgIG9uS2V5RG93biA9IF9yZWYub25LZXlEb3duLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhc1wiLCBcImRpc2FibGVkXCIsIFwib25LZXlEb3duXCJdKTtcblxuICB2YXIgaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIHZhciBocmVmID0gcHJvcHMuaHJlZixcbiAgICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2s7XG5cbiAgICBpZiAoZGlzYWJsZWQgfHwgaXNUcml2aWFsSHJlZihocmVmKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaGFuZGxlQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBpZiAoaXNUcml2aWFsSHJlZihwcm9wcy5ocmVmKSkge1xuICAgIHByb3BzLnJvbGUgPSBwcm9wcy5yb2xlIHx8ICdidXR0b24nOyAvLyB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGVyZSBpcyBhIGhyZWYgYXR0cmlidXRlIG9uIHRoZSBub2RlXG4gICAgLy8gb3RoZXJ3aXNlLCB0aGUgY3Vyc29yIGluY29ycmVjdGx5IHN0eWxlZCAoZXhjZXB0IHdpdGggcm9sZT0nYnV0dG9uJylcblxuICAgIHByb3BzLmhyZWYgPSBwcm9wcy5ocmVmIHx8ICcjJztcbiAgfVxuXG4gIGlmIChkaXNhYmxlZCkge1xuICAgIHByb3BzLnRhYkluZGV4ID0gLTE7XG4gICAgcHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWZcbiAgfSwgcHJvcHMsIHtcbiAgICBvbkNsaWNrOiBoYW5kbGVDbGljayxcbiAgICBvbktleURvd246IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVLZXlEb3duLCBvbktleURvd24pXG4gIH0pKTtcbn0pO1xuU2FmZUFuY2hvci5kaXNwbGF5TmFtZSA9ICdTYWZlQW5jaG9yJztcbmV4cG9ydCBkZWZhdWx0IFNhZmVBbmNob3I7IiwiLy8gcmVhZGluZyBhIGRpbWVuc2lvbiBwcm9wIHdpbGwgY2F1c2UgdGhlIGJyb3dzZXIgdG8gcmVjYWxjdWxhdGUsXG4vLyB3aGljaCB3aWxsIGxldCBvdXIgYW5pbWF0aW9ucyB3b3JrXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmlnZ2VyQnJvd3NlclJlZmxvdyhub2RlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gIG5vZGUub2Zmc2V0SGVpZ2h0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICdAcmVzdGFydC9ob29rcy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB1c2VVcGRhdGVFZmZlY3QgZnJvbSAnQHJlc3RhcnQvaG9va3MvdXNlVXBkYXRlRWZmZWN0JztcbmltcG9ydCB1c2VUaW1lb3V0IGZyb20gJ0ByZXN0YXJ0L2hvb2tzL3VzZVRpbWVvdXQnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgdHJhbnNpdGlvbkVuZCBmcm9tICdkb20taGVscGVycy90cmFuc2l0aW9uRW5kJztcbmltcG9ydCBUcmFuc2l0aW9uIGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbic7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZUltcGVyYXRpdmVIYW5kbGUsIHVzZU1lbW8sIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VVbmNvbnRyb2xsZWQgfSBmcm9tICd1bmNvbnRyb2xsYWJsZSc7XG5pbXBvcnQgQ2Fyb3VzZWxDYXB0aW9uIGZyb20gJy4vQ2Fyb3VzZWxDYXB0aW9uJztcbmltcG9ydCBDYXJvdXNlbEl0ZW0gZnJvbSAnLi9DYXJvdXNlbEl0ZW0nO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9FbGVtZW50Q2hpbGRyZW4nO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgdHJpZ2dlckJyb3dzZXJSZWZsb3cgZnJvbSAnLi90cmlnZ2VyQnJvd3NlclJlZmxvdyc7XG52YXIgU1dJUEVfVEhSRVNIT0xEID0gNDA7XG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQGRlZmF1bHQgJ2Nhcm91c2VsJ1xuICAgKi9cbiAgYnNQcmVmaXg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgYW5pbWF0aW9uIG9uIHRoZSBDYXJvdXNlbCBhcyBpdCB0cmFuc2l0aW9ucyBiZXR3ZWVuIHNsaWRlcy5cbiAgICovXG4gIHNsaWRlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKiogQ3Jvc3MgZmFkZSBzbGlkZXMgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBzbGlkZSBhbmltYXRpb24gKi9cbiAgZmFkZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFNob3cgdGhlIENhcm91c2VsIHByZXZpb3VzIGFuZCBuZXh0IGFycm93cyBmb3IgY2hhbmdpbmcgdGhlIGN1cnJlbnQgc2xpZGVcbiAgICovXG4gIGNvbnRyb2xzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogU2hvdyBhIHNldCBvZiBzbGlkZSBwb3NpdGlvbiBpbmRpY2F0b3JzXG4gICAqL1xuICBpbmRpY2F0b3JzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQ29udHJvbHMgdGhlIGN1cnJlbnQgdmlzaWJsZSBzbGlkZVxuICAgKlxuICAgKiBAY29udHJvbGxhYmxlIG9uU2VsZWN0XG4gICAqL1xuICBhY3RpdmVJbmRleDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYWN0aXZlIGl0ZW0gY2hhbmdlcy5cbiAgICpcbiAgICogYGBganNcbiAgICogKGV2ZW50S2V5OiBudW1iZXIsIGV2ZW50OiBPYmplY3QgfCBudWxsKSA9PiB2b2lkXG4gICAqIGBgYFxuICAgKlxuICAgKiBAY29udHJvbGxhYmxlIGFjdGl2ZUluZGV4XG4gICAqL1xuICBvblNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBzbGlkZSB0cmFuc2l0aW9uIHN0YXJ0cy5cbiAgICpcbiAgICogYGBganNcbiAgICogKGV2ZW50S2V5OiBudW1iZXIsIGRpcmVjdGlvbjogJ2xlZnQnIHwgJ3JpZ2h0JykgPT4gdm9pZFxuICAgKi9cbiAgb25TbGlkZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBzbGlkZSB0cmFuc2l0aW9uIGVuZHMuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIChldmVudEtleTogbnVtYmVyLCBkaXJlY3Rpb246ICdsZWZ0JyB8ICdyaWdodCcpID0+IHZvaWRcbiAgICovXG4gIG9uU2xpZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBhbW91bnQgb2YgdGltZSB0byBkZWxheSBiZXR3ZWVuIGF1dG9tYXRpY2FsbHkgY3ljbGluZyBhbiBpdGVtLiBJZiBgbnVsbGAsIGNhcm91c2VsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgY3ljbGUuXG4gICAqL1xuICBpbnRlcnZhbDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKiogV2hldGhlciB0aGUgY2Fyb3VzZWwgc2hvdWxkIHJlYWN0IHRvIGtleWJvYXJkIGV2ZW50cy4gKi9cbiAga2V5Ym9hcmQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gYFwiaG92ZXJcImAsIHBhdXNlcyB0aGUgY3ljbGluZyBvZiB0aGUgY2Fyb3VzZWwgb24gYG1vdXNlZW50ZXJgIGFuZCByZXN1bWVzIHRoZSBjeWNsaW5nIG9mIHRoZSBjYXJvdXNlbCBvbiBgbW91c2VsZWF2ZWAuIElmIHNldCB0byBgZmFsc2VgLCBob3ZlcmluZyBvdmVyIHRoZSBjYXJvdXNlbCB3b24ndCBwYXVzZSBpdC5cbiAgICpcbiAgICogT24gdG91Y2gtZW5hYmxlZCBkZXZpY2VzLCB3aGVuIHNldCB0byBgXCJob3ZlclwiYCwgY3ljbGluZyB3aWxsIHBhdXNlIG9uIGB0b3VjaGVuZGAgKG9uY2UgdGhlIHVzZXIgZmluaXNoZWQgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgY2Fyb3VzZWwpIGZvciB0d28gaW50ZXJ2YWxzLCBiZWZvcmUgYXV0b21hdGljYWxseSByZXN1bWluZy4gTm90ZSB0aGF0IHRoaXMgaXMgaW4gYWRkaXRpb24gdG8gdGhlIGFib3ZlIG1vdXNlIGJlaGF2aW9yLlxuICAgKi9cbiAgcGF1c2U6IFByb3BUeXBlcy5vbmVPZihbJ2hvdmVyJywgZmFsc2VdKSxcblxuICAvKiogV2hldGhlciB0aGUgY2Fyb3VzZWwgc2hvdWxkIGN5Y2xlIGNvbnRpbnVvdXNseSBvciBoYXZlIGhhcmQgc3RvcHMuICovXG4gIHdyYXA6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBjYXJvdXNlbCBzaG91bGQgc3VwcG9ydCBsZWZ0L3JpZ2h0IHN3aXBlIGludGVyYWN0aW9ucyBvbiB0b3VjaHNjcmVlbiBkZXZpY2VzLlxuICAgKi9cbiAgdG91Y2g6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKiBPdmVycmlkZSB0aGUgZGVmYXVsdCBidXR0b24gaWNvbiBmb3IgdGhlIFwicHJldmlvdXNcIiBjb250cm9sICovXG4gIHByZXZJY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogTGFiZWwgc2hvd24gdG8gc2NyZWVuIHJlYWRlcnMgb25seSwgY2FuIGJlIHVzZWQgdG8gc2hvdyB0aGUgcHJldmlvdXMgZWxlbWVudFxuICAgKiBpbiB0aGUgY2Fyb3VzZWwuXG4gICAqIFNldCB0byBudWxsIHRvIGRlYWN0aXZhdGUuXG4gICAqL1xuICBwcmV2TGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IGJ1dHRvbiBpY29uIGZvciB0aGUgXCJuZXh0XCIgY29udHJvbCAqL1xuICBuZXh0SWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIExhYmVsIHNob3duIHRvIHNjcmVlbiByZWFkZXJzIG9ubHksIGNhbiBiZSB1c2VkIHRvIHNob3cgdGhlIG5leHQgZWxlbWVudFxuICAgKiBpbiB0aGUgY2Fyb3VzZWwuXG4gICAqIFNldCB0byBudWxsIHRvIGRlYWN0aXZhdGUuXG4gICAqL1xuICBuZXh0TGFiZWw6IFByb3BUeXBlcy5zdHJpbmdcbn07XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBzbGlkZTogdHJ1ZSxcbiAgZmFkZTogZmFsc2UsXG4gIGNvbnRyb2xzOiB0cnVlLFxuICBpbmRpY2F0b3JzOiB0cnVlLFxuICBkZWZhdWx0QWN0aXZlSW5kZXg6IDAsXG4gIGludGVydmFsOiA1MDAwLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgcGF1c2U6ICdob3ZlcicsXG4gIHdyYXA6IHRydWUsXG4gIHRvdWNoOiB0cnVlLFxuICBwcmV2SWNvbjogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuICAgIGNsYXNzTmFtZTogXCJjYXJvdXNlbC1jb250cm9sLXByZXYtaWNvblwiXG4gIH0pLFxuICBwcmV2TGFiZWw6ICdQcmV2aW91cycsXG4gIG5leHRJY29uOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsXG4gICAgY2xhc3NOYW1lOiBcImNhcm91c2VsLWNvbnRyb2wtbmV4dC1pY29uXCJcbiAgfSksXG4gIG5leHRMYWJlbDogJ05leHQnXG59O1xuXG5mdW5jdGlvbiBpc1Zpc2libGUoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQuc3R5bGUgfHwgIWVsZW1lbnQucGFyZW50Tm9kZSB8fCAhZWxlbWVudC5wYXJlbnROb2RlLnN0eWxlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGVsZW1lbnRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHJldHVybiBlbGVtZW50U3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnICYmIGVsZW1lbnRTdHlsZS52aXNpYmlsaXR5ICE9PSAnaGlkZGVuJyAmJiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQucGFyZW50Tm9kZSkuZGlzcGxheSAhPT0gJ25vbmUnO1xufVxuXG5mdW5jdGlvbiBDYXJvdXNlbEZ1bmModW5jb250cm9sbGVkUHJvcHMsIHJlZikge1xuICB2YXIgX3VzZVVuY29udHJvbGxlZCA9IHVzZVVuY29udHJvbGxlZCh1bmNvbnRyb2xsZWRQcm9wcywge1xuICAgIGFjdGl2ZUluZGV4OiAnb25TZWxlY3QnXG4gIH0pLFxuICAgICAgX3VzZVVuY29udHJvbGxlZCRhcyA9IF91c2VVbmNvbnRyb2xsZWQuYXMsXG4gICAgICBDb21wb25lbnQgPSBfdXNlVW5jb250cm9sbGVkJGFzID09PSB2b2lkIDAgPyAnZGl2JyA6IF91c2VVbmNvbnRyb2xsZWQkYXMsXG4gICAgICBic1ByZWZpeCA9IF91c2VVbmNvbnRyb2xsZWQuYnNQcmVmaXgsXG4gICAgICBzbGlkZSA9IF91c2VVbmNvbnRyb2xsZWQuc2xpZGUsXG4gICAgICBmYWRlID0gX3VzZVVuY29udHJvbGxlZC5mYWRlLFxuICAgICAgY29udHJvbHMgPSBfdXNlVW5jb250cm9sbGVkLmNvbnRyb2xzLFxuICAgICAgaW5kaWNhdG9ycyA9IF91c2VVbmNvbnRyb2xsZWQuaW5kaWNhdG9ycyxcbiAgICAgIGFjdGl2ZUluZGV4ID0gX3VzZVVuY29udHJvbGxlZC5hY3RpdmVJbmRleCxcbiAgICAgIG9uU2VsZWN0ID0gX3VzZVVuY29udHJvbGxlZC5vblNlbGVjdCxcbiAgICAgIG9uU2xpZGUgPSBfdXNlVW5jb250cm9sbGVkLm9uU2xpZGUsXG4gICAgICBvblNsaWQgPSBfdXNlVW5jb250cm9sbGVkLm9uU2xpZCxcbiAgICAgIGludGVydmFsID0gX3VzZVVuY29udHJvbGxlZC5pbnRlcnZhbCxcbiAgICAgIGtleWJvYXJkID0gX3VzZVVuY29udHJvbGxlZC5rZXlib2FyZCxcbiAgICAgIG9uS2V5RG93biA9IF91c2VVbmNvbnRyb2xsZWQub25LZXlEb3duLFxuICAgICAgcGF1c2UgPSBfdXNlVW5jb250cm9sbGVkLnBhdXNlLFxuICAgICAgb25Nb3VzZU92ZXIgPSBfdXNlVW5jb250cm9sbGVkLm9uTW91c2VPdmVyLFxuICAgICAgb25Nb3VzZU91dCA9IF91c2VVbmNvbnRyb2xsZWQub25Nb3VzZU91dCxcbiAgICAgIHdyYXAgPSBfdXNlVW5jb250cm9sbGVkLndyYXAsXG4gICAgICB0b3VjaCA9IF91c2VVbmNvbnRyb2xsZWQudG91Y2gsXG4gICAgICBvblRvdWNoU3RhcnQgPSBfdXNlVW5jb250cm9sbGVkLm9uVG91Y2hTdGFydCxcbiAgICAgIG9uVG91Y2hNb3ZlID0gX3VzZVVuY29udHJvbGxlZC5vblRvdWNoTW92ZSxcbiAgICAgIG9uVG91Y2hFbmQgPSBfdXNlVW5jb250cm9sbGVkLm9uVG91Y2hFbmQsXG4gICAgICBwcmV2SWNvbiA9IF91c2VVbmNvbnRyb2xsZWQucHJldkljb24sXG4gICAgICBwcmV2TGFiZWwgPSBfdXNlVW5jb250cm9sbGVkLnByZXZMYWJlbCxcbiAgICAgIG5leHRJY29uID0gX3VzZVVuY29udHJvbGxlZC5uZXh0SWNvbixcbiAgICAgIG5leHRMYWJlbCA9IF91c2VVbmNvbnRyb2xsZWQubmV4dExhYmVsLFxuICAgICAgY2xhc3NOYW1lID0gX3VzZVVuY29udHJvbGxlZC5jbGFzc05hbWUsXG4gICAgICBjaGlsZHJlbiA9IF91c2VVbmNvbnRyb2xsZWQuY2hpbGRyZW4sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF91c2VVbmNvbnRyb2xsZWQsIFtcImFzXCIsIFwiYnNQcmVmaXhcIiwgXCJzbGlkZVwiLCBcImZhZGVcIiwgXCJjb250cm9sc1wiLCBcImluZGljYXRvcnNcIiwgXCJhY3RpdmVJbmRleFwiLCBcIm9uU2VsZWN0XCIsIFwib25TbGlkZVwiLCBcIm9uU2xpZFwiLCBcImludGVydmFsXCIsIFwia2V5Ym9hcmRcIiwgXCJvbktleURvd25cIiwgXCJwYXVzZVwiLCBcIm9uTW91c2VPdmVyXCIsIFwib25Nb3VzZU91dFwiLCBcIndyYXBcIiwgXCJ0b3VjaFwiLCBcIm9uVG91Y2hTdGFydFwiLCBcIm9uVG91Y2hNb3ZlXCIsIFwib25Ub3VjaEVuZFwiLCBcInByZXZJY29uXCIsIFwicHJldkxhYmVsXCIsIFwibmV4dEljb25cIiwgXCJuZXh0TGFiZWxcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgdmFyIHByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChic1ByZWZpeCwgJ2Nhcm91c2VsJyk7XG4gIHZhciBuZXh0RGlyZWN0aW9uUmVmID0gdXNlUmVmKG51bGwpO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZSgnbmV4dCcpLFxuICAgICAgZGlyZWN0aW9uID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0RGlyZWN0aW9uID0gX3VzZVN0YXRlWzFdO1xuXG4gIHZhciBfdXNlU3RhdGUyID0gdXNlU3RhdGUoZmFsc2UpLFxuICAgICAgaXNTbGlkaW5nID0gX3VzZVN0YXRlMlswXSxcbiAgICAgIHNldElzU2xpZGluZyA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTMgPSB1c2VTdGF0ZShhY3RpdmVJbmRleCB8fCAwKSxcbiAgICAgIHJlbmRlcmVkQWN0aXZlSW5kZXggPSBfdXNlU3RhdGUzWzBdLFxuICAgICAgc2V0UmVuZGVyZWRBY3RpdmVJbmRleCA9IF91c2VTdGF0ZTNbMV07XG5cbiAgaWYgKCFpc1NsaWRpbmcgJiYgYWN0aXZlSW5kZXggIT09IHJlbmRlcmVkQWN0aXZlSW5kZXgpIHtcbiAgICBpZiAobmV4dERpcmVjdGlvblJlZi5jdXJyZW50KSB7XG4gICAgICBzZXREaXJlY3Rpb24obmV4dERpcmVjdGlvblJlZi5jdXJyZW50KTtcbiAgICAgIG5leHREaXJlY3Rpb25SZWYuY3VycmVudCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldERpcmVjdGlvbigoYWN0aXZlSW5kZXggfHwgMCkgPiByZW5kZXJlZEFjdGl2ZUluZGV4ID8gJ25leHQnIDogJ3ByZXYnKTtcbiAgICB9XG5cbiAgICBpZiAoc2xpZGUpIHtcbiAgICAgIHNldElzU2xpZGluZyh0cnVlKTtcbiAgICB9XG5cbiAgICBzZXRSZW5kZXJlZEFjdGl2ZUluZGV4KGFjdGl2ZUluZGV4IHx8IDApO1xuICB9XG5cbiAgdmFyIG51bUNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbikuZmlsdGVyKFJlYWN0LmlzVmFsaWRFbGVtZW50KS5sZW5ndGg7XG4gIHZhciBwcmV2ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGlzU2xpZGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0QWN0aXZlSW5kZXggPSByZW5kZXJlZEFjdGl2ZUluZGV4IC0gMTtcblxuICAgIGlmIChuZXh0QWN0aXZlSW5kZXggPCAwKSB7XG4gICAgICBpZiAoIXdyYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBuZXh0QWN0aXZlSW5kZXggPSBudW1DaGlsZHJlbiAtIDE7XG4gICAgfVxuXG4gICAgbmV4dERpcmVjdGlvblJlZi5jdXJyZW50ID0gJ3ByZXYnO1xuXG4gICAgaWYgKG9uU2VsZWN0KSB7XG4gICAgICBvblNlbGVjdChuZXh0QWN0aXZlSW5kZXgsIGV2ZW50KTtcbiAgICB9XG4gIH0sIFtpc1NsaWRpbmcsIHJlbmRlcmVkQWN0aXZlSW5kZXgsIG9uU2VsZWN0LCB3cmFwLCBudW1DaGlsZHJlbl0pOyAvLyBUaGlzIGlzIHVzZWQgaW4gdGhlIHNldEludGVydmFsLCBzbyBpdCBzaG91bGQgbm90IGludmFsaWRhdGUuXG5cbiAgdmFyIG5leHQgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChpc1NsaWRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEFjdGl2ZUluZGV4ID0gcmVuZGVyZWRBY3RpdmVJbmRleCArIDE7XG5cbiAgICBpZiAobmV4dEFjdGl2ZUluZGV4ID49IG51bUNoaWxkcmVuKSB7XG4gICAgICBpZiAoIXdyYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBuZXh0QWN0aXZlSW5kZXggPSAwO1xuICAgIH1cblxuICAgIG5leHREaXJlY3Rpb25SZWYuY3VycmVudCA9ICduZXh0JztcblxuICAgIGlmIChvblNlbGVjdCkge1xuICAgICAgb25TZWxlY3QobmV4dEFjdGl2ZUluZGV4LCBldmVudCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGVsZW1lbnRSZWYgPSB1c2VSZWYoKTtcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZWxlbWVudDogZWxlbWVudFJlZi5jdXJyZW50LFxuICAgICAgcHJldjogcHJldixcbiAgICAgIG5leHQ6IG5leHRcbiAgICB9O1xuICB9KTsgLy8gVGhpcyBpcyB1c2VkIGluIHRoZSBzZXRJbnRlcnZhbCwgc28gaXQgc2hvdWxkIG5vdCBpbnZhbGlkYXRlLlxuXG4gIHZhciBuZXh0V2hlblZpc2libGUgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWRvY3VtZW50LmhpZGRlbiAmJiBpc1Zpc2libGUoZWxlbWVudFJlZi5jdXJyZW50KSkge1xuICAgICAgbmV4dCgpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBzbGlkZURpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgdXNlVXBkYXRlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2xpZGUpIHtcbiAgICAgIC8vIFRoZXNlIGNhbGxiYWNrcyB3aWxsIGJlIGhhbmRsZWQgYnkgdGhlIDxUcmFuc2l0aW9uPiBjYWxsYmFja3MuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uU2xpZGUpIHtcbiAgICAgIG9uU2xpZGUocmVuZGVyZWRBY3RpdmVJbmRleCwgc2xpZGVEaXJlY3Rpb24pO1xuICAgIH1cblxuICAgIGlmIChvblNsaWQpIHtcbiAgICAgIG9uU2xpZChyZW5kZXJlZEFjdGl2ZUluZGV4LCBzbGlkZURpcmVjdGlvbik7XG4gICAgfVxuICB9LCBbcmVuZGVyZWRBY3RpdmVJbmRleF0pO1xuICB2YXIgb3JkZXJDbGFzc05hbWUgPSBwcmVmaXggKyBcIi1pdGVtLVwiICsgZGlyZWN0aW9uO1xuICB2YXIgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBwcmVmaXggKyBcIi1pdGVtLVwiICsgc2xpZGVEaXJlY3Rpb247XG4gIHZhciBoYW5kbGVFbnRlciA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdHJpZ2dlckJyb3dzZXJSZWZsb3cobm9kZSk7XG5cbiAgICBpZiAob25TbGlkZSkge1xuICAgICAgb25TbGlkZShyZW5kZXJlZEFjdGl2ZUluZGV4LCBzbGlkZURpcmVjdGlvbik7XG4gICAgfVxuICB9LCBbb25TbGlkZSwgcmVuZGVyZWRBY3RpdmVJbmRleCwgc2xpZGVEaXJlY3Rpb25dKTtcbiAgdmFyIGhhbmRsZUVudGVyZWQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc2V0SXNTbGlkaW5nKGZhbHNlKTtcblxuICAgIGlmIChvblNsaWQpIHtcbiAgICAgIG9uU2xpZChyZW5kZXJlZEFjdGl2ZUluZGV4LCBzbGlkZURpcmVjdGlvbik7XG4gICAgfVxuICB9LCBbb25TbGlkLCByZW5kZXJlZEFjdGl2ZUluZGV4LCBzbGlkZURpcmVjdGlvbl0pO1xuICB2YXIgaGFuZGxlS2V5RG93biA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChrZXlib2FyZCAmJiAhL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBwcmV2KGV2ZW50KTtcbiAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBuZXh0KGV2ZW50KTtcbiAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH1cbiAgfSwgW2tleWJvYXJkLCBvbktleURvd24sIHByZXYsIG5leHRdKTtcblxuICB2YXIgX3VzZVN0YXRlNCA9IHVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIHBhdXNlZE9uSG92ZXIgPSBfdXNlU3RhdGU0WzBdLFxuICAgICAgc2V0UGF1c2VkT25Ib3ZlciA9IF91c2VTdGF0ZTRbMV07XG5cbiAgdmFyIGhhbmRsZU1vdXNlT3ZlciA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChwYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgc2V0UGF1c2VkT25Ib3Zlcih0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAob25Nb3VzZU92ZXIpIHtcbiAgICAgIG9uTW91c2VPdmVyKGV2ZW50KTtcbiAgICB9XG4gIH0sIFtwYXVzZSwgb25Nb3VzZU92ZXJdKTtcbiAgdmFyIGhhbmRsZU1vdXNlT3V0ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgc2V0UGF1c2VkT25Ib3ZlcihmYWxzZSk7XG5cbiAgICBpZiAob25Nb3VzZU91dCkge1xuICAgICAgb25Nb3VzZU91dChldmVudCk7XG4gICAgfVxuICB9LCBbb25Nb3VzZU91dF0pO1xuICB2YXIgdG91Y2hTdGFydFhSZWYgPSB1c2VSZWYoMCk7XG4gIHZhciB0b3VjaERlbHRhWFJlZiA9IHVzZVJlZigwKTtcblxuICB2YXIgX3VzZVN0YXRlNSA9IHVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIHBhdXNlZE9uVG91Y2ggPSBfdXNlU3RhdGU1WzBdLFxuICAgICAgc2V0UGF1c2VkT25Ub3VjaCA9IF91c2VTdGF0ZTVbMV07XG5cbiAgdmFyIHRvdWNoVW5wYXVzZVRpbWVvdXQgPSB1c2VUaW1lb3V0KCk7XG4gIHZhciBoYW5kbGVUb3VjaFN0YXJ0ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdG91Y2hTdGFydFhSZWYuY3VycmVudCA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICB0b3VjaERlbHRhWFJlZi5jdXJyZW50ID0gMDtcblxuICAgIGlmICh0b3VjaCkge1xuICAgICAgc2V0UGF1c2VkT25Ub3VjaCh0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAob25Ub3VjaFN0YXJ0KSB7XG4gICAgICBvblRvdWNoU3RhcnQoZXZlbnQpO1xuICAgIH1cbiAgfSwgW3RvdWNoLCBvblRvdWNoU3RhcnRdKTtcbiAgdmFyIGhhbmRsZVRvdWNoTW92ZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChldmVudC50b3VjaGVzICYmIGV2ZW50LnRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgdG91Y2hEZWx0YVhSZWYuY3VycmVudCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvdWNoRGVsdGFYUmVmLmN1cnJlbnQgPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFggLSB0b3VjaFN0YXJ0WFJlZi5jdXJyZW50O1xuICAgIH1cblxuICAgIGlmIChvblRvdWNoTW92ZSkge1xuICAgICAgb25Ub3VjaE1vdmUoZXZlbnQpO1xuICAgIH1cbiAgfSwgW29uVG91Y2hNb3ZlXSk7XG4gIHZhciBoYW5kbGVUb3VjaEVuZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmICh0b3VjaCkge1xuICAgICAgdmFyIHRvdWNoRGVsdGFYID0gdG91Y2hEZWx0YVhSZWYuY3VycmVudDtcblxuICAgICAgaWYgKE1hdGguYWJzKHRvdWNoRGVsdGFYKSA8PSBTV0lQRV9USFJFU0hPTEQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodG91Y2hEZWx0YVggPiAwKSB7XG4gICAgICAgIHByZXYoZXZlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dChldmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdG91Y2hVbnBhdXNlVGltZW91dC5zZXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2V0UGF1c2VkT25Ub3VjaChmYWxzZSk7XG4gICAgfSwgaW50ZXJ2YWwgfHwgdW5kZWZpbmVkKTtcblxuICAgIGlmIChvblRvdWNoRW5kKSB7XG4gICAgICBvblRvdWNoRW5kKGV2ZW50KTtcbiAgICB9XG4gIH0sIFt0b3VjaCwgcHJldiwgbmV4dCwgdG91Y2hVbnBhdXNlVGltZW91dCwgaW50ZXJ2YWwsIG9uVG91Y2hFbmRdKTtcbiAgdmFyIHNob3VsZFBsYXkgPSBpbnRlcnZhbCAhPSBudWxsICYmICFwYXVzZWRPbkhvdmVyICYmICFwYXVzZWRPblRvdWNoICYmICFpc1NsaWRpbmc7XG4gIHZhciBpbnRlcnZhbEhhbmRsZVJlZiA9IHVzZVJlZigpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghc2hvdWxkUGxheSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpbnRlcnZhbEhhbmRsZVJlZi5jdXJyZW50ID0gd2luZG93LnNldEludGVydmFsKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA/IG5leHRXaGVuVmlzaWJsZSA6IG5leHQsIGludGVydmFsIHx8IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpbnRlcnZhbEhhbmRsZVJlZi5jdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxIYW5kbGVSZWYuY3VycmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW3Nob3VsZFBsYXksIG5leHQsIGludGVydmFsLCBuZXh0V2hlblZpc2libGVdKTtcbiAgdmFyIGluZGljYXRvck9uQ2xpY2tzID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGluZGljYXRvcnMgJiYgQXJyYXkuZnJvbSh7XG4gICAgICBsZW5ndGg6IG51bUNoaWxkcmVuXG4gICAgfSwgZnVuY3Rpb24gKF8sIGluZGV4KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChvblNlbGVjdCkge1xuICAgICAgICAgIG9uU2VsZWN0KGluZGV4LCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH0sIFtpbmRpY2F0b3JzLCBudW1DaGlsZHJlbiwgb25TZWxlY3RdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIHJlZjogZWxlbWVudFJlZlxuICB9LCBwcm9wcywge1xuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICBvbk1vdXNlT3ZlcjogaGFuZGxlTW91c2VPdmVyLFxuICAgIG9uTW91c2VPdXQ6IGhhbmRsZU1vdXNlT3V0LFxuICAgIG9uVG91Y2hTdGFydDogaGFuZGxlVG91Y2hTdGFydCxcbiAgICBvblRvdWNoTW92ZTogaGFuZGxlVG91Y2hNb3ZlLFxuICAgIG9uVG91Y2hFbmQ6IGhhbmRsZVRvdWNoRW5kLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIHByZWZpeCwgc2xpZGUgJiYgJ3NsaWRlJywgZmFkZSAmJiBwcmVmaXggKyBcIi1mYWRlXCIpXG4gIH0pLCBpbmRpY2F0b3JzICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwib2xcIiwge1xuICAgIGNsYXNzTmFtZTogcHJlZml4ICsgXCItaW5kaWNhdG9yc1wiXG4gIH0sIG1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKF9jaGlsZCwgaW5kZXgpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7XG4gICAgICBrZXk6IGluZGV4LFxuICAgICAgY2xhc3NOYW1lOiBpbmRleCA9PT0gcmVuZGVyZWRBY3RpdmVJbmRleCA/ICdhY3RpdmUnIDogdW5kZWZpbmVkLFxuICAgICAgb25DbGljazogaW5kaWNhdG9yT25DbGlja3MgPyBpbmRpY2F0b3JPbkNsaWNrc1tpbmRleF0gOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBwcmVmaXggKyBcIi1pbm5lclwiXG4gIH0sIG1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgIHZhciBpc0FjdGl2ZSA9IGluZGV4ID09PSByZW5kZXJlZEFjdGl2ZUluZGV4O1xuICAgIHJldHVybiBzbGlkZSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIHtcbiAgICAgIGluOiBpc0FjdGl2ZSxcbiAgICAgIG9uRW50ZXI6IGlzQWN0aXZlID8gaGFuZGxlRW50ZXIgOiB1bmRlZmluZWQsXG4gICAgICBvbkVudGVyZWQ6IGlzQWN0aXZlID8gaGFuZGxlRW50ZXJlZCA6IHVuZGVmaW5lZCxcbiAgICAgIGFkZEVuZExpc3RlbmVyOiB0cmFuc2l0aW9uRW5kXG4gICAgfSwgZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2hpbGQucHJvcHMuY2xhc3NOYW1lLCBpc0FjdGl2ZSAmJiBzdGF0dXMgIT09ICdlbnRlcmVkJyAmJiBvcmRlckNsYXNzTmFtZSwgKHN0YXR1cyA9PT0gJ2VudGVyZWQnIHx8IHN0YXR1cyA9PT0gJ2V4aXRpbmcnKSAmJiAnYWN0aXZlJywgKHN0YXR1cyA9PT0gJ2VudGVyaW5nJyB8fCBzdGF0dXMgPT09ICdleGl0aW5nJykgJiYgZGlyZWN0aW9uYWxDbGFzc05hbWUpXG4gICAgICB9KTtcbiAgICB9KSA6IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNoaWxkLnByb3BzLmNsYXNzTmFtZSwgaXNBY3RpdmUgJiYgJ2FjdGl2ZScpXG4gICAgfSk7XG4gIH0pKSwgY29udHJvbHMgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsICh3cmFwIHx8IGFjdGl2ZUluZGV4ICE9PSAwKSAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCB7XG4gICAgY2xhc3NOYW1lOiBwcmVmaXggKyBcIi1jb250cm9sLXByZXZcIixcbiAgICBvbkNsaWNrOiBwcmV2XG4gIH0sIHByZXZJY29uLCBwcmV2TGFiZWwgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IFwic3Itb25seVwiXG4gIH0sIHByZXZMYWJlbCkpLCAod3JhcCB8fCBhY3RpdmVJbmRleCAhPT0gbnVtQ2hpbGRyZW4gLSAxKSAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCB7XG4gICAgY2xhc3NOYW1lOiBwcmVmaXggKyBcIi1jb250cm9sLW5leHRcIixcbiAgICBvbkNsaWNrOiBuZXh0XG4gIH0sIG5leHRJY29uLCBuZXh0TGFiZWwgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IFwic3Itb25seVwiXG4gIH0sIG5leHRMYWJlbCkpKSk7XG59XG5cbnZhciBDYXJvdXNlbCA9IFJlYWN0LmZvcndhcmRSZWYoQ2Fyb3VzZWxGdW5jKTtcbkNhcm91c2VsLmRpc3BsYXlOYW1lID0gJ0Nhcm91c2VsJztcbkNhcm91c2VsLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNhcm91c2VsLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbkNhcm91c2VsLkNhcHRpb24gPSBDYXJvdXNlbENhcHRpb247XG5DYXJvdXNlbC5JdGVtID0gQ2Fyb3VzZWxJdGVtO1xuZXhwb3J0IGRlZmF1bHQgQ2Fyb3VzZWw7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgSW1nQ29tcG9zYW50IGZyb20gJy4uL2NvbXBvbmVudC9pbWctY29tcG9zYW50J1xyXG5pbXBvcnQgeyBDYXJvdXNlbCB9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCdcclxuXHJcbmNsYXNzIENhcm91c2VsQ29udGFpbmVyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKVxyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBpbWFnZXM6IFtdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuICAgICAgICBmZXRjaCgnaW1hZ2VzLmpzb24nLCB7IG1ldGhvZDogJ0dFVCcgfSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaW1hZ2VzOiByZXNwb25zZSB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlciAoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPENhcm91c2VsPlxyXG5cclxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmltYWdlcy5tYXAoKGltYWdlLCBpbmRleCkgPT4gPENhcm91c2VsLkl0ZW0ga2V5PXtpbmRleH0+IDxJbWdDb21wb3NhbnQgc3JjSU1HPXtpbWFnZS5pbWdTcmN9IGNsYXNzQm89J2ltZy1jYXJvdXNzZWwgZC1ibG9jayB3LTEwMCcgLz48L0Nhcm91c2VsLkl0ZW0+KX1cclxuXHJcbiAgICAgICAgICAgIDwvQ2Fyb3VzZWw+XHJcblxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2Fyb3VzZWxDb250YWluZXJcclxuIiwiXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmZ1bmN0aW9uIFNwYW5Db21wb25lbnQgKHsgZGl2Q2xhc3MsIHRleHQgfSkge1xyXG4gICAgcmV0dXJuIChcclxuXHJcbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtkaXZDbGFzc30+e3RleHR9PC9zcGFuPlxyXG5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU3BhbkNvbXBvbmVudFxyXG4iLCJpbXBvcnQgY2FuVXNlRE9NIGZyb20gJy4vY2FuVXNlRE9NJztcbnZhciBzaXplO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2Nyb2xsYmFyU2l6ZShyZWNhbGMpIHtcbiAgaWYgKCFzaXplICYmIHNpemUgIT09IDAgfHwgcmVjYWxjKSB7XG4gICAgaWYgKGNhblVzZURPTSkge1xuICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS50b3AgPSAnLTk5OTlweCc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUud2lkdGggPSAnNTBweCc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUuaGVpZ2h0ID0gJzUwcHgnO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gICAgICBzaXplID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzaXplO1xufSIsImltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4vb3duZXJEb2N1bWVudCc7XG4vKipcbiAqIFJldHVybiB0aGUgYWN0aXZlbHkgZm9jdXNlZCBlbGVtZW50IHNhZmVseS5cbiAqXG4gKiBAcGFyYW0gZG9jIHRoZSBkb2N1bWVudCB0byBjaGVjbFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFjdGl2ZUVsZW1lbnQoZG9jKSB7XG4gIGlmIChkb2MgPT09IHZvaWQgMCkge1xuICAgIGRvYyA9IG93bmVyRG9jdW1lbnQoKTtcbiAgfVxuXG4gIC8vIFN1cHBvcnQ6IElFIDkgb25seVxuICAvLyBJRTkgdGhyb3dzIGFuIFwiVW5zcGVjaWZpZWQgZXJyb3JcIiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBmcm9tIGFuIDxpZnJhbWU+XG4gIHRyeSB7XG4gICAgdmFyIGFjdGl2ZSA9IGRvYy5hY3RpdmVFbGVtZW50OyAvLyBJRTExIHJldHVybnMgYSBzZWVtaW5nbHkgZW1wdHkgb2JqZWN0IGluIHNvbWUgY2FzZXMgd2hlbiBhY2Nlc3NpbmdcbiAgICAvLyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGZyb20gYW4gPGlmcmFtZT5cblxuICAgIGlmICghYWN0aXZlIHx8ICFhY3RpdmUubm9kZU5hbWUpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBhY3RpdmU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvKiBpZSB0aHJvd3MgaWYgbm8gYWN0aXZlIGVsZW1lbnQgKi9cbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn0iLCJpbXBvcnQgaGFzQ2xhc3MgZnJvbSAnLi9oYXNDbGFzcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtlbHNlIGlmICghaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSkgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUgKyBcIiBcIiArIGNsYXNzTmFtZTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVtZW50LmNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8ICcnKSArIFwiIFwiICsgY2xhc3NOYW1lKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSByZXR1cm4gISFjbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbiAgcmV0dXJuIChcIiBcIiArIChlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8IGVsZW1lbnQuY2xhc3NOYW1lKSArIFwiIFwiKS5pbmRleE9mKFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIpICE9PSAtMTtcbn0iLCJmdW5jdGlvbiByZXBsYWNlQ2xhc3NOYW1lKG9yaWdDbGFzcywgY2xhc3NUb1JlbW92ZSkge1xuICByZXR1cm4gb3JpZ0NsYXNzLnJlcGxhY2UobmV3IFJlZ0V4cChcIihefFxcXFxzKVwiICsgY2xhc3NUb1JlbW92ZSArIFwiKD86XFxcXHN8JClcIiwgJ2cnKSwgJyQxJykucmVwbGFjZSgvXFxzKy9nLCAnICcpLnJlcGxhY2UoL15cXHMqfFxccyokL2csICcnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbGVtZW50LmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICA7XG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSByZXBsYWNlQ2xhc3NOYW1lKGVsZW1lbnQuY2xhc3NOYW1lLCBjbGFzc05hbWUpO1xuICB9IGVsc2Uge1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHJlcGxhY2VDbGFzc05hbWUoZWxlbWVudC5jbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCAnJywgY2xhc3NOYW1lKSk7XG4gIH1cbn0iLCJpbXBvcnQgaXNEb2N1bWVudCBmcm9tICcuL2lzRG9jdW1lbnQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNXaW5kb3cobm9kZSkge1xuICBpZiAoJ3dpbmRvdycgaW4gbm9kZSAmJiBub2RlLndpbmRvdyA9PT0gbm9kZSkgcmV0dXJuIG5vZGU7XG4gIGlmIChpc0RvY3VtZW50KG5vZGUpKSByZXR1cm4gbm9kZS5kZWZhdWx0VmlldyB8fCBmYWxzZTtcbiAgcmV0dXJuIGZhbHNlO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRG9jdW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gJ25vZGVUeXBlJyBpbiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IGRvY3VtZW50LkRPQ1VNRU5UX05PREU7XG59IiwiaW1wb3J0IGlzV2luZG93IGZyb20gJ2RvbS1oZWxwZXJzL2lzV2luZG93JztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJ2RvbS1oZWxwZXJzL293bmVyRG9jdW1lbnQnO1xuXG5mdW5jdGlvbiBpc0JvZHkobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2JvZHknO1xufVxuXG5mdW5jdGlvbiBib2R5SXNPdmVyZmxvd2luZyhub2RlKSB7XG4gIHZhciBkb2MgPSBpc1dpbmRvdyhub2RlKSA/IG93bmVyRG9jdW1lbnQoKSA6IG93bmVyRG9jdW1lbnQobm9kZSk7XG4gIHZhciB3aW4gPSBpc1dpbmRvdyhub2RlKSB8fCBkb2MuZGVmYXVsdFZpZXc7XG4gIHJldHVybiBkb2MuYm9keS5jbGllbnRXaWR0aCA8IHdpbi5pbm5lcldpZHRoO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc092ZXJmbG93aW5nKGNvbnRhaW5lcikge1xuICB2YXIgd2luID0gaXNXaW5kb3coY29udGFpbmVyKTtcbiAgcmV0dXJuIHdpbiB8fCBpc0JvZHkoY29udGFpbmVyKSA/IGJvZHlJc092ZXJmbG93aW5nKGNvbnRhaW5lcikgOiBjb250YWluZXIuc2Nyb2xsSGVpZ2h0ID4gY29udGFpbmVyLmNsaWVudEhlaWdodDtcbn0iLCJ2YXIgQkxBQ0tMSVNUID0gWyd0ZW1wbGF0ZScsICdzY3JpcHQnLCAnc3R5bGUnXTtcblxudmFyIGlzSGlkYWJsZSA9IGZ1bmN0aW9uIGlzSGlkYWJsZShfcmVmKSB7XG4gIHZhciBub2RlVHlwZSA9IF9yZWYubm9kZVR5cGUsXG4gICAgICB0YWdOYW1lID0gX3JlZi50YWdOYW1lO1xuICByZXR1cm4gbm9kZVR5cGUgPT09IDEgJiYgQkxBQ0tMSVNULmluZGV4T2YodGFnTmFtZS50b0xvd2VyQ2FzZSgpKSA9PT0gLTE7XG59O1xuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiBzaWJsaW5ncyhjb250YWluZXIsIGV4Y2x1ZGUsIGNiKSB7XG4gIFtdLmZvckVhY2guY2FsbChjb250YWluZXIuY2hpbGRyZW4sIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKGV4Y2x1ZGUuaW5kZXhPZihub2RlKSA9PT0gLTEgJiYgaXNIaWRhYmxlKG5vZGUpKSB7XG4gICAgICBjYihub2RlKTtcbiAgICB9XG4gIH0pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFyaWFIaWRkZW4oaGlkZSwgbm9kZSkge1xuICBpZiAoIW5vZGUpIHJldHVybjtcblxuICBpZiAoaGlkZSkge1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBoaWRlU2libGluZ3MoY29udGFpbmVyLCBfcmVmMikge1xuICB2YXIgZGlhbG9nID0gX3JlZjIuZGlhbG9nLFxuICAgICAgYmFja2Ryb3AgPSBfcmVmMi5iYWNrZHJvcDtcbiAgc2libGluZ3MoY29udGFpbmVyLCBbZGlhbG9nLCBiYWNrZHJvcF0sIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIGFyaWFIaWRkZW4odHJ1ZSwgbm9kZSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNob3dTaWJsaW5ncyhjb250YWluZXIsIF9yZWYzKSB7XG4gIHZhciBkaWFsb2cgPSBfcmVmMy5kaWFsb2csXG4gICAgICBiYWNrZHJvcCA9IF9yZWYzLmJhY2tkcm9wO1xuICBzaWJsaW5ncyhjb250YWluZXIsIFtkaWFsb2csIGJhY2tkcm9wXSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gYXJpYUhpZGRlbihmYWxzZSwgbm9kZSk7XG4gIH0pO1xufSIsImltcG9ydCBhZGRDbGFzcyBmcm9tICdkb20taGVscGVycy9hZGRDbGFzcyc7XG5pbXBvcnQgcmVtb3ZlQ2xhc3MgZnJvbSAnZG9tLWhlbHBlcnMvcmVtb3ZlQ2xhc3MnO1xuaW1wb3J0IGNzcyBmcm9tICdkb20taGVscGVycy9jc3MnO1xuaW1wb3J0IGdldFNjcm9sbGJhclNpemUgZnJvbSAnZG9tLWhlbHBlcnMvc2Nyb2xsYmFyU2l6ZSc7XG5pbXBvcnQgaXNPdmVyZmxvd2luZyBmcm9tICcuL2lzT3ZlcmZsb3dpbmcnO1xuaW1wb3J0IHsgYXJpYUhpZGRlbiwgaGlkZVNpYmxpbmdzLCBzaG93U2libGluZ3MgfSBmcm9tICcuL21hbmFnZUFyaWFIaWRkZW4nO1xuXG5mdW5jdGlvbiBmaW5kSW5kZXhPZihhcnIsIGNiKSB7XG4gIHZhciBpZHggPSAtMTtcbiAgYXJyLnNvbWUoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICBpZiAoY2IoZCwgaSkpIHtcbiAgICAgIGlkeCA9IGk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuICByZXR1cm4gaWR4O1xufVxuXG4vKipcbiAqIFByb3BlciBzdGF0ZSBtYW5hZ2VtZW50IGZvciBjb250YWluZXJzIGFuZCB0aGUgbW9kYWxzIGluIHRob3NlIGNvbnRhaW5lcnMuXG4gKlxuICogQGludGVybmFsIFVzZWQgYnkgdGhlIE1vZGFsIHRvIGVuc3VyZSBwcm9wZXIgc3R5bGluZyBvZiBjb250YWluZXJzLlxuICovXG52YXIgTW9kYWxNYW5hZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTW9kYWxNYW5hZ2VyKF90ZW1wKSB7XG4gICAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgICAgX3JlZiRoaWRlU2libGluZ05vZGVzID0gX3JlZi5oaWRlU2libGluZ05vZGVzLFxuICAgICAgICBoaWRlU2libGluZ05vZGVzID0gX3JlZiRoaWRlU2libGluZ05vZGVzID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRoaWRlU2libGluZ05vZGVzLFxuICAgICAgICBfcmVmJGhhbmRsZUNvbnRhaW5lck8gPSBfcmVmLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93LFxuICAgICAgICBoYW5kbGVDb250YWluZXJPdmVyZmxvdyA9IF9yZWYkaGFuZGxlQ29udGFpbmVyTyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkaGFuZGxlQ29udGFpbmVyTztcblxuICAgIHRoaXMuaGlkZVNpYmxpbmdOb2RlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93ID0gdm9pZCAwO1xuICAgIHRoaXMubW9kYWxzID0gdm9pZCAwO1xuICAgIHRoaXMuY29udGFpbmVycyA9IHZvaWQgMDtcbiAgICB0aGlzLmRhdGEgPSB2b2lkIDA7XG4gICAgdGhpcy5zY3JvbGxiYXJTaXplID0gdm9pZCAwO1xuICAgIHRoaXMuaGlkZVNpYmxpbmdOb2RlcyA9IGhpZGVTaWJsaW5nTm9kZXM7XG4gICAgdGhpcy5oYW5kbGVDb250YWluZXJPdmVyZmxvdyA9IGhhbmRsZUNvbnRhaW5lck92ZXJmbG93O1xuICAgIHRoaXMubW9kYWxzID0gW107XG4gICAgdGhpcy5jb250YWluZXJzID0gW107XG4gICAgdGhpcy5kYXRhID0gW107XG4gICAgdGhpcy5zY3JvbGxiYXJTaXplID0gZ2V0U2Nyb2xsYmFyU2l6ZSgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1vZGFsTWFuYWdlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmlzQ29udGFpbmVyT3ZlcmZsb3dpbmcgPSBmdW5jdGlvbiBpc0NvbnRhaW5lck92ZXJmbG93aW5nKG1vZGFsKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLmRhdGFbdGhpcy5jb250YWluZXJJbmRleEZyb21Nb2RhbChtb2RhbCldO1xuICAgIHJldHVybiBkYXRhICYmIGRhdGEub3ZlcmZsb3dpbmc7XG4gIH07XG5cbiAgX3Byb3RvLmNvbnRhaW5lckluZGV4RnJvbU1vZGFsID0gZnVuY3Rpb24gY29udGFpbmVySW5kZXhGcm9tTW9kYWwobW9kYWwpIHtcbiAgICByZXR1cm4gZmluZEluZGV4T2YodGhpcy5kYXRhLCBmdW5jdGlvbiAoZCkge1xuICAgICAgcmV0dXJuIGQubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uc2V0Q29udGFpbmVyU3R5bGUgPSBmdW5jdGlvbiBzZXRDb250YWluZXJTdHlsZShjb250YWluZXJTdGF0ZSwgY29udGFpbmVyKSB7XG4gICAgdmFyIHN0eWxlID0ge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgfTsgLy8gd2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiB0aGUgYWN0dWFsIGBzdHlsZWAgaGVyZVxuICAgIC8vIGJlY2F1c2Ugd2Ugd2lsbCBvdmVycmlkZSBpdFxuXG4gICAgY29udGFpbmVyU3RhdGUuc3R5bGUgPSB7XG4gICAgICBvdmVyZmxvdzogY29udGFpbmVyLnN0eWxlLm92ZXJmbG93LFxuICAgICAgcGFkZGluZ1JpZ2h0OiBjb250YWluZXIuc3R5bGUucGFkZGluZ1JpZ2h0XG4gICAgfTtcblxuICAgIGlmIChjb250YWluZXJTdGF0ZS5vdmVyZmxvd2luZykge1xuICAgICAgLy8gdXNlIGNvbXB1dGVkIHN0eWxlLCBoZXJlIHRvIGdldCB0aGUgcmVhbCBwYWRkaW5nXG4gICAgICAvLyB0byBhZGQgb3VyIHNjcm9sbGJhciB3aWR0aFxuICAgICAgc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFyc2VJbnQoY3NzKGNvbnRhaW5lciwgJ3BhZGRpbmdSaWdodCcpIHx8ICcwJywgMTApICsgdGhpcy5zY3JvbGxiYXJTaXplICsgXCJweFwiO1xuICAgIH1cblxuICAgIGNzcyhjb250YWluZXIsIHN0eWxlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlQ29udGFpbmVyU3R5bGUgPSBmdW5jdGlvbiByZW1vdmVDb250YWluZXJTdHlsZShjb250YWluZXJTdGF0ZSwgY29udGFpbmVyKSB7XG4gICAgT2JqZWN0LmFzc2lnbihjb250YWluZXIuc3R5bGUsIGNvbnRhaW5lclN0YXRlLnN0eWxlKTtcbiAgfTtcblxuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKG1vZGFsLCBjb250YWluZXIsIGNsYXNzTmFtZSkge1xuICAgIHZhciBtb2RhbElkeCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuICAgIHZhciBjb250YWluZXJJZHggPSB0aGlzLmNvbnRhaW5lcnMuaW5kZXhPZihjb250YWluZXIpO1xuXG4gICAgaWYgKG1vZGFsSWR4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIG1vZGFsSWR4O1xuICAgIH1cblxuICAgIG1vZGFsSWR4ID0gdGhpcy5tb2RhbHMubGVuZ3RoO1xuICAgIHRoaXMubW9kYWxzLnB1c2gobW9kYWwpO1xuXG4gICAgaWYgKHRoaXMuaGlkZVNpYmxpbmdOb2Rlcykge1xuICAgICAgaGlkZVNpYmxpbmdzKGNvbnRhaW5lciwgbW9kYWwpO1xuICAgIH1cblxuICAgIGlmIChjb250YWluZXJJZHggIT09IC0xKSB7XG4gICAgICB0aGlzLmRhdGFbY29udGFpbmVySWR4XS5tb2RhbHMucHVzaChtb2RhbCk7XG4gICAgICByZXR1cm4gbW9kYWxJZHg7XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB7XG4gICAgICBtb2RhbHM6IFttb2RhbF0sXG4gICAgICAvLyByaWdodCBub3cgb25seSB0aGUgZmlyc3QgbW9kYWwgb2YgYSBjb250YWluZXIgd2lsbCBoYXZlIGl0cyBjbGFzc2VzIGFwcGxpZWRcbiAgICAgIGNsYXNzZXM6IGNsYXNzTmFtZSA/IGNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pIDogW10sXG4gICAgICBvdmVyZmxvd2luZzogaXNPdmVyZmxvd2luZyhjb250YWluZXIpXG4gICAgfTtcblxuICAgIGlmICh0aGlzLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93KSB7XG4gICAgICB0aGlzLnNldENvbnRhaW5lclN0eWxlKGRhdGEsIGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgZGF0YS5jbGFzc2VzLmZvckVhY2goYWRkQ2xhc3MuYmluZChudWxsLCBjb250YWluZXIpKTtcbiAgICB0aGlzLmNvbnRhaW5lcnMucHVzaChjb250YWluZXIpO1xuICAgIHRoaXMuZGF0YS5wdXNoKGRhdGEpO1xuICAgIHJldHVybiBtb2RhbElkeDtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKG1vZGFsKSB7XG4gICAgdmFyIG1vZGFsSWR4ID0gdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG5cbiAgICBpZiAobW9kYWxJZHggPT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNvbnRhaW5lcklkeCA9IHRoaXMuY29udGFpbmVySW5kZXhGcm9tTW9kYWwobW9kYWwpO1xuICAgIHZhciBkYXRhID0gdGhpcy5kYXRhW2NvbnRhaW5lcklkeF07XG4gICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyc1tjb250YWluZXJJZHhdO1xuICAgIGRhdGEubW9kYWxzLnNwbGljZShkYXRhLm1vZGFscy5pbmRleE9mKG1vZGFsKSwgMSk7XG4gICAgdGhpcy5tb2RhbHMuc3BsaWNlKG1vZGFsSWR4LCAxKTsgLy8gaWYgdGhhdCB3YXMgdGhlIGxhc3QgbW9kYWwgaW4gYSBjb250YWluZXIsXG4gICAgLy8gY2xlYW4gdXAgdGhlIGNvbnRhaW5lclxuXG4gICAgaWYgKGRhdGEubW9kYWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGF0YS5jbGFzc2VzLmZvckVhY2gocmVtb3ZlQ2xhc3MuYmluZChudWxsLCBjb250YWluZXIpKTtcblxuICAgICAgaWYgKHRoaXMuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVDb250YWluZXJTdHlsZShkYXRhLCBjb250YWluZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5oaWRlU2libGluZ05vZGVzKSB7XG4gICAgICAgIHNob3dTaWJsaW5ncyhjb250YWluZXIsIG1vZGFsKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb250YWluZXJzLnNwbGljZShjb250YWluZXJJZHgsIDEpO1xuICAgICAgdGhpcy5kYXRhLnNwbGljZShjb250YWluZXJJZHgsIDEpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5oaWRlU2libGluZ05vZGVzKSB7XG4gICAgICAvLyBvdGhlcndpc2UgbWFrZSBzdXJlIHRoZSBuZXh0IHRvcCBtb2RhbCBpcyB2aXNpYmxlIHRvIGEgU1JcbiAgICAgIHZhciBfZGF0YSRtb2RhbHMgPSBkYXRhLm1vZGFsc1tkYXRhLm1vZGFscy5sZW5ndGggLSAxXSxcbiAgICAgICAgICBiYWNrZHJvcCA9IF9kYXRhJG1vZGFscy5iYWNrZHJvcCxcbiAgICAgICAgICBkaWFsb2cgPSBfZGF0YSRtb2RhbHMuZGlhbG9nO1xuICAgICAgYXJpYUhpZGRlbihmYWxzZSwgZGlhbG9nKTtcbiAgICAgIGFyaWFIaWRkZW4oZmFsc2UsIGJhY2tkcm9wKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmlzVG9wTW9kYWwgPSBmdW5jdGlvbiBpc1RvcE1vZGFsKG1vZGFsKSB7XG4gICAgcmV0dXJuICEhdGhpcy5tb2RhbHMubGVuZ3RoICYmIHRoaXMubW9kYWxzW3RoaXMubW9kYWxzLmxlbmd0aCAtIDFdID09PSBtb2RhbDtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxNYW5hZ2VyO1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBNb2RhbE1hbmFnZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lLCByZWFjdC9wcm9wLXR5cGVzICovXG5pbXBvcnQgYWN0aXZlRWxlbWVudCBmcm9tICdkb20taGVscGVycy9hY3RpdmVFbGVtZW50JztcbmltcG9ydCBjb250YWlucyBmcm9tICdkb20taGVscGVycy9jb250YWlucyc7XG5pbXBvcnQgY2FuVXNlRE9NIGZyb20gJ2RvbS1oZWxwZXJzL2NhblVzZURPTSc7XG5pbXBvcnQgbGlzdGVuIGZyb20gJ2RvbS1oZWxwZXJzL2xpc3Rlbic7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYsIHVzZUNhbGxiYWNrLCB1c2VJbXBlcmF0aXZlSGFuZGxlLCBmb3J3YXJkUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB1c2VNb3VudGVkIGZyb20gJ0ByZXN0YXJ0L2hvb2tzL3VzZU1vdW50ZWQnO1xuaW1wb3J0IHVzZVdpbGxVbm1vdW50IGZyb20gJ0ByZXN0YXJ0L2hvb2tzL3VzZVdpbGxVbm1vdW50JztcbmltcG9ydCB1c2VQcmV2aW91cyBmcm9tICdAcmVzdGFydC9ob29rcy91c2VQcmV2aW91cyc7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICdAcmVzdGFydC9ob29rcy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCBNb2RhbE1hbmFnZXIgZnJvbSAnLi9Nb2RhbE1hbmFnZXInO1xuaW1wb3J0IHVzZVdhaXRGb3JET01SZWYgZnJvbSAnLi91c2VXYWl0Rm9yRE9NUmVmJztcbnZhciBtYW5hZ2VyO1xuXG5mdW5jdGlvbiBnZXRNYW5hZ2VyKCkge1xuICBpZiAoIW1hbmFnZXIpIG1hbmFnZXIgPSBuZXcgTW9kYWxNYW5hZ2VyKCk7XG4gIHJldHVybiBtYW5hZ2VyO1xufVxuXG5mdW5jdGlvbiB1c2VNb2RhbE1hbmFnZXIocHJvdmlkZWQpIHtcbiAgdmFyIG1vZGFsTWFuYWdlciA9IHByb3ZpZGVkIHx8IGdldE1hbmFnZXIoKTtcbiAgdmFyIG1vZGFsID0gdXNlUmVmKHtcbiAgICBkaWFsb2c6IG51bGwsXG4gICAgYmFja2Ryb3A6IG51bGxcbiAgfSk7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKG1vZGFsLmN1cnJlbnQsIHtcbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZChjb250YWluZXIsIGNsYXNzTmFtZSkge1xuICAgICAgcmV0dXJuIG1vZGFsTWFuYWdlci5hZGQobW9kYWwuY3VycmVudCwgY29udGFpbmVyLCBjbGFzc05hbWUpO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZXR1cm4gbW9kYWxNYW5hZ2VyLnJlbW92ZShtb2RhbC5jdXJyZW50KTtcbiAgICB9LFxuICAgIGlzVG9wTW9kYWw6IGZ1bmN0aW9uIGlzVG9wTW9kYWwoKSB7XG4gICAgICByZXR1cm4gbW9kYWxNYW5hZ2VyLmlzVG9wTW9kYWwobW9kYWwuY3VycmVudCk7XG4gICAgfSxcbiAgICBzZXREaWFsb2dSZWY6IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIG1vZGFsLmN1cnJlbnQuZGlhbG9nID0gcmVmO1xuICAgIH0sIFtdKSxcbiAgICBzZXRCYWNrZHJvcFJlZjogdXNlQ2FsbGJhY2soZnVuY3Rpb24gKHJlZikge1xuICAgICAgbW9kYWwuY3VycmVudC5iYWNrZHJvcCA9IHJlZjtcbiAgICB9LCBbXSlcbiAgfSk7XG59XG5cbnZhciBNb2RhbCA9IC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIF9yZWYkc2hvdyA9IF9yZWYuc2hvdyxcbiAgICAgIHNob3cgPSBfcmVmJHNob3cgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRzaG93LFxuICAgICAgX3JlZiRyb2xlID0gX3JlZi5yb2xlLFxuICAgICAgcm9sZSA9IF9yZWYkcm9sZSA9PT0gdm9pZCAwID8gJ2RpYWxvZycgOiBfcmVmJHJvbGUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIF9yZWYkYmFja2Ryb3AgPSBfcmVmLmJhY2tkcm9wLFxuICAgICAgYmFja2Ryb3AgPSBfcmVmJGJhY2tkcm9wID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRiYWNrZHJvcCxcbiAgICAgIF9yZWYka2V5Ym9hcmQgPSBfcmVmLmtleWJvYXJkLFxuICAgICAga2V5Ym9hcmQgPSBfcmVmJGtleWJvYXJkID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRrZXlib2FyZCxcbiAgICAgIG9uQmFja2Ryb3BDbGljayA9IF9yZWYub25CYWNrZHJvcENsaWNrLFxuICAgICAgb25Fc2NhcGVLZXlEb3duID0gX3JlZi5vbkVzY2FwZUtleURvd24sXG4gICAgICB0cmFuc2l0aW9uID0gX3JlZi50cmFuc2l0aW9uLFxuICAgICAgYmFja2Ryb3BUcmFuc2l0aW9uID0gX3JlZi5iYWNrZHJvcFRyYW5zaXRpb24sXG4gICAgICBfcmVmJGF1dG9Gb2N1cyA9IF9yZWYuYXV0b0ZvY3VzLFxuICAgICAgYXV0b0ZvY3VzID0gX3JlZiRhdXRvRm9jdXMgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJGF1dG9Gb2N1cyxcbiAgICAgIF9yZWYkZW5mb3JjZUZvY3VzID0gX3JlZi5lbmZvcmNlRm9jdXMsXG4gICAgICBlbmZvcmNlRm9jdXMgPSBfcmVmJGVuZm9yY2VGb2N1cyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkZW5mb3JjZUZvY3VzLFxuICAgICAgX3JlZiRyZXN0b3JlRm9jdXMgPSBfcmVmLnJlc3RvcmVGb2N1cyxcbiAgICAgIHJlc3RvcmVGb2N1cyA9IF9yZWYkcmVzdG9yZUZvY3VzID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRyZXN0b3JlRm9jdXMsXG4gICAgICByZXN0b3JlRm9jdXNPcHRpb25zID0gX3JlZi5yZXN0b3JlRm9jdXNPcHRpb25zLFxuICAgICAgcmVuZGVyRGlhbG9nID0gX3JlZi5yZW5kZXJEaWFsb2csXG4gICAgICBfcmVmJHJlbmRlckJhY2tkcm9wID0gX3JlZi5yZW5kZXJCYWNrZHJvcCxcbiAgICAgIHJlbmRlckJhY2tkcm9wID0gX3JlZiRyZW5kZXJCYWNrZHJvcCA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHByb3BzKTtcbiAgfSA6IF9yZWYkcmVuZGVyQmFja2Ryb3AsXG4gICAgICBwcm92aWRlZE1hbmFnZXIgPSBfcmVmLm1hbmFnZXIsXG4gICAgICBjb250YWluZXJSZWYgPSBfcmVmLmNvbnRhaW5lcixcbiAgICAgIGNvbnRhaW5lckNsYXNzTmFtZSA9IF9yZWYuY29udGFpbmVyQ2xhc3NOYW1lLFxuICAgICAgb25TaG93ID0gX3JlZi5vblNob3csXG4gICAgICBfcmVmJG9uSGlkZSA9IF9yZWYub25IaWRlLFxuICAgICAgb25IaWRlID0gX3JlZiRvbkhpZGUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uICgpIHt9IDogX3JlZiRvbkhpZGUsXG4gICAgICBvbkV4aXQgPSBfcmVmLm9uRXhpdCxcbiAgICAgIG9uRXhpdGVkID0gX3JlZi5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IF9yZWYub25FeGl0aW5nLFxuICAgICAgb25FbnRlciA9IF9yZWYub25FbnRlcixcbiAgICAgIG9uRW50ZXJpbmcgPSBfcmVmLm9uRW50ZXJpbmcsXG4gICAgICBvbkVudGVyZWQgPSBfcmVmLm9uRW50ZXJlZCxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJzaG93XCIsIFwicm9sZVwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiY2hpbGRyZW5cIiwgXCJiYWNrZHJvcFwiLCBcImtleWJvYXJkXCIsIFwib25CYWNrZHJvcENsaWNrXCIsIFwib25Fc2NhcGVLZXlEb3duXCIsIFwidHJhbnNpdGlvblwiLCBcImJhY2tkcm9wVHJhbnNpdGlvblwiLCBcImF1dG9Gb2N1c1wiLCBcImVuZm9yY2VGb2N1c1wiLCBcInJlc3RvcmVGb2N1c1wiLCBcInJlc3RvcmVGb2N1c09wdGlvbnNcIiwgXCJyZW5kZXJEaWFsb2dcIiwgXCJyZW5kZXJCYWNrZHJvcFwiLCBcIm1hbmFnZXJcIiwgXCJjb250YWluZXJcIiwgXCJjb250YWluZXJDbGFzc05hbWVcIiwgXCJvblNob3dcIiwgXCJvbkhpZGVcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCJdKTtcblxuICB2YXIgY29udGFpbmVyID0gdXNlV2FpdEZvckRPTVJlZihjb250YWluZXJSZWYpO1xuICB2YXIgbW9kYWwgPSB1c2VNb2RhbE1hbmFnZXIocHJvdmlkZWRNYW5hZ2VyKTtcbiAgdmFyIGlzTW91bnRlZCA9IHVzZU1vdW50ZWQoKTtcbiAgdmFyIHByZXZTaG93ID0gdXNlUHJldmlvdXMoc2hvdyk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKCFzaG93KSxcbiAgICAgIGV4aXRlZCA9IF91c2VTdGF0ZVswXSxcbiAgICAgIHNldEV4aXRlZCA9IF91c2VTdGF0ZVsxXTtcblxuICB2YXIgbGFzdEZvY3VzUmVmID0gdXNlUmVmKG51bGwpO1xuICB1c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtb2RhbDtcbiAgfSwgW21vZGFsXSk7XG5cbiAgaWYgKGNhblVzZURPTSAmJiAhcHJldlNob3cgJiYgc2hvdykge1xuICAgIGxhc3RGb2N1c1JlZi5jdXJyZW50ID0gYWN0aXZlRWxlbWVudCgpO1xuICB9XG5cbiAgaWYgKCF0cmFuc2l0aW9uICYmICFzaG93ICYmICFleGl0ZWQpIHtcbiAgICBzZXRFeGl0ZWQodHJ1ZSk7XG4gIH0gZWxzZSBpZiAoc2hvdyAmJiBleGl0ZWQpIHtcbiAgICBzZXRFeGl0ZWQoZmFsc2UpO1xuICB9XG5cbiAgdmFyIGhhbmRsZVNob3cgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBtb2RhbC5hZGQoY29udGFpbmVyLCBjb250YWluZXJDbGFzc05hbWUpO1xuICAgIHJlbW92ZUtleWRvd25MaXN0ZW5lclJlZi5jdXJyZW50ID0gbGlzdGVuKGRvY3VtZW50LCAna2V5ZG93bicsIGhhbmRsZURvY3VtZW50S2V5RG93bik7XG4gICAgcmVtb3ZlRm9jdXNMaXN0ZW5lclJlZi5jdXJyZW50ID0gbGlzdGVuKGRvY3VtZW50LCAnZm9jdXMnLCAvLyB0aGUgdGltZW91dCBpcyBuZWNlc3NhcnkgYi9jIHRoaXMgd2lsbCBydW4gYmVmb3JlIHRoZSBuZXcgbW9kYWwgaXMgbW91bnRlZFxuICAgIC8vIGFuZCBzbyBzdGVhbHMgZm9jdXMgZnJvbSBpdFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGhhbmRsZUVuZm9yY2VGb2N1cyk7XG4gICAgfSwgdHJ1ZSk7XG5cbiAgICBpZiAob25TaG93KSB7XG4gICAgICBvblNob3coKTtcbiAgICB9IC8vIGF1dG9mb2N1cyBhZnRlciBvblNob3cgdG8gbm90IHRyaWdnZXIgYSBmb2N1cyBldmVudCBmb3IgcHJldmlvdXNcbiAgICAvLyBtb2RhbHMgYmVmb3JlIHRoaXMgb25lIGlzIHNob3duLlxuXG5cbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICB2YXIgY3VycmVudEFjdGl2ZUVsZW1lbnQgPSBhY3RpdmVFbGVtZW50KGRvY3VtZW50KTtcblxuICAgICAgaWYgKG1vZGFsLmRpYWxvZyAmJiBjdXJyZW50QWN0aXZlRWxlbWVudCAmJiAhY29udGFpbnMobW9kYWwuZGlhbG9nLCBjdXJyZW50QWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgbGFzdEZvY3VzUmVmLmN1cnJlbnQgPSBjdXJyZW50QWN0aXZlRWxlbWVudDtcbiAgICAgICAgbW9kYWwuZGlhbG9nLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUhpZGUgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBtb2RhbC5yZW1vdmUoKTtcbiAgICByZW1vdmVLZXlkb3duTGlzdGVuZXJSZWYuY3VycmVudCA9PSBudWxsID8gdm9pZCAwIDogcmVtb3ZlS2V5ZG93bkxpc3RlbmVyUmVmLmN1cnJlbnQoKTtcbiAgICByZW1vdmVGb2N1c0xpc3RlbmVyUmVmLmN1cnJlbnQgPT0gbnVsbCA/IHZvaWQgMCA6IHJlbW92ZUZvY3VzTGlzdGVuZXJSZWYuY3VycmVudCgpO1xuXG4gICAgaWYgKHJlc3RvcmVGb2N1cykge1xuICAgICAgdmFyIF9sYXN0Rm9jdXNSZWYkY3VycmVudDtcblxuICAgICAgLy8gU3VwcG9ydDogPD1JRTExIGRvZXNuJ3Qgc3VwcG9ydCBgZm9jdXMoKWAgb24gc3ZnIGVsZW1lbnRzIChSQjogIzkxNylcbiAgICAgIChfbGFzdEZvY3VzUmVmJGN1cnJlbnQgPSBsYXN0Rm9jdXNSZWYuY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sYXN0Rm9jdXNSZWYkY3VycmVudC5mb2N1cyA9PSBudWxsID8gdm9pZCAwIDogX2xhc3RGb2N1c1JlZiRjdXJyZW50LmZvY3VzKHJlc3RvcmVGb2N1c09wdGlvbnMpO1xuICAgICAgbGFzdEZvY3VzUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfSk7IC8vIFRPRE86IHRyeSBhbmQgY29tYmluZSB0aGVzZSBlZmZlY3RzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtYm9vdHN0cmFwL3JlYWN0LW92ZXJsYXlzL3B1bGwvNzk0I2Rpc2N1c3Npb25fcjQwOTk1NDEyMFxuICAvLyBTaG93IGxvZ2ljIHdoZW46XG4gIC8vICAtIHNob3cgaXMgYHRydWVgIF9hbmRfIGBjb250YWluZXJgIGhhcyByZXNvbHZlZFxuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzaG93IHx8ICFjb250YWluZXIpIHJldHVybjtcbiAgICBoYW5kbGVTaG93KCk7XG4gIH0sIFtzaG93LCBjb250YWluZXIsXG4gIC8qIHNob3VsZCBuZXZlciBjaGFuZ2U6ICovXG4gIGhhbmRsZVNob3ddKTsgLy8gSGlkZSBjbGVhbnVwIGxvZ2ljIHdoZW46XG4gIC8vICAtIGBleGl0ZWRgIHN3aXRjaGVzIHRvIHRydWVcbiAgLy8gIC0gY29tcG9uZW50IHVubW91bnRzO1xuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFleGl0ZWQpIHJldHVybjtcbiAgICBoYW5kbGVIaWRlKCk7XG4gIH0sIFtleGl0ZWQsIGhhbmRsZUhpZGVdKTtcbiAgdXNlV2lsbFVubW91bnQoZnVuY3Rpb24gKCkge1xuICAgIGhhbmRsZUhpZGUoKTtcbiAgfSk7IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgdmFyIGhhbmRsZUVuZm9yY2VGb2N1cyA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmICghZW5mb3JjZUZvY3VzIHx8ICFpc01vdW50ZWQoKSB8fCAhbW9kYWwuaXNUb3BNb2RhbCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRBY3RpdmVFbGVtZW50ID0gYWN0aXZlRWxlbWVudCgpO1xuXG4gICAgaWYgKG1vZGFsLmRpYWxvZyAmJiBjdXJyZW50QWN0aXZlRWxlbWVudCAmJiAhY29udGFpbnMobW9kYWwuZGlhbG9nLCBjdXJyZW50QWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIG1vZGFsLmRpYWxvZy5mb2N1cygpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVCYWNrZHJvcENsaWNrID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb25CYWNrZHJvcENsaWNrID09IG51bGwgPyB2b2lkIDAgOiBvbkJhY2tkcm9wQ2xpY2soZSk7XG5cbiAgICBpZiAoYmFja2Ryb3AgPT09IHRydWUpIHtcbiAgICAgIG9uSGlkZSgpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVEb2N1bWVudEtleURvd24gPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGtleWJvYXJkICYmIGUua2V5Q29kZSA9PT0gMjcgJiYgbW9kYWwuaXNUb3BNb2RhbCgpKSB7XG4gICAgICBvbkVzY2FwZUtleURvd24gPT0gbnVsbCA/IHZvaWQgMCA6IG9uRXNjYXBlS2V5RG93bihlKTtcblxuICAgICAgaWYgKCFlLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgb25IaWRlKCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdmFyIHJlbW92ZUZvY3VzTGlzdGVuZXJSZWYgPSB1c2VSZWYoKTtcbiAgdmFyIHJlbW92ZUtleWRvd25MaXN0ZW5lclJlZiA9IHVzZVJlZigpO1xuXG4gIHZhciBoYW5kbGVIaWRkZW4gPSBmdW5jdGlvbiBoYW5kbGVIaWRkZW4oKSB7XG4gICAgc2V0RXhpdGVkKHRydWUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIG9uRXhpdGVkID09IG51bGwgPyB2b2lkIDAgOiBvbkV4aXRlZC5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICB9O1xuXG4gIHZhciBUcmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcblxuICBpZiAoIWNvbnRhaW5lciB8fCAhKHNob3cgfHwgVHJhbnNpdGlvbiAmJiAhZXhpdGVkKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGRpYWxvZ1Byb3BzID0gX2V4dGVuZHMoe1xuICAgIHJvbGU6IHJvbGUsXG4gICAgcmVmOiBtb2RhbC5zZXREaWFsb2dSZWYsXG4gICAgLy8gYXBwYXJlbnRseSBvbmx5IHdvcmtzIG9uIHRoZSBkaWFsb2cgcm9sZSBlbGVtZW50XG4gICAgJ2FyaWEtbW9kYWwnOiByb2xlID09PSAnZGlhbG9nJyA/IHRydWUgOiB1bmRlZmluZWRcbiAgfSwgcmVzdCwge1xuICAgIHN0eWxlOiBzdHlsZSxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICB0YWJJbmRleDogLTFcbiAgfSk7XG5cbiAgdmFyIGRpYWxvZyA9IHJlbmRlckRpYWxvZyA/IHJlbmRlckRpYWxvZyhkaWFsb2dQcm9wcykgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBkaWFsb2dQcm9wcywgLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuICAgIHJvbGU6ICdkb2N1bWVudCdcbiAgfSkpO1xuXG4gIGlmIChUcmFuc2l0aW9uKSB7XG4gICAgZGlhbG9nID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwge1xuICAgICAgYXBwZWFyOiB0cnVlLFxuICAgICAgdW5tb3VudE9uRXhpdDogdHJ1ZSxcbiAgICAgIFwiaW5cIjogISFzaG93LFxuICAgICAgb25FeGl0OiBvbkV4aXQsXG4gICAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICAgIG9uRXhpdGVkOiBoYW5kbGVIaWRkZW4sXG4gICAgICBvbkVudGVyOiBvbkVudGVyLFxuICAgICAgb25FbnRlcmluZzogb25FbnRlcmluZyxcbiAgICAgIG9uRW50ZXJlZDogb25FbnRlcmVkXG4gICAgfSwgZGlhbG9nKTtcbiAgfVxuXG4gIHZhciBiYWNrZHJvcEVsZW1lbnQgPSBudWxsO1xuXG4gIGlmIChiYWNrZHJvcCkge1xuICAgIHZhciBCYWNrZHJvcFRyYW5zaXRpb24gPSBiYWNrZHJvcFRyYW5zaXRpb247XG4gICAgYmFja2Ryb3BFbGVtZW50ID0gcmVuZGVyQmFja2Ryb3Aoe1xuICAgICAgcmVmOiBtb2RhbC5zZXRCYWNrZHJvcFJlZixcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUJhY2tkcm9wQ2xpY2tcbiAgICB9KTtcblxuICAgIGlmIChCYWNrZHJvcFRyYW5zaXRpb24pIHtcbiAgICAgIGJhY2tkcm9wRWxlbWVudCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEJhY2tkcm9wVHJhbnNpdGlvbiwge1xuICAgICAgICBhcHBlYXI6IHRydWUsXG4gICAgICAgIFwiaW5cIjogISFzaG93XG4gICAgICB9LCBiYWNrZHJvcEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0RE9NLmNyZWF0ZVBvcnRhbCggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGJhY2tkcm9wRWxlbWVudCwgZGlhbG9nKSwgY29udGFpbmVyKSk7XG59KTtcbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBTZXQgdGhlIHZpc2liaWxpdHkgb2YgdGhlIE1vZGFsXG4gICAqL1xuICBzaG93OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBET00gZWxlbWVudCwgYSBgcmVmYCB0byBhbiBlbGVtZW50LCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLiBUaGUgTW9kYWwgaXMgYXBwZW5kZWQgdG8gaXQncyBgY29udGFpbmVyYCBlbGVtZW50LlxuICAgKlxuICAgKiBGb3IgdGhlIHNha2Ugb2YgYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgdGhlIGNvbnRhaW5lciBzaG91bGQgdXN1YWxseSBiZSB0aGUgZG9jdW1lbnQgYm9keSwgc28gdGhhdCB0aGUgcmVzdCBvZiB0aGVcbiAgICogcGFnZSBjb250ZW50IGNhbiBiZSBwbGFjZWQgYmVoaW5kIGEgdmlydHVhbCBiYWNrZHJvcCBhcyB3ZWxsIGFzIGEgdmlzdWFsIG9uZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBNb2RhbCBpcyBvcGVuaW5nLlxuICAgKi9cbiAgb25TaG93OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBmaXJlZCB3aGVuIGVpdGhlciB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZCwgb3IgdGhlIGVzY2FwZSBrZXkgaXMgcHJlc3NlZC5cbiAgICpcbiAgICogVGhlIGBvbkhpZGVgIGNhbGxiYWNrIG9ubHkgc2lnbmFscyBpbnRlbnQgZnJvbSB0aGUgTW9kYWwsXG4gICAqIHlvdSBtdXN0IGFjdHVhbGx5IHNldCB0aGUgYHNob3dgIHByb3AgdG8gYGZhbHNlYCBmb3IgdGhlIE1vZGFsIHRvIGNsb3NlLlxuICAgKi9cbiAgb25IaWRlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSW5jbHVkZSBhIGJhY2tkcm9wIGNvbXBvbmVudC5cbiAgICovXG4gIGJhY2tkcm9wOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm9uZU9mKFsnc3RhdGljJ10pXSksXG5cbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBkaWFsb2cgY29tcG9uZW50LiBVc2VmdWwgZm9yIGN1c3RvbVxuICAgKiByZW5kZXJpbmcuICoqTm90ZToqKiB0aGUgY29tcG9uZW50IHNob3VsZCBtYWtlIHN1cmUgdG8gYXBwbHkgdGhlIHByb3ZpZGVkIHJlZi5cbiAgICpcbiAgICogYGBganMgc3RhdGljXG4gICAqIHJlbmRlckRpYWxvZz17cHJvcHMgPT4gPE15RGlhbG9nIHsuLi5wcm9wc30gLz59XG4gICAqIGBgYFxuICAgKi9cbiAgcmVuZGVyRGlhbG9nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBiYWNrZHJvcCBjb21wb25lbnQuIFVzZWZ1bCBmb3IgY3VzdG9tXG4gICAqIGJhY2tkcm9wIHJlbmRlcmluZy5cbiAgICpcbiAgICogYGBganNcbiAgICogIHJlbmRlckJhY2tkcm9wPXtwcm9wcyA9PiA8TXlCYWNrZHJvcCB7Li4ucHJvcHN9IC8+fVxuICAgKiBgYGBcbiAgICovXG4gIHJlbmRlckJhY2tkcm9wOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQSBjYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBlc2NhcGUga2V5LCBpZiBzcGVjaWZpZWQgaW4gYGtleWJvYXJkYCwgaXMgcHJlc3NlZC5cbiAgICpcbiAgICogSWYgcHJldmVudERlZmF1bHQoKSBpcyBjYWxsZWQgb24gdGhlIGtleWJvYXJkIGV2ZW50LCBjbG9zaW5nIHRoZSBtb2RhbCB3aWxsIGJlIGNhbmNlbGxlZC5cbiAgICovXG4gIG9uRXNjYXBlS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AsIGlmIHNwZWNpZmllZCwgaXMgY2xpY2tlZC5cbiAgICovXG4gIG9uQmFja2Ryb3BDbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgY3NzIGNsYXNzIG9yIHNldCBvZiBjbGFzc2VzIGFwcGxpZWQgdG8gdGhlIG1vZGFsIGNvbnRhaW5lciB3aGVuIHRoZSBtb2RhbCBpcyBvcGVuLFxuICAgKiBhbmQgcmVtb3ZlZCB3aGVuIGl0IGlzIGNsb3NlZC5cbiAgICovXG4gIGNvbnRhaW5lckNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2xvc2UgdGhlIG1vZGFsIHdoZW4gZXNjYXBlIGtleSBpcyBwcmVzc2VkXG4gICAqL1xuICBrZXlib2FyZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgYHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBAMi4wLjBgIGA8VHJhbnNpdGlvbi8+YCBjb21wb25lbnQgdXNlZFxuICAgKiB0byBjb250cm9sIGFuaW1hdGlvbnMgZm9yIHRoZSBkaWFsb2cgY29tcG9uZW50LlxuICAgKi9cbiAgdHJhbnNpdGlvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBBIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwQDIuMC4wYCBgPFRyYW5zaXRpb24vPmAgY29tcG9uZW50IHVzZWRcbiAgICogdG8gY29udHJvbCBhbmltYXRpb25zIGZvciB0aGUgYmFja2Ryb3AgY29tcG9uZW50cy5cbiAgICovXG4gIGJhY2tkcm9wVHJhbnNpdGlvbjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCBUaGUgbW9kYWwgd2lsbCBhdXRvbWF0aWNhbGx5IHNoaWZ0IGZvY3VzIHRvIGl0c2VsZiB3aGVuIGl0IG9wZW5zLCBhbmRcbiAgICogcmVwbGFjZSBpdCB0byB0aGUgbGFzdCBmb2N1c2VkIGVsZW1lbnQgd2hlbiBpdCBjbG9zZXMuIFRoaXMgYWxzb1xuICAgKiB3b3JrcyBjb3JyZWN0bHkgd2l0aCBhbnkgTW9kYWwgY2hpbGRyZW4gdGhhdCBoYXZlIHRoZSBgYXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGBmYWxzZWAgYXMgaXQgbWFrZXMgdGhlIE1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogV2hlbiBgdHJ1ZWAgVGhlIG1vZGFsIHdpbGwgcHJldmVudCBmb2N1cyBmcm9tIGxlYXZpbmcgdGhlIE1vZGFsIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYGZhbHNlYCBhcyBpdCBtYWtlcyB0aGUgTW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBlbmZvcmNlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCBUaGUgbW9kYWwgd2lsbCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogbW9kYWwgaXMgaGlkZGVuXG4gICAqL1xuICByZXN0b3JlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPcHRpb25zIHBhc3NlZCB0byBmb2N1cyBmdW5jdGlvbiB3aGVuIGByZXN0b3JlRm9jdXNgIGlzIHNldCB0byBgdHJ1ZWBcbiAgICpcbiAgICogQGxpbmsgIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MRWxlbWVudC9mb2N1cyNQYXJhbWV0ZXJzXG4gICAqL1xuICByZXN0b3JlRm9jdXNPcHRpb25zOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHByZXZlbnRTY3JvbGw6IFByb3BUeXBlcy5ib29sXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE1vZGFsIHRyYW5zaXRpb25zIGluXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYXMgdGhlIE1vZGFsIGJlZ2lucyB0byB0cmFuc2l0aW9uIGluXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE1vZGFsIGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgaW5cbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHJpZ2h0IGJlZm9yZSB0aGUgTW9kYWwgdHJhbnNpdGlvbnMgb3V0XG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgTW9kYWwgYmVnaW5zIHRvIHRyYW5zaXRpb24gb3V0XG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgTW9kYWwgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBvdXRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQSBNb2RhbE1hbmFnZXIgaW5zdGFuY2UgdXNlZCB0byB0cmFjayBhbmQgbWFuYWdlIHRoZSBzdGF0ZSBvZiBvcGVuXG4gICAqIE1vZGFscy4gVXNlZnVsIHdoZW4gY3VzdG9taXppbmcgaG93IG1vZGFscyBpbnRlcmFjdCB3aXRoaW4gYSBjb250YWluZXJcbiAgICovXG4gIG1hbmFnZXI6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1vZGFsTWFuYWdlcilcbn07XG5Nb2RhbC5kaXNwbGF5TmFtZSA9ICdNb2RhbCc7XG5Nb2RhbC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG5leHBvcnQgZGVmYXVsdCBPYmplY3QuYXNzaWduKE1vZGFsLCB7XG4gIE1hbmFnZXI6IE1vZGFsTWFuYWdlclxufSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcblxudmFyIF9mYWRlU3R5bGVzO1xuXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB0cmFuc2l0aW9uRW5kIGZyb20gJ2RvbS1oZWxwZXJzL3RyYW5zaXRpb25FbmQnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb24sIHsgRU5URVJFRCwgRU5URVJJTkcgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24nO1xuaW1wb3J0IHRyaWdnZXJCcm93c2VyUmVmbG93IGZyb20gJy4vdHJpZ2dlckJyb3dzZXJSZWZsb3cnO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgaW46IGZhbHNlLFxuICB0aW1lb3V0OiAzMDAsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlXG59O1xudmFyIGZhZGVTdHlsZXMgPSAoX2ZhZGVTdHlsZXMgPSB7fSwgX2ZhZGVTdHlsZXNbRU5URVJJTkddID0gJ3Nob3cnLCBfZmFkZVN0eWxlc1tFTlRFUkVEXSA9ICdzaG93JywgX2ZhZGVTdHlsZXMpO1xudmFyIEZhZGUgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB0cmlnZ2VyQnJvd3NlclJlZmxvdyhub2RlKTtcbiAgICBpZiAocHJvcHMub25FbnRlcikgcHJvcHMub25FbnRlcihub2RlKTtcbiAgfSwgW3Byb3BzXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWYsXG4gICAgYWRkRW5kTGlzdGVuZXI6IHRyYW5zaXRpb25FbmRcbiAgfSwgcHJvcHMsIHtcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlclxuICB9KSwgZnVuY3Rpb24gKHN0YXR1cywgaW5uZXJQcm9wcykge1xuICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHt9LCBpbm5lclByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoJ2ZhZGUnLCBjbGFzc05hbWUsIGNoaWxkcmVuLnByb3BzLmNsYXNzTmFtZSwgZmFkZVN0eWxlc1tzdGF0dXNdKVxuICAgIH0pKTtcbiAgfSk7XG59KTtcbkZhZGUuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuRmFkZS5kaXNwbGF5TmFtZSA9ICdGYWRlJztcbmV4cG9ydCBkZWZhdWx0IEZhZGU7IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY3NzIGZyb20gJ2RvbS1oZWxwZXJzL2Nzcyc7XG5pbXBvcnQgcXNhIGZyb20gJ2RvbS1oZWxwZXJzL3F1ZXJ5U2VsZWN0b3JBbGwnO1xuaW1wb3J0IGdldFNjcm9sbGJhclNpemUgZnJvbSAnZG9tLWhlbHBlcnMvc2Nyb2xsYmFyU2l6ZSc7XG5pbXBvcnQgTW9kYWxNYW5hZ2VyIGZyb20gJ3JlYWN0LW92ZXJsYXlzL01vZGFsTWFuYWdlcic7XG52YXIgU2VsZWN0b3IgPSB7XG4gIEZJWEVEX0NPTlRFTlQ6ICcuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wJyxcbiAgU1RJQ0tZX0NPTlRFTlQ6ICcuc3RpY2t5LXRvcCcsXG4gIE5BVkJBUl9UT0dHTEVSOiAnLm5hdmJhci10b2dnbGVyJ1xufTtcblxudmFyIEJvb3RzdHJhcE1vZGFsTWFuYWdlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX01vZGFsTWFuYWdlcikge1xuICBfaW5oZXJpdHNMb29zZShCb290c3RyYXBNb2RhbE1hbmFnZXIsIF9Nb2RhbE1hbmFnZXIpO1xuXG4gIGZ1bmN0aW9uIEJvb3RzdHJhcE1vZGFsTWFuYWdlcigpIHtcbiAgICByZXR1cm4gX01vZGFsTWFuYWdlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQm9vdHN0cmFwTW9kYWxNYW5hZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRqdXN0QW5kU3RvcmUgPSBmdW5jdGlvbiBhZGp1c3RBbmRTdG9yZShwcm9wLCBlbGVtZW50LCBhZGp1c3QpIHtcbiAgICB2YXIgX2NzcztcblxuICAgIHZhciBhY3R1YWwgPSBlbGVtZW50LnN0eWxlW3Byb3BdOyAvLyBUT0RPOiBET01TdHJpbmdNYXAgYW5kIENTU1N0eWxlRGVjbGFyYXRpb24gYXJlbid0IHN0cmljdGx5IGNvbXBhdGlibGVcbiAgICAvLyBAdHMtaWdub3JlXG5cbiAgICBlbGVtZW50LmRhdGFzZXRbcHJvcF0gPSBhY3R1YWw7XG4gICAgY3NzKGVsZW1lbnQsIChfY3NzID0ge30sIF9jc3NbcHJvcF0gPSBwYXJzZUZsb2F0KGNzcyhlbGVtZW50LCBwcm9wKSkgKyBhZGp1c3QgKyBcInB4XCIsIF9jc3MpKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdG9yZSA9IGZ1bmN0aW9uIHJlc3RvcmUocHJvcCwgZWxlbWVudCkge1xuICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQuZGF0YXNldFtwcm9wXTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgX2NzczI7XG5cbiAgICAgIGRlbGV0ZSBlbGVtZW50LmRhdGFzZXRbcHJvcF07XG4gICAgICBjc3MoZWxlbWVudCwgKF9jc3MyID0ge30sIF9jc3MyW3Byb3BdID0gdmFsdWUsIF9jc3MyKSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zZXRDb250YWluZXJTdHlsZSA9IGZ1bmN0aW9uIHNldENvbnRhaW5lclN0eWxlKGNvbnRhaW5lclN0YXRlLCBjb250YWluZXIpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX01vZGFsTWFuYWdlci5wcm90b3R5cGUuc2V0Q29udGFpbmVyU3R5bGUuY2FsbCh0aGlzLCBjb250YWluZXJTdGF0ZSwgY29udGFpbmVyKTtcblxuICAgIGlmICghY29udGFpbmVyU3RhdGUub3ZlcmZsb3dpbmcpIHJldHVybjtcbiAgICB2YXIgc2l6ZSA9IGdldFNjcm9sbGJhclNpemUoKTtcbiAgICBxc2EoY29udGFpbmVyLCBTZWxlY3Rvci5GSVhFRF9DT05URU5UKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIF90aGlzLmFkanVzdEFuZFN0b3JlKCdwYWRkaW5nUmlnaHQnLCBlbCwgc2l6ZSk7XG4gICAgfSk7XG4gICAgcXNhKGNvbnRhaW5lciwgU2VsZWN0b3IuU1RJQ0tZX0NPTlRFTlQpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICByZXR1cm4gX3RoaXMuYWRqdXN0QW5kU3RvcmUoJ21hcmdpblJpZ2h0JywgZWwsIC1zaXplKTtcbiAgICB9KTtcbiAgICBxc2EoY29udGFpbmVyLCBTZWxlY3Rvci5OQVZCQVJfVE9HR0xFUikuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHJldHVybiBfdGhpcy5hZGp1c3RBbmRTdG9yZSgnbWFyZ2luUmlnaHQnLCBlbCwgc2l6ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZUNvbnRhaW5lclN0eWxlID0gZnVuY3Rpb24gcmVtb3ZlQ29udGFpbmVyU3R5bGUoY29udGFpbmVyU3RhdGUsIGNvbnRhaW5lcikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgX01vZGFsTWFuYWdlci5wcm90b3R5cGUucmVtb3ZlQ29udGFpbmVyU3R5bGUuY2FsbCh0aGlzLCBjb250YWluZXJTdGF0ZSwgY29udGFpbmVyKTtcblxuICAgIHFzYShjb250YWluZXIsIFNlbGVjdG9yLkZJWEVEX0NPTlRFTlQpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLnJlc3RvcmUoJ3BhZGRpbmdSaWdodCcsIGVsKTtcbiAgICB9KTtcbiAgICBxc2EoY29udGFpbmVyLCBTZWxlY3Rvci5TVElDS1lfQ09OVEVOVCkuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHJldHVybiBfdGhpczIucmVzdG9yZSgnbWFyZ2luUmlnaHQnLCBlbCk7XG4gICAgfSk7XG4gICAgcXNhKGNvbnRhaW5lciwgU2VsZWN0b3IuTkFWQkFSX1RPR0dMRVIpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLnJlc3RvcmUoJ21hcmdpblJpZ2h0JywgZWwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCb290c3RyYXBNb2RhbE1hbmFnZXI7XG59KE1vZGFsTWFuYWdlcik7XG5cbmV4cG9ydCB7IEJvb3RzdHJhcE1vZGFsTWFuYWdlciBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IGNyZWF0ZVdpdGhCc1ByZWZpeCBmcm9tICcuL2NyZWF0ZVdpdGhCc1ByZWZpeCc7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVXaXRoQnNQcmVmaXgoJ21vZGFsLWJvZHknKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIE1vZGFsQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gIG9uSGlkZTogZnVuY3Rpb24gb25IaWRlKCkge31cbn0pO1xuZXhwb3J0IGRlZmF1bHQgTW9kYWxDb250ZXh0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIE1vZGFsRGlhbG9nID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGNlbnRlcmVkID0gX3JlZi5jZW50ZXJlZCxcbiAgICAgIHNpemUgPSBfcmVmLnNpemUsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBzY3JvbGxhYmxlID0gX3JlZi5zY3JvbGxhYmxlLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImNlbnRlcmVkXCIsIFwic2l6ZVwiLCBcImNoaWxkcmVuXCIsIFwic2Nyb2xsYWJsZVwiXSk7XG5cbiAgYnNQcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsICdtb2RhbCcpO1xuICB2YXIgZGlhbG9nQ2xhc3MgPSBic1ByZWZpeCArIFwiLWRpYWxvZ1wiO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWYsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGRpYWxvZ0NsYXNzLCBjbGFzc05hbWUsIHNpemUgJiYgYnNQcmVmaXggKyBcIi1cIiArIHNpemUsIGNlbnRlcmVkICYmIGRpYWxvZ0NsYXNzICsgXCItY2VudGVyZWRcIiwgc2Nyb2xsYWJsZSAmJiBkaWFsb2dDbGFzcyArIFwiLXNjcm9sbGFibGVcIilcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGJzUHJlZml4ICsgXCItY29udGVudFwiXG4gIH0sIGNoaWxkcmVuKSk7XG59KTtcbk1vZGFsRGlhbG9nLmRpc3BsYXlOYW1lID0gJ01vZGFsRGlhbG9nJztcbmV4cG9ydCBkZWZhdWx0IE1vZGFsRGlhbG9nOyIsImltcG9ydCBjcmVhdGVXaXRoQnNQcmVmaXggZnJvbSAnLi9jcmVhdGVXaXRoQnNQcmVmaXgnO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlV2l0aEJzUHJlZml4KCdtb2RhbC1mb290ZXInKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbnZhciBwcm9wVHlwZXMgPSB7XG4gIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jXG59O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgbGFiZWw6ICdDbG9zZSdcbn07XG52YXIgQ2xvc2VCdXR0b24gPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIGxhYmVsID0gX3JlZi5sYWJlbCxcbiAgICAgIG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wibGFiZWxcIiwgXCJvbkNsaWNrXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKCdjbG9zZScsIGNsYXNzTmFtZSksXG4gICAgb25DbGljazogb25DbGlja1xuICB9LCBwcm9wcyksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICB9LCBcIlxceEQ3XCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogXCJzci1vbmx5XCJcbiAgfSwgbGFiZWwpKTtcbn0pO1xuQ2xvc2VCdXR0b24uZGlzcGxheU5hbWUgPSAnQ2xvc2VCdXR0b24nO1xuQ2xvc2VCdXR0b24ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuQ2xvc2VCdXR0b24uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgQ2xvc2VCdXR0b247IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICdAcmVzdGFydC9ob29rcy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgQ2xvc2VCdXR0b24gZnJvbSAnLi9DbG9zZUJ1dHRvbic7XG5pbXBvcnQgTW9kYWxDb250ZXh0IGZyb20gJy4vTW9kYWxDb250ZXh0JztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNsb3NlTGFiZWw6ICdDbG9zZScsXG4gIGNsb3NlQnV0dG9uOiBmYWxzZVxufTtcbnZhciBNb2RhbEhlYWRlciA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgY2xvc2VMYWJlbCA9IF9yZWYuY2xvc2VMYWJlbCxcbiAgICAgIGNsb3NlQnV0dG9uID0gX3JlZi5jbG9zZUJ1dHRvbixcbiAgICAgIG9uSGlkZSA9IF9yZWYub25IaWRlLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiY2xvc2VMYWJlbFwiLCBcImNsb3NlQnV0dG9uXCIsIFwib25IaWRlXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gIGJzUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnbW9kYWwtaGVhZGVyJyk7XG4gIHZhciBjb250ZXh0ID0gdXNlQ29udGV4dChNb2RhbENvbnRleHQpO1xuICB2YXIgaGFuZGxlQ2xpY2sgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29udGV4dCkgY29udGV4dC5vbkhpZGUoKTtcbiAgICBpZiAob25IaWRlKSBvbkhpZGUoKTtcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWZcbiAgfSwgcHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeClcbiAgfSksIGNoaWxkcmVuLCBjbG9zZUJ1dHRvbiAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDbG9zZUJ1dHRvbiwge1xuICAgIGxhYmVsOiBjbG9zZUxhYmVsLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrXG4gIH0pKTtcbn0pO1xuTW9kYWxIZWFkZXIuZGlzcGxheU5hbWUgPSAnTW9kYWxIZWFkZXInO1xuTW9kYWxIZWFkZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgTW9kYWxIZWFkZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICByZXR1cm4gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocCwgcmVmKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBwLCB7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhwLmNsYXNzTmFtZSwgY2xhc3NOYW1lKVxuICAgIH0pKTtcbiAgfSk7XG59KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgYWRkRXZlbnRMaXN0ZW5lciBmcm9tICdkb20taGVscGVycy9hZGRFdmVudExpc3RlbmVyJztcbmltcG9ydCBjYW5Vc2VET00gZnJvbSAnZG9tLWhlbHBlcnMvY2FuVXNlRE9NJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJ2RvbS1oZWxwZXJzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IHJlbW92ZUV2ZW50TGlzdGVuZXIgZnJvbSAnZG9tLWhlbHBlcnMvcmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG5pbXBvcnQgZ2V0U2Nyb2xsYmFyU2l6ZSBmcm9tICdkb20taGVscGVycy9zY3JvbGxiYXJTaXplJztcbmltcG9ydCB1c2VDYWxsYmFja1JlZiBmcm9tICdAcmVzdGFydC9ob29rcy91c2VDYWxsYmFja1JlZic7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICdAcmVzdGFydC9ob29rcy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB1c2VXaWxsVW5tb3VudCBmcm9tICdAcmVzdGFydC9ob29rcy91c2VXaWxsVW5tb3VudCc7XG5pbXBvcnQgdHJhbnNpdGlvbkVuZCBmcm9tICdkb20taGVscGVycy90cmFuc2l0aW9uRW5kJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlSW1wZXJhdGl2ZUhhbmRsZSwgdXNlTWVtbywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBCYXNlTW9kYWwgZnJvbSAncmVhY3Qtb3ZlcmxheXMvTW9kYWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgQm9vdHN0cmFwTW9kYWxNYW5hZ2VyIGZyb20gJy4vQm9vdHN0cmFwTW9kYWxNYW5hZ2VyJztcbmltcG9ydCBGYWRlIGZyb20gJy4vRmFkZSc7XG5pbXBvcnQgTW9kYWxCb2R5IGZyb20gJy4vTW9kYWxCb2R5JztcbmltcG9ydCBNb2RhbENvbnRleHQgZnJvbSAnLi9Nb2RhbENvbnRleHQnO1xuaW1wb3J0IE1vZGFsRGlhbG9nIGZyb20gJy4vTW9kYWxEaWFsb2cnO1xuaW1wb3J0IE1vZGFsRm9vdGVyIGZyb20gJy4vTW9kYWxGb290ZXInO1xuaW1wb3J0IE1vZGFsSGVhZGVyIGZyb20gJy4vTW9kYWxIZWFkZXInO1xuaW1wb3J0IE1vZGFsVGl0bGUgZnJvbSAnLi9Nb2RhbFRpdGxlJztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgbWFuYWdlcjtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHNob3c6IGZhbHNlLFxuICBiYWNrZHJvcDogdHJ1ZSxcbiAga2V5Ym9hcmQ6IHRydWUsXG4gIGF1dG9Gb2N1czogdHJ1ZSxcbiAgZW5mb3JjZUZvY3VzOiB0cnVlLFxuICByZXN0b3JlRm9jdXM6IHRydWUsXG4gIGFuaW1hdGlvbjogdHJ1ZSxcbiAgZGlhbG9nQXM6IE1vZGFsRGlhbG9nXG59O1xuLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUsIHJlYWN0L25vLW11bHRpLWNvbXAgKi9cblxuZnVuY3Rpb24gRGlhbG9nVHJhbnNpdGlvbihwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmFkZSwgcHJvcHMpO1xufVxuXG5mdW5jdGlvbiBCYWNrZHJvcFRyYW5zaXRpb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZhZGUsIHByb3BzKTtcbn1cbi8qIGVzbGludC1lbmFibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cblxuXG52YXIgTW9kYWwgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmLCByZWYpIHtcbiAgdmFyIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgZGlhbG9nQ2xhc3NOYW1lID0gX3JlZi5kaWFsb2dDbGFzc05hbWUsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBEaWFsb2cgPSBfcmVmLmRpYWxvZ0FzLFxuICAgICAgYXJpYUxhYmVsbGVkYnkgPSBfcmVmWydhcmlhLWxhYmVsbGVkYnknXSxcbiAgICAgIHNob3cgPSBfcmVmLnNob3csXG4gICAgICBhbmltYXRpb24gPSBfcmVmLmFuaW1hdGlvbixcbiAgICAgIGJhY2tkcm9wID0gX3JlZi5iYWNrZHJvcCxcbiAgICAgIGtleWJvYXJkID0gX3JlZi5rZXlib2FyZCxcbiAgICAgIG9uRXNjYXBlS2V5RG93biA9IF9yZWYub25Fc2NhcGVLZXlEb3duLFxuICAgICAgb25TaG93ID0gX3JlZi5vblNob3csXG4gICAgICBvbkhpZGUgPSBfcmVmLm9uSGlkZSxcbiAgICAgIGNvbnRhaW5lciA9IF9yZWYuY29udGFpbmVyLFxuICAgICAgYXV0b0ZvY3VzID0gX3JlZi5hdXRvRm9jdXMsXG4gICAgICBlbmZvcmNlRm9jdXMgPSBfcmVmLmVuZm9yY2VGb2N1cyxcbiAgICAgIHJlc3RvcmVGb2N1cyA9IF9yZWYucmVzdG9yZUZvY3VzLFxuICAgICAgcmVzdG9yZUZvY3VzT3B0aW9ucyA9IF9yZWYucmVzdG9yZUZvY3VzT3B0aW9ucyxcbiAgICAgIG9uRW50ZXJlZCA9IF9yZWYub25FbnRlcmVkLFxuICAgICAgb25FeGl0ID0gX3JlZi5vbkV4aXQsXG4gICAgICBvbkV4aXRpbmcgPSBfcmVmLm9uRXhpdGluZyxcbiAgICAgIG9uRW50ZXIgPSBfcmVmLm9uRW50ZXIsXG4gICAgICBvbkVudGVyaW5nID0gX3JlZi5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ZWQgPSBfcmVmLm9uRXhpdGVkLFxuICAgICAgYmFja2Ryb3BDbGFzc05hbWUgPSBfcmVmLmJhY2tkcm9wQ2xhc3NOYW1lLFxuICAgICAgcHJvcHNNYW5hZ2VyID0gX3JlZi5tYW5hZ2VyLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiZGlhbG9nQ2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJkaWFsb2dBc1wiLCBcImFyaWEtbGFiZWxsZWRieVwiLCBcInNob3dcIiwgXCJhbmltYXRpb25cIiwgXCJiYWNrZHJvcFwiLCBcImtleWJvYXJkXCIsIFwib25Fc2NhcGVLZXlEb3duXCIsIFwib25TaG93XCIsIFwib25IaWRlXCIsIFwiY29udGFpbmVyXCIsIFwiYXV0b0ZvY3VzXCIsIFwiZW5mb3JjZUZvY3VzXCIsIFwicmVzdG9yZUZvY3VzXCIsIFwicmVzdG9yZUZvY3VzT3B0aW9uc1wiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0ZWRcIiwgXCJiYWNrZHJvcENsYXNzTmFtZVwiLCBcIm1hbmFnZXJcIl0pO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZSh7fSksXG4gICAgICBtb2RhbFN0eWxlID0gX3VzZVN0YXRlWzBdLFxuICAgICAgc2V0U3R5bGUgPSBfdXNlU3RhdGVbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTIgPSB1c2VTdGF0ZShmYWxzZSksXG4gICAgICBhbmltYXRlU3RhdGljTW9kYWwgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0QW5pbWF0ZVN0YXRpY01vZGFsID0gX3VzZVN0YXRlMlsxXTtcblxuICB2YXIgd2FpdGluZ0Zvck1vdXNlVXBSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICB2YXIgaWdub3JlQmFja2Ryb3BDbGlja1JlZiA9IHVzZVJlZihmYWxzZSk7XG4gIHZhciByZW1vdmVTdGF0aWNNb2RhbEFuaW1hdGlvblJlZiA9IHVzZVJlZihudWxsKTsgLy8gVE9ETzogd2hhdCdzIHRoaXMgdHlwZVxuXG4gIHZhciBfdXNlQ2FsbGJhY2tSZWYgPSB1c2VDYWxsYmFja1JlZigpLFxuICAgICAgbW9kYWwgPSBfdXNlQ2FsbGJhY2tSZWZbMF0sXG4gICAgICBzZXRNb2RhbFJlZiA9IF91c2VDYWxsYmFja1JlZlsxXTtcblxuICB2YXIgaGFuZGxlSGlkZSA9IHVzZUV2ZW50Q2FsbGJhY2sob25IaWRlKTtcbiAgYnNQcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsICdtb2RhbCcpO1xuICB1c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXQgX21vZGFsKCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQWNjZXNzaW5nIGBfbW9kYWxgIGlzIG5vdCBzdXBwb3J0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlJykgOiB2b2lkIDA7XG4gICAgICAgIHJldHVybiBtb2RhbDtcbiAgICAgIH1cblxuICAgIH07XG4gIH0sIFttb2RhbF0pO1xuICB2YXIgbW9kYWxDb250ZXh0ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uSGlkZTogaGFuZGxlSGlkZVxuICAgIH07XG4gIH0sIFtoYW5kbGVIaWRlXSk7XG5cbiAgZnVuY3Rpb24gZ2V0TW9kYWxNYW5hZ2VyKCkge1xuICAgIGlmIChwcm9wc01hbmFnZXIpIHJldHVybiBwcm9wc01hbmFnZXI7XG4gICAgaWYgKCFtYW5hZ2VyKSBtYW5hZ2VyID0gbmV3IEJvb3RzdHJhcE1vZGFsTWFuYWdlcigpO1xuICAgIHJldHVybiBtYW5hZ2VyO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRGlhbG9nU3R5bGUobm9kZSkge1xuICAgIGlmICghY2FuVXNlRE9NKSByZXR1cm47XG4gICAgdmFyIGNvbnRhaW5lcklzT3ZlcmZsb3dpbmcgPSBnZXRNb2RhbE1hbmFnZXIoKS5pc0NvbnRhaW5lck92ZXJmbG93aW5nKG1vZGFsKTtcbiAgICB2YXIgbW9kYWxJc092ZXJmbG93aW5nID0gbm9kZS5zY3JvbGxIZWlnaHQgPiBvd25lckRvY3VtZW50KG5vZGUpLmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgc2V0U3R5bGUoe1xuICAgICAgcGFkZGluZ1JpZ2h0OiBjb250YWluZXJJc092ZXJmbG93aW5nICYmICFtb2RhbElzT3ZlcmZsb3dpbmcgPyBnZXRTY3JvbGxiYXJTaXplKCkgOiB1bmRlZmluZWQsXG4gICAgICBwYWRkaW5nTGVmdDogIWNvbnRhaW5lcklzT3ZlcmZsb3dpbmcgJiYgbW9kYWxJc092ZXJmbG93aW5nID8gZ2V0U2Nyb2xsYmFyU2l6ZSgpIDogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFuZGxlV2luZG93UmVzaXplID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG1vZGFsKSB7XG4gICAgICB1cGRhdGVEaWFsb2dTdHlsZShtb2RhbC5kaWFsb2cpO1xuICAgIH1cbiAgfSk7XG4gIHVzZVdpbGxVbm1vdW50KGZ1bmN0aW9uICgpIHtcbiAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGhhbmRsZVdpbmRvd1Jlc2l6ZSk7XG5cbiAgICBpZiAocmVtb3ZlU3RhdGljTW9kYWxBbmltYXRpb25SZWYuY3VycmVudCkge1xuICAgICAgcmVtb3ZlU3RhdGljTW9kYWxBbmltYXRpb25SZWYuY3VycmVudCgpO1xuICAgIH1cbiAgfSk7IC8vIFdlIHByZXZlbnQgdGhlIG1vZGFsIGZyb20gY2xvc2luZyBkdXJpbmcgYSBkcmFnIGJ5IGRldGVjdGluZyB3aGVyZSB0aGVcbiAgLy8gdGhlIGNsaWNrIG9yaWdpbmF0ZXMgZnJvbS4gSWYgaXQgc3RhcnRzIGluIHRoZSBtb2RhbCBhbmQgdGhlbiBlbmRzIG91dHNpZGVcbiAgLy8gZG9uJ3QgY2xvc2UuXG5cbiAgdmFyIGhhbmRsZURpYWxvZ01vdXNlRG93biA9IGZ1bmN0aW9uIGhhbmRsZURpYWxvZ01vdXNlRG93bigpIHtcbiAgICB3YWl0aW5nRm9yTW91c2VVcFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfTtcblxuICB2YXIgaGFuZGxlTW91c2VVcCA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlVXAoZSkge1xuICAgIGlmICh3YWl0aW5nRm9yTW91c2VVcFJlZi5jdXJyZW50ICYmIG1vZGFsICYmIGUudGFyZ2V0ID09PSBtb2RhbC5kaWFsb2cpIHtcbiAgICAgIGlnbm9yZUJhY2tkcm9wQ2xpY2tSZWYuY3VycmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgd2FpdGluZ0Zvck1vdXNlVXBSZWYuY3VycmVudCA9IGZhbHNlO1xuICB9O1xuXG4gIHZhciBoYW5kbGVTdGF0aWNNb2RhbEFuaW1hdGlvbiA9IGZ1bmN0aW9uIGhhbmRsZVN0YXRpY01vZGFsQW5pbWF0aW9uKCkge1xuICAgIHNldEFuaW1hdGVTdGF0aWNNb2RhbCh0cnVlKTtcbiAgICByZW1vdmVTdGF0aWNNb2RhbEFuaW1hdGlvblJlZi5jdXJyZW50ID0gdHJhbnNpdGlvbkVuZChtb2RhbC5kaWFsb2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldEFuaW1hdGVTdGF0aWNNb2RhbChmYWxzZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVN0YXRpY0JhY2tkcm9wQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVTdGF0aWNCYWNrZHJvcENsaWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGhhbmRsZVN0YXRpY01vZGFsQW5pbWF0aW9uKCk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZSkge1xuICAgIGlmIChiYWNrZHJvcCA9PT0gJ3N0YXRpYycpIHtcbiAgICAgIGhhbmRsZVN0YXRpY0JhY2tkcm9wQ2xpY2soZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlnbm9yZUJhY2tkcm9wQ2xpY2tSZWYuY3VycmVudCB8fCBlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICBpZ25vcmVCYWNrZHJvcENsaWNrUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvbkhpZGUoKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlRXNjYXBlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUVzY2FwZUtleURvd24oZSkge1xuICAgIGlmICgha2V5Ym9hcmQgJiYgYmFja2Ryb3AgPT09ICdzdGF0aWMnKSB7XG4gICAgICAvLyBDYWxsIHByZXZlbnREZWZhdWx0IHRvIHN0b3AgbW9kYWwgZnJvbSBjbG9zaW5nIGluIHJlYWN0LW92ZXJsYXlzLFxuICAgICAgLy8gdGhlbiBwbGF5IG91ciBhbmltYXRpb24uXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBoYW5kbGVTdGF0aWNNb2RhbEFuaW1hdGlvbigpO1xuICAgIH0gZWxzZSBpZiAoa2V5Ym9hcmQgJiYgb25Fc2NhcGVLZXlEb3duKSB7XG4gICAgICBvbkVzY2FwZUtleURvd24oZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlciA9IGZ1bmN0aW9uIGhhbmRsZUVudGVyKG5vZGUpIHtcbiAgICBpZiAobm9kZSkge1xuICAgICAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIHVwZGF0ZURpYWxvZ1N0eWxlKG5vZGUpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChvbkVudGVyKSBvbkVudGVyLmFwcGx5KHZvaWQgMCwgW25vZGVdLmNvbmNhdChhcmdzKSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUV4aXQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0KG5vZGUpIHtcbiAgICBpZiAocmVtb3ZlU3RhdGljTW9kYWxBbmltYXRpb25SZWYuY3VycmVudCkge1xuICAgICAgcmVtb3ZlU3RhdGljTW9kYWxBbmltYXRpb25SZWYuY3VycmVudCgpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIGlmIChvbkV4aXQpIG9uRXhpdC5hcHBseSh2b2lkIDAsIFtub2RlXS5jb25jYXQoYXJncykpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlcmluZyA9IGZ1bmN0aW9uIGhhbmRsZUVudGVyaW5nKG5vZGUpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMgPiAxID8gX2xlbjMgLSAxIDogMCksIF9rZXkzID0gMTsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgYXJnc1tfa2V5MyAtIDFdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICBpZiAob25FbnRlcmluZykgb25FbnRlcmluZy5hcHBseSh2b2lkIDAsIFtub2RlXS5jb25jYXQoYXJncykpOyAvLyBGSVhNRTogVGhpcyBzaG91bGQgd29yayBldmVuIHdoZW4gYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCBoYW5kbGVXaW5kb3dSZXNpemUpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQobm9kZSkge1xuICAgIGlmIChub2RlKSBub2RlLnN0eWxlLmRpc3BsYXkgPSAnJzsgLy8gUkhMIHJlbW92ZXMgaXQgc29tZXRpbWVzXG5cbiAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQgPiAxID8gX2xlbjQgLSAxIDogMCksIF9rZXk0ID0gMTsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgYXJnc1tfa2V5NCAtIDFdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICB9XG5cbiAgICBpZiAob25FeGl0ZWQpIG9uRXhpdGVkLmFwcGx5KHZvaWQgMCwgYXJncyk7IC8vIEZJWE1FOiBUaGlzIHNob3VsZCB3b3JrIGV2ZW4gd2hlbiBhbmltYXRpb24gaXMgZGlzYWJsZWQuXG5cbiAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGhhbmRsZVdpbmRvd1Jlc2l6ZSk7XG4gIH07XG5cbiAgdmFyIHJlbmRlckJhY2tkcm9wID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGJhY2tkcm9wUHJvcHMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIGJhY2tkcm9wUHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhic1ByZWZpeCArIFwiLWJhY2tkcm9wXCIsIGJhY2tkcm9wQ2xhc3NOYW1lLCAhYW5pbWF0aW9uICYmICdzaG93JylcbiAgICB9KSk7XG4gIH0sIFthbmltYXRpb24sIGJhY2tkcm9wQ2xhc3NOYW1lLCBic1ByZWZpeF0pO1xuXG4gIHZhciBiYXNlTW9kYWxTdHlsZSA9IF9leHRlbmRzKHt9LCBzdHlsZSwge30sIG1vZGFsU3R5bGUpOyAvLyBTZXRzIGBkaXNwbGF5YCBhbHdheXMgYmxvY2sgd2hlbiBgYW5pbWF0aW9uYCBpcyBmYWxzZVxuXG5cbiAgaWYgKCFhbmltYXRpb24pIHtcbiAgICBiYXNlTW9kYWxTdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgfVxuXG4gIHZhciByZW5kZXJEaWFsb2cgPSBmdW5jdGlvbiByZW5kZXJEaWFsb2coZGlhbG9nUHJvcHMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgcm9sZTogXCJkaWFsb2dcIlxuICAgIH0sIGRpYWxvZ1Byb3BzLCB7XG4gICAgICBzdHlsZTogYmFzZU1vZGFsU3R5bGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgYW5pbWF0ZVN0YXRpY01vZGFsICYmIGJzUHJlZml4ICsgXCItc3RhdGljXCIpLFxuICAgICAgb25DbGljazogYmFja2Ryb3AgPyBoYW5kbGVDbGljayA6IHVuZGVmaW5lZCxcbiAgICAgIG9uTW91c2VVcDogaGFuZGxlTW91c2VVcCxcbiAgICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IGFyaWFMYWJlbGxlZGJ5XG4gICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERpYWxvZywgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByb2xlOiBcImRvY3VtZW50XCIsXG4gICAgICBvbk1vdXNlRG93bjogaGFuZGxlRGlhbG9nTW91c2VEb3duLFxuICAgICAgY2xhc3NOYW1lOiBkaWFsb2dDbGFzc05hbWVcbiAgICB9KSwgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTW9kYWxDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG1vZGFsQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChCYXNlTW9kYWwsIHtcbiAgICBzaG93OiBzaG93LFxuICAgIHJlZjogc2V0TW9kYWxSZWYsXG4gICAgYmFja2Ryb3A6IGJhY2tkcm9wLFxuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIGtleWJvYXJkOiB0cnVlIC8vIEFsd2F5cyBzZXQgdHJ1ZSAtIHNlZSBoYW5kbGVFc2NhcGVLZXlEb3duXG4gICAgLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgIGVuZm9yY2VGb2N1czogZW5mb3JjZUZvY3VzLFxuICAgIHJlc3RvcmVGb2N1czogcmVzdG9yZUZvY3VzLFxuICAgIHJlc3RvcmVGb2N1c09wdGlvbnM6IHJlc3RvcmVGb2N1c09wdGlvbnMsXG4gICAgb25Fc2NhcGVLZXlEb3duOiBoYW5kbGVFc2NhcGVLZXlEb3duLFxuICAgIG9uU2hvdzogb25TaG93LFxuICAgIG9uSGlkZTogb25IaWRlLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRW50ZXJlZDogb25FbnRlcmVkLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG1hbmFnZXI6IGdldE1vZGFsTWFuYWdlcigpLFxuICAgIGNvbnRhaW5lckNsYXNzTmFtZTogYnNQcmVmaXggKyBcIi1vcGVuXCIsXG4gICAgdHJhbnNpdGlvbjogYW5pbWF0aW9uID8gRGlhbG9nVHJhbnNpdGlvbiA6IHVuZGVmaW5lZCxcbiAgICBiYWNrZHJvcFRyYW5zaXRpb246IGFuaW1hdGlvbiA/IEJhY2tkcm9wVHJhbnNpdGlvbiA6IHVuZGVmaW5lZCxcbiAgICByZW5kZXJCYWNrZHJvcDogcmVuZGVyQmFja2Ryb3AsXG4gICAgcmVuZGVyRGlhbG9nOiByZW5kZXJEaWFsb2dcbiAgfSkpO1xufSk7XG5Nb2RhbC5kaXNwbGF5TmFtZSA9ICdNb2RhbCc7XG5Nb2RhbC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5Nb2RhbC5Cb2R5ID0gTW9kYWxCb2R5O1xuTW9kYWwuSGVhZGVyID0gTW9kYWxIZWFkZXI7XG5Nb2RhbC5UaXRsZSA9IE1vZGFsVGl0bGU7XG5Nb2RhbC5Gb290ZXIgPSBNb2RhbEZvb3Rlcjtcbk1vZGFsLkRpYWxvZyA9IE1vZGFsRGlhbG9nO1xuTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDMwMDtcbk1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04gPSAxNTA7XG5leHBvcnQgZGVmYXVsdCBNb2RhbDsiLCJpbXBvcnQgY3JlYXRlV2l0aEJzUHJlZml4IGZyb20gJy4vY3JlYXRlV2l0aEJzUHJlZml4JztcbmltcG9ydCBkaXZXaXRoQ2xhc3NOYW1lIGZyb20gJy4vZGl2V2l0aENsYXNzTmFtZSc7XG52YXIgRGl2U3R5bGVkQXNINCA9IGRpdldpdGhDbGFzc05hbWUoJ2g0Jyk7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVXaXRoQnNQcmVmaXgoJ21vZGFsLXRpdGxlJywge1xuICBDb21wb25lbnQ6IERpdlN0eWxlZEFzSDRcbn0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHZhcmlhbnQ6ICdwcmltYXJ5JyxcbiAgYWN0aXZlOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlXG59O1xudmFyIEJ1dHRvbiA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgdmFyaWFudCA9IF9yZWYudmFyaWFudCxcbiAgICAgIHNpemUgPSBfcmVmLnNpemUsXG4gICAgICBhY3RpdmUgPSBfcmVmLmFjdGl2ZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgYmxvY2sgPSBfcmVmLmJsb2NrLFxuICAgICAgdHlwZSA9IF9yZWYudHlwZSxcbiAgICAgIGFzID0gX3JlZi5hcyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYnNQcmVmaXhcIiwgXCJ2YXJpYW50XCIsIFwic2l6ZVwiLCBcImFjdGl2ZVwiLCBcImNsYXNzTmFtZVwiLCBcImJsb2NrXCIsIFwidHlwZVwiLCBcImFzXCJdKTtcblxuICB2YXIgcHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnYnRuJyk7XG4gIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lcyhjbGFzc05hbWUsIHByZWZpeCwgYWN0aXZlICYmICdhY3RpdmUnLCBwcmVmaXggKyBcIi1cIiArIHZhcmlhbnQsIGJsb2NrICYmIHByZWZpeCArIFwiLWJsb2NrXCIsIHNpemUgJiYgcHJlZml4ICsgXCItXCIgKyBzaXplKTtcblxuICBpZiAocHJvcHMuaHJlZikge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGFzOiBhcyxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzZXMsIHByb3BzLmRpc2FibGVkICYmICdkaXNhYmxlZCcpXG4gICAgfSkpO1xuICB9XG5cbiAgaWYgKHJlZikge1xuICAgIHByb3BzLnJlZiA9IHJlZjtcbiAgfVxuXG4gIGlmICh0eXBlKSB7XG4gICAgcHJvcHMudHlwZSA9IHR5cGU7XG4gIH0gZWxzZSBpZiAoIWFzKSB7XG4gICAgcHJvcHMudHlwZSA9ICdidXR0b24nO1xuICB9XG5cbiAgdmFyIENvbXBvbmVudCA9IGFzIHx8ICdidXR0b24nO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSkpO1xufSk7XG5CdXR0b24uZGlzcGxheU5hbWUgPSAnQnV0dG9uJztcbkJ1dHRvbi5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBCdXR0b247IiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xyXG5cclxuZXhwb3J0IGNvbnN0IGxvZ2luID0gdXNlciA9PiB7XHJcbiAgICByZXR1cm4gYXhpb3NcclxuICAgICAgICAucG9zdCgnaHR0cHM6Ly9wZXRzLWZyaWVuZGx5Lmhlcm9rdWFwcC5jb20vdXRpbGlzYXRldXJzL2Nvbm5leGlvbicsIHtcclxuICAgICAgICAgICAgZW1haWw6IHVzZXIudXNlck5hbWUsXHJcbiAgICAgICAgICAgIG1vdF9kZV9wYXNzZTogdXNlci5wYXNzd29yZFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcnRva2VuJywgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YSkpXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSlcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKVxyXG4gICAgICAgIH0pXHJcbn1cclxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyID0gbmV3VXNlciA9PiB7XHJcbiAgICByZXR1cm4gYXhpb3NcclxuICAgICAgICAucG9zdCgnaHR0cHM6Ly9wZXRzLWZyaWVuZGx5Lmhlcm9rdWFwcC5jb20vdXRpbGlzYXRldXJzL2NyZWF0aW9uJywge1xyXG4gICAgICAgICAgICB1dGlsaXNhdGV1cjoge1xyXG4gICAgICAgICAgICAgICAgaWRfcm9sZTogbmV3VXNlci5pZF9yb2xlLFxyXG4gICAgICAgICAgICAgICAgbm9tOiBuZXdVc2VyLm5vbSxcclxuICAgICAgICAgICAgICAgIHByZW5vbTogbmV3VXNlci5wcmVub20sXHJcbiAgICAgICAgICAgICAgICBhZ2U6IG5ld1VzZXIuYWdlLFxyXG4gICAgICAgICAgICAgICAgZW1haWw6IG5ld1VzZXIuZW1haWwsXHJcbiAgICAgICAgICAgICAgICBtb3RfZGVfcGFzc2U6IG5ld1VzZXIubW90X2RlX3Bhc3NlLFxyXG4gICAgICAgICAgICAgICAgc2V4ZTogbmV3VXNlci5zZXhlLFxyXG4gICAgICAgICAgICAgICAgdGVsZXBob25lOiBuZXdVc2VyLnRlbGVwaG9uZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhZHJlc3NlOiB7XHJcbiAgICAgICAgICAgICAgICBudW1lcm9fcnVlOiBuZXdVc2VyLm51bWVyb19ydWUsXHJcbiAgICAgICAgICAgICAgICBub21fcnVlOiBuZXdVc2VyLm5vbV9ydWUsXHJcbiAgICAgICAgICAgICAgICBjb2RlX3Bvc3RhbDogbmV3VXNlci5jb2RlX3Bvc3RhbCxcclxuICAgICAgICAgICAgICAgIHZpbGxlOiBuZXdVc2VyLnZpbGxlLFxyXG4gICAgICAgICAgICAgICAgcHJvdmluY2U6IG5ld1VzZXIucHJvdmluY2UsXHJcbiAgICAgICAgICAgICAgICBwYXlzOiBuZXdVc2VyLnBheXMsXHJcbiAgICAgICAgICAgICAgICBudW1lcm9fYXBwdDogbmV3VXNlci5udW1lcm9fYXBwdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUmVnaXN0ZXJlZCcsIHJlc3BvbnNlKVxyXG4gICAgICAgIH0pXHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuLy8gcGxhY2UgaG9sZGVyIGEgYWpvdXRlciA/Pz9cclxuY29uc3QgSW5wdXRDb21wb25lbnQgPSAoeyBjbGFzc0Nzcywgb25DaGFuZ2VSYWRpbywgY2xhc3NJY29uLCBjbGFzc0lucHV0LCB0eXBlLCBpZCwgbmFtZSwgdmFsdWUsIG1pbiwgb25DaGFuZ2UsIHRleHRMYWJlbCwgbGFiZWxDbGFzcywgcGxhY2VIb2xkZXIsIG9uQ2xpY2sgfSkgPT4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzQ3NzfSBvbkNoYW5nZT17b25DaGFuZ2VSYWRpb30+XHJcbiAgICAgICAgPGkgY2xhc3NOYW1lPXtjbGFzc0ljb259IC8+XHJcbiAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZUhvbGRlcn1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc0lucHV0fVxyXG4gICAgICAgICAgICB0eXBlPXt0eXBlfVxyXG4gICAgICAgICAgICBpZD17aWR9XHJcbiAgICAgICAgICAgIG5hbWU9e25hbWV9XHJcbiAgICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cclxuICAgICAgICAgICAgbWluPXttaW59XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cclxuICAgICAgICAgICAgb25DbGljaz17b25DbGlja31cclxuICAgICAgICAgICAgcmVxdWlyZWRcclxuXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPXtsYWJlbENsYXNzfSBkYXRhLWVycm9yPSd3cm9uZycgZGF0YS1zdWNjZXNzPSdyaWdodCcgaHRtbEZvcj17aWR9Pnt0ZXh0TGFiZWx9PC9sYWJlbD5cclxuICAgIDwvZGl2PlxyXG5cclxuKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSW5wdXRDb21wb25lbnRcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5cclxuaW1wb3J0IElucHV0Q29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudC9pbnB1dC1jb21wb25lbnQnXHJcblxyXG5jbGFzcyBJbnNjcmlwdGlvbkNvbnRhaW5lciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcylcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgaW5wdXRzOiBbXVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbnRpbnVlID0gdGhpcy5jb250aW51ZS5iaW5kKHRoaXMpXHJcbiAgICB9XHJcblxyXG4gICAgY29udGludWUgKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICB0aGlzLnByb3BzLm5leHRTdGVwKClcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICAgICAgZmV0Y2goJ2lucHV0cy5qc29uJywgeyBtZXRob2Q6ICdHRVQnIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlucHV0czogcmVzcG9uc2UgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIgKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J21vZGFsLWJvZHkgbXgtMyc+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pbnB1dHMubWFwKChpbnB1dCwgaW5kZXgpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRDb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0Nzcz17aW5wdXQuY2xhc3NDc3N9IG9uQ2hhbmdlUmFkaW89e3RoaXMucHJvcHMub25DaGFuZ2VSYWRpb30gY2xhc3NJY29uPXtpbnB1dC5jbGFzc0ljb259IGNsYXNzSW5wdXQ9e2lucHV0LmNsYXNzSW5wdXR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT17aW5wdXQudHlwZX0gaWQ9e2lucHV0LmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e2lucHV0Lm5hbWV9IG1pbj17aW5wdXQubWlufSBvbmNoYW5nZT17dGhpcy5wcm9wcy5jaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2lucHV0LnZhbHVlfSB0ZXh0TGFiZWw9e2lucHV0LnRleHRMYWJlbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2luZGV4fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT0ncGFnZXInPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPSduZXh0Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nIycgb25DbGljaz17dGhpcy5wcm9wcy5jbGlja30+TmV4dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDwvPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCBJbnNjcmlwdGlvbkNvbnRhaW5lclxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgSW5wdXRDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50L2lucHV0LWNvbXBvbmVudCdcclxuXHJcbmNsYXNzIEluc2NyaXB0aW9uQWRyZXNzQ29udGFpbmVyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKVxyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBpbnB1dHM6IFtdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnRpbnVlIChlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgdGhpcy5wcm9wcy5uZXh0U3RlcCgpXHJcbiAgICB9XHJcblxyXG4gICAgYmFjayAoZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgIHRoaXMucHJvcHMucHJldlN0ZXAoKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuICAgICAgICBmZXRjaCgnYWRyZXNzLmpzb24nLCB7IG1ldGhvZDogJ0dFVCcgfSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaW5wdXRzOiByZXNwb25zZSB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlciAoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPD5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbW9kYWwtYm9keSBteC0zJz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuaW5wdXRzLm1hcCgoaW5wdXQsIGluZGV4KSA9PiA8SW5wdXRDb21wb25lbnQgY2xhc3NDc3M9e2lucHV0LmNsYXNzQ3NzfSBjbGFzc0ljb249e2lucHV0LmNsYXNzSWNvbn0gY2xhc3NJbnB1dD17aW5wdXQuY2xhc3NJbnB1dH0gdHlwZT17aW5wdXQudHlwZX0gaWQ9e2lucHV0LmlkfSBuYW1lPXtpbnB1dC5uYW1lfSBtaW49e2lucHV0Lm1pbn0gb25jaGFuZ2U9e3RoaXMucHJvcHMuY2hhbmdlfSB0ZXh0TGFiZWw9e2lucHV0LnRleHRMYWJlbH0ga2V5PXtpbmRleH0gLz4pfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT0ncGFnaW5hdGlvbic+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT0ncGFnZS1pdGVtJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nIycgb25DbGljaz17dGhpcy5wcm9wcy5iYWNrfT5QcmV2aW91c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT0ncGFnZS1pdGVtJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nIycgb25DbGljaz17dGhpcy5wcm9wcy5uZXh0fT5OZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgPC91bD5cclxuXHJcbiAgICAgICAgICAgIDwvPlxyXG5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgSW5zY3JpcHRpb25BZHJlc3NDb250YWluZXJcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5cclxuaW1wb3J0IElucHV0Q29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudC9pbnB1dC1jb21wb25lbnQnXHJcblxyXG5jbGFzcyBRdWVzdGlvblZhbGlkYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IgKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpXHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGlucHV0czogW11cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250aW51ZSA9IHRoaXMuY29udGludWUuYmluZCh0aGlzKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnRpbnVlIChlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgdGhpcy5wcm9wcy5uZXh0U3RlcCgpXHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQgKCkge1xyXG4gICAgICAgIGZldGNoKCdpbnB1dHMuanNvbicsIHsgbWV0aG9kOiAnR0VUJyB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpbnB1dHM6IHJlc3BvbnNlIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyICgpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8PlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtb2RhbC1ib2R5IG14LTMnPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRDb21wb25lbnRcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ3NzPSdtZC1mb3JtIG1iLTUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzSW5wdXQ9J2Zvcm0tY29udHJvbCB2YWxpZGF0ZScgdHlwZT0ndGV4dCcgaWQ9J3FzdDEnIG5hbWU9J3FzdDEnIHBsYWNlSG9sZGVyPSdQb3VycXVvaSBjaG9pc2lzZXYgdm91cyBjZXR0ZSBqb2I/J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbmNoYW5nZT17dGhpcy5wcm9wcy5jaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXRDb21wb25lbnRcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzQ3NzPSdtZC1mb3JtIG1iLTUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzSW5wdXQ9J2Zvcm0tY29udHJvbCB2YWxpZGF0ZScgdHlwZT0ndGV4dCcgaWQ9J3FzdDInIG5hbWU9J3FzdDInIHBsYWNlSG9sZGVyPSdBVkVaLVZPVVMgVU5FIFJFU1BPTlNBQklMSVTDiSBDSVZJTEUgPz8nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlPXt0aGlzLnByb3BzLmNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dENvbXBvbmVudFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDc3M9J21kLWZvcm0gbWItNSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NJbnB1dD0nZm9ybS1jb250cm9sIHZhbGlkYXRlJyB0eXBlPSd0ZXh0JyBpZD0ncXN0MycgbmFtZT0ncXN0MycgcGxhY2VIb2xkZXI9J0F2ZXogdm91cyBkZXMgYW5pbWF1eD8nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlPXt0aGlzLnByb3BzLmNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dENvbXBvbmVudFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NDc3M9J21kLWZvcm0gbWItNSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NJbnB1dD0nZm9ybS1jb250cm9sIHZhbGlkYXRlJyB0eXBlPSd0ZXh0JyBpZD0ncXN0NCcgbmFtZT0ncXN0NCcgcGxhY2VIb2xkZXI9J0VzIGNlIHF1ZSB2b3VzIGF2ZXogZGVzIGFudGVjZWRlbnRzIGp1ZGljaWFpcmUgPydcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U9e3RoaXMucHJvcHMuY2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPElucHV0Q29tcG9uZW50XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0Nzcz0nbWQtZm9ybSBtYi01J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc0lucHV0PSdmb3JtLWNvbnRyb2wgdmFsaWRhdGUnIHR5cGU9J3RleHQnIGlkPSdxc3Q1JyBuYW1lPSdxc3Q1JyBwbGFjZUhvbGRlcj0nUVVFTFMgVFlQRVMgRCBBQ1RJVklUw4lTIFBST1BPU0VaLVZPVVMgPydcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25jaGFuZ2U9e3RoaXMucHJvcHMuY2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPSdwYWdlcic+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9J3BhZ2UtaXRlbSc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9JyMnIG9uQ2xpY2s9e3RoaXMucHJvcHMuYmFja30+UHJldmlvdXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFF1ZXN0aW9uVmFsaWRhdGlvblxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcblxyXG5jbGFzcyBDb25uZWN0aW9uUG9wVXAgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IgKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpXHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIC8vICBpbnB1dHM6IFtdLFxyXG4gICAgICAgICAgICBpc1Bhc3N3b3JkU2hvd246IGZhbHNlXHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhhbmRsZXRvZ2dsZVBhc3N3b3JkVmlzaWJsaXR5ID0gdGhpcy5oYW5kbGV0b2dnbGVQYXNzd29yZFZpc2libGl0eS5iaW5kKHRoaXMpXHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxldG9nZ2xlUGFzc3dvcmRWaXNpYmxpdHkgKCkge1xyXG4gICAgICAgIGNvbnN0IHsgaXNQYXNzd29yZFNob3duIH0gPSB0aGlzLnN0YXRlXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzUGFzc3dvcmRTaG93bjogIWlzUGFzc3dvcmRTaG93biB9KVxyXG4gICAgfTtcclxuXHJcbiAgICByZW5kZXIgKCkge1xyXG4gICAgICAgIGNvbnN0IHsgaXNQYXNzd29yZFNob3duIH0gPSB0aGlzLnN0YXRlXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGZvcm0gaWQ9J2JvdXR0b24taW5zY3JpcHRpb24gJz5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtb2RhbC1ib2R5IG14LTMnPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbWQtZm9ybSBtYi01Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPSdmYXMgZmEtZW52ZWxvcGUgcHJlZml4IGdyZXktdGV4dCcgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J2VtYWlsJyBpZD0nZGVmYXVsdEZvcm0tZW1haWwnIGNsYXNzTmFtZT0nZm9ybS1jb250cm9sIHZhbGlkYXRlJyBvbkNoYW5nZT17dGhpcy5wcm9wcy5nZXRFbWFpbH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGRhdGEtZXJyb3I9J3dyb25nJyBkYXRhLXN1Y2Nlc3M9J3JpZ2h0JyBodG1sRm9yPSdkZWZhdWx0Rm9ybS1lbWFpbCc+VG9uIEVtYWlsPC9sYWJlbD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J21kLWZvcm0gbWItNCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmb3JtLWdyb3VwJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdpbnB1dC1ncm91cCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9e2lzUGFzc3dvcmRTaG93biA/ICd0ZXh0JyA6ICdwYXNzd29yZCd9IGlkPSdkZWZhdWx0Rm9ybS1wYXNzJyBjbGFzc05hbWU9J2Zvcm0tY29udHJvbCB2YWxpZGF0ZScgZGF0YS10b2dnbGU9J3Bhc3N3b3JkJyBvbkNoYW5nZT17dGhpcy5wcm9wcy5nZXRQYXNzfSBvbktleVByZXNzPXt0aGlzLnByb3BzLkZvbmN0aW9uRW50cmVyfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdpbnB1dC1ncm91cC1hcHBlbmQnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naW5wdXQtZ3JvdXAtdGV4dCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nZmEgZmEtZXllIHBhc3N3b3JkLWljb24nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1oYW5kbGVyLW5hbWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGV0b2dnbGVQYXNzd29yZFZpc2libGl0eX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZGF0YS1lcnJvcj0nd3JvbmcnIGRhdGEtc3VjY2Vzcz0ncmlnaHQnIGh0bWxGb3I9J2RlZmF1bHRGb3JtLXBhc3MnPlRvbiBtb3QgZGUgcGFzc2U8L2xhYmVsPipcclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Zvcm0+XHJcblxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCBDb25uZWN0aW9uUG9wVXBcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBCdXR0b24sIE1vZGFsIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xyXG5pbXBvcnQgQ29ubmVjdGlvblBvcFVwIGZyb20gJy4uL2NvbnRhaW5lci9jb25uZWN0aW9uLWNvbnRhaW5lcidcclxuaW1wb3J0IHsgbG9naW4gfSBmcm9tICcuLi9mb25jdGlvbnMvVXNlckZ1bmN0aW9ucydcclxuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcblxyXG5jbGFzcyBNb2RhbENueENvbnRhaW5lciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcylcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgLy8gIGlucHV0czogW10sXHJcbiAgICAgICAgICAgIGlzUGFzc3dvcmRTaG93bjogZmFsc2UsXHJcbiAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICBlbWFpbDogJycsXHJcbiAgICAgICAgICAgIG1vdF9kZV9wYXNzZTogJycsXHJcbiAgICAgICAgICAgIHVzZXJzOiBbXVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5oYW5kbGV0b2dnbGVQYXNzd29yZFZpc2libGl0eSA9IHRoaXMuaGFuZGxldG9nZ2xlUGFzc3dvcmRWaXNpYmxpdHkuYmluZCh0aGlzKVxyXG4gICAgICAgIHRoaXMub25IYW5kbGVDaGFuZ2VOYW1lID0gdGhpcy5vbkhhbmRsZUNoYW5nZU5hbWUuYmluZCh0aGlzKVxyXG5cclxuICAgICAgICB0aGlzLm9uSGFuZGxlQ2hhbmdlUGFzcyA9IHRoaXMub25IYW5kbGVDaGFuZ2VQYXNzLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLmhhbmRsZVNob3cgPSB0aGlzLmhhbmRsZVNob3cuYmluZCh0aGlzKVxyXG5cclxuICAgICAgICB0aGlzLm9uSGFuZGxlQ2xvc2UgPSB0aGlzLm9uSGFuZGxlQ2xvc2UuYmluZCh0aGlzKVxyXG5cclxuICAgICAgICB0aGlzLm9uSGFuZGxlQ2hhbmdlQW5kRW50ZXIgPSB0aGlzLm9uSGFuZGxlQ2hhbmdlQW5kRW50ZXIuYmluZCh0aGlzKVxyXG4gICAgICAgIHRoaXMub25TdWJtaXQgPSB0aGlzLm9uU3VibWl0LmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLm9uSGFuZGxlQ2xvc2UgPSB0aGlzLm9uSGFuZGxlQ2xvc2UuYmluZCh0aGlzKVxyXG4gICAgfVxyXG5cclxuICAgIG9uSGFuZGxlQ2xvc2UgKCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxldG9nZ2xlUGFzc3dvcmRWaXNpYmxpdHkgKCkge1xyXG4gICAgICAgIGNvbnN0IHsgaXNQYXNzd29yZFNob3duIH0gPSB0aGlzLnN0YXRlXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzUGFzc3dvcmRTaG93bjogIWlzUGFzc3dvcmRTaG93biB9KVxyXG4gICAgfTtcclxuXHJcbiAgICBoYW5kbGVTaG93ICgpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgb25IYW5kbGVDaGFuZ2VBbmRFbnRlciAoZSkge1xyXG4gICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJykge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXIgPSB7XHJcbiAgICAgICAgICAgICAgICB1c2VyTmFtZTogdGhpcy5zdGF0ZS5lbWFpbCxcclxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLnN0YXRlLm1vdF9kZV9wYXNzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxvZ2luKHVzZXIpLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndGVzdCcsIHJlcy51dGlsaXNhdGV1ci5pZF9yb2xlKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyczogcmVzXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzLnV0aWxpc2F0ZXVyLmlkX3JvbGUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIDxSZWRpcmVjdCB0bz0nL2FkbWluJyAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoaXN0b3J5LnB1c2goJy9hZG1pbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvYWRtaW4nKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uSGFuZGxlQ2xvc2UoKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnT2JqZWN0JywgSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgdXNlck5hbWU6IHRoaXMuc3RhdGUudXNlcnMudXRpbGlzYXRldXIubm9tIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uSGFuZGxlQ2hhbmdlTmFtZSAoZSkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlbWFpbDogZS50YXJnZXQudmFsdWUgfSlcclxuICAgICAgICAvLyB0aGlzLnNldFN0YXRlKHsgdXRpbGlzYXRldXI6IHsgZW1haWw6IGUudGFyZ2V0LnZhbHVlIH0gfSlcclxuICAgIH1cclxuXHJcbiAgICBvbkhhbmRsZUNoYW5nZVBhc3MgKGUpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbW90X2RlX3Bhc3NlOiBlLnRhcmdldC52YWx1ZSB9KVxyXG4gICAgICAgIC8vIHRoaXMuc2V0U3RhdGUoeyB1dGlsaXNhdGV1cjogeyBtb3RfZGVfcGFzc2U6IGUudGFyZ2V0LnZhbHVlIH0gfSlcclxuICAgIH1cclxuXHJcbiAgICBvblN1Ym1pdCAoZSkge1xyXG4gICAgICAgIC8vIGlmIChlLmtleSA9PT0gJ0VudGVyJykge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxyXG5cclxuICAgICAgICBjb25zdCB1c2VyID0ge1xyXG4gICAgICAgICAgICB1c2VyTmFtZTogdGhpcy5zdGF0ZS5lbWFpbCxcclxuICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuc3RhdGUubW90X2RlX3Bhc3NlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvZ2luKHVzZXIpLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlcykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VtYWlsJywgcmVzLnV0aWxpc2F0ZXVyLmlkX3JvbGUpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB1c2VyczogcmVzXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8gIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvYWRtaW4nKVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyZXMudXRpbGlzYXRldXIuaWRfcm9sZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICA8UmVkaXJlY3QgdG89Jy9hZG1pbicgLz5cclxuICAgICAgICAgICAgICAgICAgICAvLyBoaXN0b3J5LnB1c2goJy9hZG1pbicpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goJy9hZG1pbicpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uSGFuZGxlQ2xvc2UoKVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0ZXN0JywgdGhpcy5zdGF0ZS51c2Vycy51dGlsaXNhdGV1ci5ub20pXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgdXNlck5hbWU6IHRoaXMuc3RhdGUudXNlcnMudXRpbGlzYXRldXIubm9tIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC8vIHRoaXMucmVnaXN0ZXIodXNlcilcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIgKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxNb2RhbCBzaG93PXt0aGlzLnByb3BzLnNob3d9IG9uSGlkZT17dGhpcy5wcm9wcy5vbkhhbmRsZUNsb3NlfT5cclxuICAgICAgICAgICAgICAgIDxNb2RhbC5IZWFkZXIgY2xvc2VCdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPE1vZGFsLlRpdGxlPlBhZ2UgQ29ubmV4aW9uPC9Nb2RhbC5UaXRsZT5cclxuICAgICAgICAgICAgICAgIDwvTW9kYWwuSGVhZGVyPlxyXG4gICAgICAgICAgICAgICAgPE1vZGFsLkJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbm5lY3Rpb25Qb3BVcCBGb25jdGlvbkVudHJlcj17dGhpcy5vbkhhbmRsZUNoYW5nZUFuZEVudGVyfSBnZXRQYXNzPXt0aGlzLm9uSGFuZGxlQ2hhbmdlUGFzc30gZ2V0RW1haWw9e3RoaXMub25IYW5kbGVDaGFuZ2VOYW1lfSAvPlxyXG4gICAgICAgICAgICAgICAgPC9Nb2RhbC5Cb2R5PlxyXG4gICAgICAgICAgICAgICAgPE1vZGFsLkZvb3Rlcj5cclxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9J3NlY29uZGFyeScgb25DbGljaz17dGhpcy5vbkhhbmRsZUNsb3NlfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgQW5udWxlclxyXG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdmFyaWFudD0ncHJpbWFyeScgb25DbGljaz17dGhpcy5vblN1Ym1pdH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNlIGNvbm5lY3RlclxyXG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XHJcbiAgICAgICAgICAgIDwvTW9kYWw+XHJcblxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKE1vZGFsQ254Q29udGFpbmVyKVxyXG4iLCJpbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIHJlc29sdmVUb0xvY2F0aW9uID0gZnVuY3Rpb24gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcImZ1bmN0aW9uXCIgPyB0byhjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xudmFyIG5vcm1hbGl6ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xuXG52YXIgZm9yd2FyZFJlZlNoaW0gPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiA9IGZvcndhcmRSZWZTaGltO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG52YXIgTGlua0FuY2hvciA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgbmF2aWdhdGUgPSBfcmVmLm5hdmlnYXRlLFxuICAgICAgX29uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaW5uZXJSZWZcIiwgXCJuYXZpZ2F0ZVwiLCBcIm9uQ2xpY2tcIl0pO1xuXG4gIHZhciB0YXJnZXQgPSByZXN0LnRhcmdldDtcblxuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfb25DbGljaykgX29uQ2xpY2soZXZlbnQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhyb3cgZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBuYXZpZ2F0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gIH0gZWxzZSB7XG4gICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gIH1cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudCAqL1xuXG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmtBbmNob3IuZGlzcGxheU5hbWUgPSBcIkxpbmtBbmNob3JcIjtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmMiRjb21wb25lbnQgPSBfcmVmMi5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcmVmMiRjb21wb25lbnQgPT09IHZvaWQgMCA/IExpbmtBbmNob3IgOiBfcmVmMiRjb21wb25lbnQsXG4gICAgICByZXBsYWNlID0gX3JlZjIucmVwbGFjZSxcbiAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYyLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjb21wb25lbnRcIiwgXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeTtcbiAgICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKSwgY29udGV4dC5sb2NhdGlvbik7XG4gICAgdmFyIGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBuYXZpZ2F0ZTogZnVuY3Rpb24gbmF2aWdhdGUoKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHJlcGxhY2UgPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9XG4gICAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgdG9UeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKTtcbiAgdmFyIHJlZlR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuYW55XG4gIH0pXSk7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbiAgTGluay5wcm9wVHlwZXMgPSB7XG4gICAgaW5uZXJSZWY6IHJlZlR5cGUsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiB0b1R5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgZm9yd2FyZFJlZlNoaW0kMSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiQxID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmJDEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiQxID0gZm9yd2FyZFJlZlNoaW0kMTtcbn1cblxuZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc25hbWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGNsYXNzbmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaTtcbiAgfSkuam9pbihcIiBcIik7XG59XG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5cblxudmFyIE5hdkxpbmsgPSBmb3J3YXJkUmVmJDEoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZiRhcmlhQ3VycmVudCA9IF9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWYkYXJpYUN1cnJlbnQgPT09IHZvaWQgMCA/IFwicGFnZVwiIDogX3JlZiRhcmlhQ3VycmVudCxcbiAgICAgIF9yZWYkYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9PT0gdm9pZCAwID8gXCJhY3RpdmVcIiA6IF9yZWYkYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgaXNBY3RpdmVQcm9wID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGxvY2F0aW9uUHJvcCA9IF9yZWYubG9jYXRpb24sXG4gICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgc3R5bGVQcm9wID0gX3JlZi5zdHlsZSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImV4YWN0XCIsIFwiaXNBY3RpdmVcIiwgXCJsb2NhdGlvblwiLCBcInNlbnNpdGl2ZVwiLCBcInN0cmljdFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZVByb3AsIGFjdGl2ZUNsYXNzTmFtZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlUHJvcCwge30sIGFjdGl2ZVN0eWxlKSA6IHN0eWxlUHJvcDtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGwsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRvOiB0b0xvY2F0aW9uXG4gICAgfSwgcmVzdCk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0kMSAhPT0gZm9yd2FyZFJlZiQxKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKTtcbiAgTmF2TGluay5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgTGluay5wcm9wVHlwZXMsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFR5cGUsXG4gICAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICB9KTtcbn1cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLWRvbS5qcy5tYXBcbiIsIlxyXG5pbXBvcnQgeyBCdXR0b24sIE1vZGFsIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xyXG5cclxuaW1wb3J0IHsgbG9naW4sIHJlZ2lzdGVyIH0gZnJvbSAnLi4vZm9uY3Rpb25zL1VzZXJGdW5jdGlvbnMnXHJcblxyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCBJbnNjcmlwdGlvbkNvbnRhaW5lciBmcm9tICcuLi9jb250YWluZXIvaW5zY3JpcHRpb24tY29udGFpbmVyJ1xyXG5pbXBvcnQgSW5zY3JpcHRpb25BZHJlc3NDb250YWluZXIgZnJvbSAnLi4vY29udGFpbmVyL2FkcmVzcy1pbnNjcmlwdGlvbi1jb250YWluZXInXHJcbmltcG9ydCBRdWVzdGlvblZhbGlkYXRpb24gZnJvbSAnLi4vY29udGFpbmVyL3FzdC12YWxpZGF0aW9uJ1xyXG5pbXBvcnQgTW9kYWxDbnhDb250YWluZXIgZnJvbSAnLi4vY29udGFpbmVyL21vZGFsLWNueC1jb250YWluZXInXHJcbi8vIGltcG9ydCBJbnNjcmlwdGlvbkNvbnRhaW5lciBmcm9tICcuLi9jb250YWluZXIvaW5zY3JpcHRpb24tY29udGFpbmVyJ1xyXG5pbXBvcnQgeyBMaW5rLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcclxuXHJcbmNsYXNzIE5hdmJhckxpbmtzIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgc3RlcDogMSxcclxuICAgICAgICAgICAgcXMxOiAnJyxcclxuICAgICAgICAgICAgcXMyOiAnJyxcclxuICAgICAgICAgICAgcXMzOiAnJyxcclxuICAgICAgICAgICAgcXM0OiAnJyxcclxuICAgICAgICAgICAgcXM1OiAnJyxcclxuXHJcbiAgICAgICAgICAgIGlkX3JvbGU6IDAsXHJcbiAgICAgICAgICAgIG5vbTogJycsXHJcbiAgICAgICAgICAgIHByZW5vbTogJycsXHJcbiAgICAgICAgICAgIGFnZTogJycsXHJcbiAgICAgICAgICAgIGVtYWlsOiAnJyxcclxuICAgICAgICAgICAgbW90X2RlX3Bhc3NlOiAnJyxcclxuICAgICAgICAgICAgc2V4ZTogJ2lmJyxcclxuICAgICAgICAgICAgdGVsZXBob25lOiAnJyxcclxuICAgICAgICAgICAgbnVtZXJvX3J1ZTogJycsXHJcbiAgICAgICAgICAgIG5vbV9ydWU6ICcnLFxyXG4gICAgICAgICAgICBjb2RlX3Bvc3RhbDogJycsXHJcbiAgICAgICAgICAgIHZpbGxlOiAnJyxcclxuICAgICAgICAgICAgcHJvdmluY2U6ICcnLFxyXG4gICAgICAgICAgICBwYXlzOiAnJyxcclxuICAgICAgICAgICAgbnVtZXJvX2FwcHQ6ICcnLFxyXG5cclxuICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgIHNob3dJbnNjcmlwdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgIHVzZXI6IFtdLFxyXG4gICAgICAgICAgICBuZXdVc2VyOiBbXVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9uSGFuZGxlQ2hhbmdlTmFtZSA9IHRoaXMub25IYW5kbGVDaGFuZ2VOYW1lLmJpbmQodGhpcylcclxuXHJcbiAgICAgICAgdGhpcy5vbkhhbmRsZUNoYW5nZVBhc3MgPSB0aGlzLm9uSGFuZGxlQ2hhbmdlUGFzcy5iaW5kKHRoaXMpXHJcbiAgICAgICAgdGhpcy5oYW5kbGVTaG93ID0gdGhpcy5oYW5kbGVTaG93LmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLmhhbmRsZVNob3dJbnNjID0gdGhpcy5oYW5kbGVTaG93SW5zYy5iaW5kKHRoaXMpXHJcbiAgICAgICAgdGhpcy5vbkhhbmRsZUNsb3NlID0gdGhpcy5vbkhhbmRsZUNsb3NlLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLmhhbmRsZUNsb3NlSW5zYyA9IHRoaXMuaGFuZGxlQ2xvc2VJbnNjLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLmdldFZhbHVlcyA9IHRoaXMuZ2V0VmFsdWVzLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLmdldFZhbHVlc1JhZGlvID0gdGhpcy5nZXRWYWx1ZXNSYWRpby5iaW5kKHRoaXMpXHJcbiAgICAgICAgdGhpcy5vbkhhbmRsZUNoYW5nZUFuZEVudGVyID0gdGhpcy5vbkhhbmRsZUNoYW5nZUFuZEVudGVyLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLnNob3dTdGVwID0gdGhpcy5zaG93U3RlcC5iaW5kKHRoaXMpXHJcbiAgICAgICAgdGhpcy5uZXh0U3RlcCA9IHRoaXMubmV4dFN0ZXAuYmluZCh0aGlzKVxyXG4gICAgICAgIHRoaXMucHJldlN0ZXAgPSB0aGlzLnByZXZTdGVwLmJpbmQodGhpcylcclxuICAgIH1cclxuXHJcbiAgICBvblN1Ym1pdFJlZ2lzdGVyKGUpIHtcclxuICAgICAgICB0aGlzLmhhbmRsZUNsb3NlSW5zYygpXHJcbiAgICAgICAgY29uc29sZS5sb2coJ25ldyBVc2VyJywgdGhpcy5zdGF0ZSlcclxuICAgICAgICAvLyBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuXHJcbiAgICAgICAgY29uc3QgbmV3VXNlciA9IHtcclxuICAgICAgICAgICAgaWRfcm9sZTogdGhpcy5zdGF0ZS5pZF9yb2xlLFxyXG4gICAgICAgICAgICBub206IHRoaXMuc3RhdGUubm9tLFxyXG4gICAgICAgICAgICBwcmVub206IHRoaXMuc3RhdGUucHJlbm9tLFxyXG4gICAgICAgICAgICBhZ2U6IHRoaXMuc3RhdGUuYWdlLFxyXG4gICAgICAgICAgICBlbWFpbDogdGhpcy5zdGF0ZS5lbWFpbCxcclxuICAgICAgICAgICAgbW90X2RlX3Bhc3NlOiB0aGlzLnN0YXRlLm1vdF9kZV9wYXNzZSxcclxuICAgICAgICAgICAgc2V4ZTogdGhpcy5zdGF0ZS5zZXhlLFxyXG4gICAgICAgICAgICB0ZWxlcGhvbmU6IHRoaXMuc3RhdGUudGVsZXBob25lLFxyXG4gICAgICAgICAgICBudW1lcm9fcnVlOiB0aGlzLnN0YXRlLm51bWVyb19ydWUsXHJcbiAgICAgICAgICAgIG5vbV9ydWU6IHRoaXMuc3RhdGUubm9tX3J1ZSxcclxuICAgICAgICAgICAgY29kZV9wb3N0YWw6IHRoaXMuc3RhdGUuY29kZV9wb3N0YWwsXHJcbiAgICAgICAgICAgIHZpbGxlOiB0aGlzLnN0YXRlLnZpbGxlLFxyXG4gICAgICAgICAgICBwcm92aW5jZTogdGhpcy5zdGF0ZS5wcm92aW5jZSxcclxuICAgICAgICAgICAgcGF5czogdGhpcy5zdGF0ZS5wYXlzLFxyXG4gICAgICAgICAgICBudW1lcm9fYXBwdDogdGhpcy5zdGF0ZS5udW1lcm9fYXBwdFxyXG4gICAgICAgIH1cclxuICAgICAgICByZWdpc3RlcihuZXdVc2VyKS50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICAgIGlmIChyZXMpIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KCcgQmllbiBBam91dGVyJylcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0ZXN0JywgcmVzKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlcnM6IHJlc1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2xvc2VJbnNjKClcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndGVzdCcsIHRoaXMuc3RhdGUudXNlcnMudXRpbGlzYXRldXIubm9tKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHVzZXJOYW1lOiB0aGlzLnN0YXRlLnVzZXJzLnV0aWxpc2F0ZXVyLm5vbSB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAvLyB0aGlzLnJlZ2lzdGVyKHVzZXIpXHJcbiAgICB9XHJcblxyXG4gICAgbmV4dFN0ZXAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdzdGVwJywgdGhpcy5zdGF0ZS5zdGVwKVxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBzdGVwOiB0aGlzLnN0YXRlLnN0ZXAgKyAxXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBwcmV2U3RlcChlKSB7XHJcbiAgICAgICAgY29uc3QgeyBzdGVwIH0gPSB0aGlzLnN0YXRlXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHN0ZXA6IHN0ZXAgLSAxXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBzaG93U3RlcCgpIHtcclxuICAgICAgICAvLyBjb25zdCB7IHN0ZXAgfSA9IHRoaXMuc3RhdGVcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuc3RlcCA9PT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPEluc2NyaXB0aW9uQ29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2VSYWRpbz17dGhpcy5nZXRWYWx1ZXNSYWRpb31cclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2U9e3RoaXMuZ2V0VmFsdWVzfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrPXt0aGlzLm5leHRTdGVwfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5zdGVwID09PSAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICA8SW5zY3JpcHRpb25BZHJlc3NDb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2U9e3RoaXMuZ2V0VmFsdWVzfVxyXG4gICAgICAgICAgICAgICAgICAgIG5leHQ9e3RoaXMubmV4dFN0ZXB9XHJcbiAgICAgICAgICAgICAgICAgICAgYmFjaz17dGhpcy5wcmV2U3RlcH1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuc3RlcCA9PT0gMykge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG5cclxuICAgICAgICAgICAgICAgIDxRdWVzdGlvblZhbGlkYXRpb25cclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2U9e3RoaXMuZ2V0VmFsdWVzfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBiYWNrPXt0aGlzLnByZXZTdGVwfVxyXG4gICAgICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlU2hvdygpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgc2hvdzogdHJ1ZVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlU2hvd0luc2MoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHNob3dJbnNjcmlwdGlvbjogdHJ1ZVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgb25IYW5kbGVDbG9zZSgpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUNsb3NlSW5zYygpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgc2hvd0luc2NyaXB0aW9uOiBmYWxzZVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgb25TdWJtaXQoZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdlbWFpbCcsIHRoaXMuc3RhdGUudXRpbGlzYXRldXIpXHJcbiAgICAgICAgLy8gaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcblxyXG4gICAgICAgIGNvbnN0IHVzZXIgPSB7XHJcbiAgICAgICAgICAgIHVzZXJOYW1lOiB0aGlzLnN0YXRlLmVtYWlsLFxyXG4gICAgICAgICAgICBwYXNzd29yZDogdGhpcy5zdGF0ZS5tb3RfZGVfcGFzc2VcclxuICAgICAgICB9XHJcbiAgICAgICAgbG9naW4odXNlcikudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRW1haWwnKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlcnM6IHJlc1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHRoaXMub25IYW5kbGVDbG9zZSgpXHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Rlc3QnLCB0aGlzLnN0YXRlLnVzZXJzLnV0aWxpc2F0ZXVyLm5vbSlcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB1c2VyTmFtZTogdGhpcy5zdGF0ZS51c2Vycy51dGlsaXNhdGV1ci5ub20gfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLy8gdGhpcy5yZWdpc3Rlcih1c2VyKVxyXG4gICAgfVxyXG4gICAgLy8gfVxyXG5cclxuICAgIG9uSGFuZGxlQ2hhbmdlTmFtZShlKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVtYWlsOiBlLnRhcmdldC52YWx1ZSB9KVxyXG4gICAgICAgIC8vIHRoaXMuc2V0U3RhdGUoeyB1dGlsaXNhdGV1cjogeyBlbWFpbDogZS50YXJnZXQudmFsdWUgfSB9KVxyXG4gICAgfVxyXG5cclxuICAgIG9uSGFuZGxlQ2hhbmdlUGFzcyhlKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG1vdF9kZV9wYXNzZTogZS50YXJnZXQudmFsdWUgfSlcclxuICAgICAgICAvLyB0aGlzLnNldFN0YXRlKHsgdXRpbGlzYXRldXI6IHsgbW90X2RlX3Bhc3NlOiBlLnRhcmdldC52YWx1ZSB9IH0pXHJcbiAgICB9XHJcblxyXG4gICAgbG9nT3V0KGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndXNlcnRva2VuJylcclxuICAgICAgICBjb25zb2xlLmxvZygnZGlzY29ubmVjdGVkJylcclxuICAgICAgICBjb25zb2xlLmxvZyhsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpXHJcbiAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goJy8nKVxyXG4gICAgfVxyXG5cclxuICAgIG9uSGFuZGxlQ2hhbmdlQW5kRW50ZXIoZSkge1xyXG4gICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJykge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXIgPSB7XHJcbiAgICAgICAgICAgICAgICB1c2VyTmFtZTogdGhpcy5zdGF0ZS5lbWFpbCxcclxuICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLnN0YXRlLm1vdF9kZV9wYXNzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxvZ2luKHVzZXIpLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndGVzdCcsIHJlcy51dGlsaXNhdGV1ci5pZF9yb2xlKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyczogcmVzXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzLnV0aWxpc2F0ZXVyLmlkX3JvbGUgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIDxSZWRpcmVjdCB0bz0nL2FkbWluJyAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoaXN0b3J5LnB1c2goJy9hZG1pbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvYWRtaW4nKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uSGFuZGxlQ2xvc2UoKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnT2JqZWN0JywgSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgdXNlck5hbWU6IHRoaXMuc3RhdGUudXNlcnMudXRpbGlzYXRldXIubm9tIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldFZhbHVlcyhlKSB7XHJcbiAgICAgICAgLy8gIGNvbnNvbGUubG9nKCdzZXhlJywgZS50YXJnZXQudmFsdWUpXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IFtlLnRhcmdldC5uYW1lXTogZS50YXJnZXQudmFsdWUgfSlcclxuICAgIH1cclxuXHJcbiAgICBnZXRWYWx1ZXNSYWRpbyhlKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0Lm5hbWUgPT09ICdzZXhlJykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc2V4ZScsIGUudGFyZ2V0LnZhbHVlKVxyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2V4ZTogZS50YXJnZXQudmFsdWUgfSlcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3NleGUnLCB0aGlzLnN0YXRlLnNleGUpXHJcbiAgICAgICAgfSBlbHNlIGlmIChlLnRhcmdldC5uYW1lID09PSAnaWRfcm9sZScpIHsgdGhpcy5zZXRTdGF0ZSh7IGlkX3JvbGU6IGUudGFyZ2V0LnZhbHVlIH0pIH1cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5zdGF0ZS51dGlsaXNhdGV1ci5zZXhlKVxyXG4gICAgICAgIGNvbnN0IGxvZ2luUmVnTGluayA9IChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbGxhcHNlIG5hdmJhci1jb2xsYXBzZScgaWQ9J2JzLWV4YW1wbGUtbmF2YmFyLWNvbGxhcHNlLTEnPlxyXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT0nbmF2YmFyLW5hdiBtbC1hdXRvJz5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPSduYXYtaXRlbSBhY3RpdmUnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9J25hdi1saW5rJyBvbkNsaWNrPXt0aGlzLmhhbmRsZVNob3d9PlNlIGNvbm5lY3RlcjwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9J25hdi1pdGVtJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPSduYXYtbGluaycgb25DbGljaz17dGhpcy5oYW5kbGVTaG93SW5zY30+IFMnaW5zY3JpcmU8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICAgICAgY29uc3QgdXNlckxpbmsgPSAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2xsYXBzZSBuYXZiYXItY29sbGFwc2UnIGlkPSduYXZiYXJSZXNwb25zaXZlJz5cclxuICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9J25hdmJhci1uYXYgbWwtYXV0byc+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT0nbmF2LWl0ZW0gYWN0aXZlJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPSduYXZiYXItYnJhbmQnIGhyZWY9JyMnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9J3JvdW5kZWQtY2lyY2xlJyBzcmM9J3NyYy9pbWcvYXZhdGFyLmpwZycgd2lkdGg9JzMwJyBoZWlnaHQ9JzMwJyAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT0nbmF2LWl0ZW0gYWN0aXZlJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89Jy9wcm9maWwnIGNsYXNzTmFtZT0nbmF2LWxpbmsnPiB7bG9jYWxTdG9yYWdlLnVzZXJ0b2tlbiA/IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKS51dGlsaXNhdGV1ci5ub20gOiAnJ308L0xpbms+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT0nbmF2LWl0ZW0gYWN0aXZlJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89Jy9zZWFyY2gnIGNsYXNzTmFtZT0nbmF2LWxpbmsnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlcmNoZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9J25hdi1pdGVtIGFjdGl2ZSc+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9J25hdi1saW5rJyBvbkNsaWNrPXt0aGlzLmxvZ091dC5iaW5kKHRoaXMpfT5TZSBkZWNvbm5lY3RlcjwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbGxhcHNlIG5hdmJhci1jb2xsYXBzZScgaWQ9J25hdmJhclJlc3BvbnNpdmUnPlxyXG4gICAgICAgICAgICAgICAge2xvY2FsU3RvcmFnZS51c2VydG9rZW4gPyB1c2VyTGluayA6IGxvZ2luUmVnTGlua31cclxuICAgICAgICAgICAgICAgIDxNb2RhbENueENvbnRhaW5lciBzaG93PXt0aGlzLnN0YXRlLnNob3d9IG9uSGFuZGxlQ2xvc2U9e3RoaXMub25IYW5kbGVDbG9zZX0gLz5cclxuICAgICAgICAgICAgICAgIDxNb2RhbCBzaG93PXt0aGlzLnN0YXRlLnNob3dJbnNjcmlwdGlvbn0gb25IaWRlPXt0aGlzLmhhbmRsZUNsb3NlSW5zY30+XHJcbiAgICAgICAgICAgICAgICAgICAgPE1vZGFsLkhlYWRlciBjbG9zZUJ1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPE1vZGFsLlRpdGxlPlBhZ2UgSW5zY3JpcHRpb248L01vZGFsLlRpdGxlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvTW9kYWwuSGVhZGVyPlxyXG4gICAgICAgICAgICAgICAgICAgIDxNb2RhbC5Cb2R5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zaG93U3RlcCgpfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvTW9kYWwuQm9keT5cclxuICAgICAgICAgICAgICAgICAgICA8TW9kYWwuRm9vdGVyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9J3NlY29uZGFyeScgb25DbGljaz17dGhpcy5oYW5kbGVDbG9zZUluc2N9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQW5udWxlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PSdwcmltYXJ5JyBvbkNsaWNrPXt0aGlzLm9uU3VibWl0UmVnaXN0ZXIuYmluZCh0aGlzKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDcmVlciB2b3RyZSBjb21wdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XHJcbiAgICAgICAgICAgICAgICA8L01vZGFsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoTmF2YmFyTGlua3MpXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcblxyXG5mdW5jdGlvbiBOYXZiYXJUZXh0ICh7IHRpdGxlMSwgdGl0bGUyIH0pIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPExpbmsgdG89Jy8nIGNsYXNzTmFtZT0nbmF2YmFyLWJyYW5kJz5cclxuICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9J2xvZ28nIHNyYz0nc3JjL2ltZy9sb2dvLnBuZycgYWx0PScnIC8+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nbmFtZSc+e3RpdGxlMX08L3NwYW4+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0ndGl0cmUyJz57dGl0bGUyfTwvc3Bhbj5cclxuICAgICAgICA8L0xpbms+XHJcblxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBOYXZiYXJUZXh0XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0ICcuLi9uYXZiYXIuY3NzJ1xyXG5pbXBvcnQgTmF2YmFyTGlua3MgZnJvbSAnLi4vY29tcG9uZW50L25hdmJhci1saW5rcydcclxuaW1wb3J0IE5hdmJhclRleHQgZnJvbSAnLi4vY29tcG9uZW50L25hdmJhci10ZXh0J1xyXG5cclxuZnVuY3Rpb24gTmF2YmFyICgpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPG5hdiBjbGFzc05hbWU9J25hdmJhciBuYXZiYXItZXhwYW5kLWxnIG5hdmJhci1kYXJrIG5hdmJhci1maXhlZC10b3AnPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29udGFpbmVyJz5cclxuICAgICAgICAgICAgICAgIDxOYXZiYXJUZXh0IHRpdGxlMT0nUGV0cyBGcmllbmRseScgdGl0bGUyPSdEZXZlbmlyIFNpdHRlciA/JyAvPlxyXG4gICAgICAgICAgICAgICAgPE5hdmJhckxpbmtzIHBhcmFtMT0nU2UgY29ubmVjdGVyJyBwYXJhbTI9XCJTJ2luc2NyaXJlXCIgLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9uYXY+XHJcblxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBOYXZiYXJcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xyXG5cclxuY29uc3QgRGl2Qm91dG9ucyA9ICh7IGNsYXNzQ3NzLCB0aXRyZSB9KSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc0Nzc30+XHJcbiAgICAgICAgICAgIDxMaW5rIHRvPScvc2VhcmNoJz5cclxuICAgICAgICAgICAgICAgIDxCdXR0b24gdmFyaWFudD0nZGFuZ2VyIG10LTMnPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB7dGl0cmV9XHJcblxyXG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvTGluaz5cclxuXHJcbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0ndGV4dC1saWdodCBteC1hdXRvJz5FbiBzYXZvaXIgcGx1cyA8L3A+XHJcblxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IERpdkJvdXRvbnNcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4vLyBpbXBvcnQgSW1nQ29tcG9zYW50IGZyb20gJy4uL2NvbXBvbmVudC9pbWctY29tcG9zYW50J1xyXG5cclxuY29uc3QgSW1hZ2VUaXRyZSA9ICh7IGNsYXNzRGl2LCBzcmMsIGNsYXNzQ3NzLCB0aXRyZSB9KSA9PiAoXHJcblxyXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzRGl2fT5cclxuICAgICAgICA8aW1nIHNyYz17c3JjfSBjbGFzc05hbWU9e2NsYXNzQ3NzfSB3aWR0aD0nMjAwJyBoZWlnaHQ9JzIwMCcgLz5cclxuXHJcbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPScgcGwtc20tNSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyJz57dGl0cmV9PC9zcGFuPlxyXG5cclxuICAgIDwvZGl2PlxyXG5cclxuKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSW1hZ2VUaXRyZVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCBJbWFnZVRpdHJlIGZyb20gJy4uL2NvbXBvbmVudC9pbWFnZS10aXRyZSdcclxuXHJcbmNsYXNzIEltYWdlVGl0cmVDb21wb3NhbnQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IgKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpXHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGltYWdlczogW11cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyICgpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncm93IG1iLTMnPlxyXG4gICAgICAgICAgICAgICAgPEltYWdlVGl0cmUgY2xhc3NEaXY9J2NvbC1sZy00JyBzcmM9J3NyYy9pbWcvaW1hZ2Vfc2l0ZS9pY29uZS9sb2dvLWdhcmFudGllLnBuZycgY2xhc3NDc3M9J3JvdW5kZWQtY2lyY2xlIG14LWF1dG8gZC1ibG9jaycgdGl0cmU9J2xpc2V6IGxlcyBhdmlzIHbDqXJpZmnDqXMgZXQgY2hvaXNpc3NleiBsZSBnYXJkaWVuIHBhcmZhaXQnIC8+XHJcbiAgICAgICAgICAgICAgICA8SW1hZ2VUaXRyZSBjbGFzc0Rpdj0nY29sLWxnLTQnIHNyYz0nc3JjL2ltZy9pbWFnZV9zaXRlL2ljb25lL21vbmV5LWljb24tNzYucG5nJyBjbGFzc0Nzcz0ncm91bmRlZC1jaXJjbGUgbXgtYXV0byBkLWJsb2NrJyB0aXRyZT0ncsOpc2VydmVyIGV0IHBheWVyIGVuIHRvdXRlIHNlY3VyaXTDqSAgdmlhIGxlIHNpdGUgd2ViIG91IGwgYXBwbGljYXRpb24nIC8+XHJcbiAgICAgICAgICAgICAgICA8SW1hZ2VUaXRyZSBjbGFzc0Rpdj0nY29sLWxnLTQnIHNyYz0nc3JjL2ltZy9pbWFnZV9zaXRlL2ljb25lL2F2aXMucG5nJyBjbGFzc0Nzcz0ncm91bmRlZC1jaXJjbGUgbXgtYXV0byBkLWJsb2NrICcgdGl0cmU9J2JlbmVmaWNpZXIgZGUgbGEgZ2FyYW50aWUgcm92ZXIgZCB1bmUgYXNzaXN0YW5jZSAyNC83IGV0IGQgdW5lIHByb3RlY3Rpb24gZGUgcmVzZXJ2YXRpb24nIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEltYWdlVGl0cmVDb21wb3NhbnRcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5cclxuaW1wb3J0IEZvb3RlciBmcm9tICcuLi9jb21wb25lbnQvRm9vdGVyL0Zvb3RlcidcclxuaW1wb3J0IENhcm91c2VsQ29udGFpbmVyIGZyb20gJy4uL2NvbnRhaW5lci9jYXJvdXNlbC1jb250YWluZXInXHJcbmltcG9ydCBUaXRsZSBmcm9tICcuLi9jb21wb25lbnQvdGl0cmUtY29tcG9zYW50J1xyXG5pbXBvcnQgU3BhbkNvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQvc3Bhbi1jb21wb3NhbnQnXHJcbmltcG9ydCBOYXZiYXIgZnJvbSAnLi4vY29udGFpbmVyL25hdmJhci1jb250YWluZXInXHJcbmltcG9ydCBEaXZCb3V0b25zIGZyb20gJy4uL2NvbXBvbmVudC9kaXYtYm91dG9ucydcclxuaW1wb3J0IEltYWdlVGl0cmVDb21wb3NhbnQgZnJvbSAnLi4vY29udGFpbmVyL2ltYWdlLXRpdHJlLWNvbnRhaW5lcidcclxuaW1wb3J0IElucHV0Q29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudC9pbnB1dC1jb21wb25lbnQnXHJcblxyXG5jbGFzcyBGb3JtQ29udGFpbmVyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgdGl0cmVzOiBbXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcbiAgICAgICAgZmV0Y2goJ3RpdHJlcy5qc29uJywgeyBtZXRob2Q6ICdHRVQnIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRpdHJlczogcmVzcG9uc2UgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuXHJcbiAgICAgICAgICAgIDxkaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPG1haW4gaWQ9J2RpdkNvbnRhaW5lcic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJvdXNlbENvbnRhaW5lciAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Jsb2NrJz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nU3BhblRpdHJlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPk5vdXMgY29uc2lkw6lyb25zIHZvdHJlIGFuaW1hbCBjb21tZSB1biBtZW1icmUgZGUgbm90cmUgZmFtaWxsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9tYWluPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncm93IGJnLWRhcmsnPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUudGl0cmVzLm1hcCgodGV4dCwgaW5kZXgpID0+IDxEaXZCb3V0b25zIGNsYXNzQ3NzPSdoLTEwMCBwLTMgY29sLWxnLTQgdGV4dC1jZW50ZXIgJyB0aXRyZT17dGV4dC50aXRyZUJ0bn0ga2V5PXtpbmRleH0gLz4pfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPEltYWdlVGl0cmVDb21wb3NhbnQgLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naW5mb2xldHRyZURpdiBtdC0zJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT0naDEnPkxhaXNzZXogbm91cyB2b3VzIHByw6l2ZW5pciBkZXMgbm91dmVhdXTDqXM8L2gxPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3NOYW1lPSdoNic+UmVzdGV6IGluZm9ybcOpPC9oNj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRDb21wb25lbnQgY2xhc3NDc3M9J2Zvcm0tZ3JvdXAnIGNsYXNzSW5wdXQ9J2Zvcm0tY29udHJvbCcgdGV4dExhYmVsPSdFbnRyZXogdm90cmUgZW1haWwnIHR5cGU9J2VtYWlsJyBpZD0naW5mb2xldHRyZScgbmFtZT0naW5mb2xldHRyZScgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0Q29tcG9uZW50IGNsYXNzSW5wdXQ9J2J0biBidG4tb3V0bGluZS1kYW5nZXInIHR5cGU9J3N1Ym1pdCcgaWQ9J2luZm9sZXR0cmVCdXR0b24nIG5hbWU9J0Vudm95ZXIgJyB2YWx1ZT0nRW52b3llcicgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udGFpbmVyXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmNvbnN0IFNlbGVjdENvbXBvbmVudCA9ICh7IGNsYXNzQ3NzLCBjbGFzc0lucHV0LCB0ZXh0TGFiZWwsIGlkLCBuYW1lLCB2YWx1ZSwgb3B0aW9ucywgb25DaGFuZ2UgfSkgPT4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzQ3NzfT5cclxuICAgICAgICA8bGFiZWwgaHRtbEZvcj17aWR9Pnt0ZXh0TGFiZWx9PC9sYWJlbD5cclxuICAgICAgICA8c2VsZWN0IG5hbWU9e25hbWV9IHZhbHVlPXt2YWx1ZX0gb25DaGFuZ2U9e29uQ2hhbmdlfSBjbGFzc05hbWU9e2NsYXNzSW5wdXR9PlxyXG4gICAgICAgICAgICB7b3B0aW9ucy5tYXAoKG9wdGlvbiwgaW5kZXgpID0+IDxvcHRpb24gdmFsdWU9e29wdGlvbi52YWx1ZX0ga2V5PXtpbmRleH0+e29wdGlvbi5sYWJlbH08L29wdGlvbj4pfVxyXG4gICAgICAgIDwvc2VsZWN0PlxyXG4gICAgPC9kaXY+XHJcbilcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdENvbXBvbmVudFxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5jb25zdCBMaXN0SXRlbUNvbXBvbmVudCA9ICh7IHRleHQsIGNsYXNzTmFtZSB9KSA9PiAoXHJcbiAgICA8bGkgY2xhc3NOYW1lPXtjbGFzc05hbWV9Pnt0ZXh0fTwvbGk+XHJcbilcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExpc3RJdGVtQ29tcG9uZW50XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcbi8vKiBpbXBvcnQgSW1nQ29tcG9zYW50IGZyb20gJ2ltZy1jb21wb3NhbnQnXHJcblxyXG5jb25zdCBWaWduZXR0ZUNvbXBvbmVudCA9ICh7IHVybFBob3RvLCBjbGFzc05hbWUsIG5vbSwgcmF0aW5nLCBvbkNsaWNrUHJvZmlsLCBjbGFzc0lucHV0LCBjbGFzc0lucHV0Miwgb25DbGlja0Vudm95ZXIsIHRleHRCb3V0b25Qcm9maWwsIHRleHRCb3V0b25FbnZveWVyLCBzZXJ2aWNlc1NpdHRlciwgc2VydmljZXNUb3RhbCwgaWQsIGxpbmsgfSkgPT4gKFxyXG5cclxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxyXG4gICAgICAgIDxpbWcgY2xhc3NOYW1lPSdpbWctZmx1aWQgaW1nLXRodW1ibmFpbCByb3VuZGVkLWNpcmNsZSBtLTIwJyBzdHlsZT17eyBoZWlndGg6ICczMHZoJywgd2lkdGg6ICc3NSUnIH19IHNyYz17J2h0dHBzOi8vcGV0cy1mcmllbmRseS5oZXJva3VhcHAuY29tL2ltYWdlcy9pbWFnZXNfcHJvZmlsZXMvJyArIHVybFBob3RvfSBhbHQ9e3VybFBob3RvfSAvPlxyXG4gICAgICAgIDxoMiBjbGFzc05hbWU9JyB3LTI1IHAtMyBteC1hdXRvJz57bm9tfTwvaDI+XHJcbiAgICAgICAgPHVsIGNsYXNzTmFtZT0nbGlzdC1ncm91cCc+XHJcbiAgICAgICAgICAgIHsvKiB1bCAgYSBzb3J0aXIgZGFucyB1bmUgYXV0cmUgZnVuY3Rpb24gKi99XHJcbiAgICAgICAgICAgIHtzZXJ2aWNlc1NpdHRlci5tYXAoKGluZm9zLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gaW5mb3MgLSAxIGVzdCBlZ2FsIGEgbGluZGV4IG91IGNhIHNlIHRyb3V2ZSBkYW5zIGxhIGNvbnN0YW50ZSBzZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgLy8gU0kgQVBJIFBMQU5URSBDSEFOR0VSIERFU0NSSVBUSU9OX1NFUlZJQ0UgUE9VUiBERVNDUklQVElPTiwgRVQgTEUgVEFCTEVBVSBQT1VSIFVOIExPQ0FMIENIQU5HRVIgU0VSVklDRVNcclxuICAgICAgICAgICAgICAgIHJldHVybiA8bGkga2V5PXtpbmRleH0gY2xhc3NOYW1lPSdsaXN0LWdyb3VwLWl0ZW0gbGlzdC1ncm91cC1pdGVtLWRhbmdlcic+e3NlcnZpY2VzVG90YWxbaW5mb3MgLSAxXS5kZXNjcmlwdGlvbl9zZXJ2aWNlfSB7c2VydmljZXNUb3RhbFtpbmZvcyAtIDFdLnByaXhfc2VydmljZX08aSBjbGFzc05hbWU9J2ZhcyBmYS1kb2xsYXItc2lnbicgLz48L2xpPlxyXG4gICAgICAgICAgICB9KX1cclxuXHJcbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0nIHctMjUgcC0zIG14LWF1dG8nPntyYXRpbmd9PC9wPlxyXG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9J2J1dHRvbicgbmFtZT17aWR9IG9uQ2xpY2s9e29uQ2xpY2tQcm9maWx9IGNsYXNzTmFtZT17Y2xhc3NJbnB1dH0+e3RleHRCb3V0b25Qcm9maWx9IDwvYnV0dG9uPlxyXG4gICAgICAgICAgICB7LyogPGJ1dHRvbiB0eXBlPSdidXR0b24nIG5hbWU9e2lkfSBvbkNsaWNrPXtvbkNsaWNrRW52b3llcn0gY2xhc3NOYW1lPXtjbGFzc0lucHV0Mn0+e3RleHRCb3V0b25FbnZveWVyfTwvYnV0dG9uPiAqL31cclxuICAgICAgICA8L3VsPlxyXG5cclxuICAgIDwvZGl2PlxyXG5cclxuKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVmlnbmV0dGVDb21wb25lbnRcclxuLy8ge2J1dHRvbnMubWFwKChidXR0b24sIGluZGV4KSA9PiA8c3BhbiBrZXk9e2luZGV4fT48YnV0dG9uIG9uQ2xpY2s9e2J1dHRvbi5oYW5kbGVPbkNsaWNrfT57YnV0dG9uLmxhYmVsfTwvYnV0dG9uPjwvc3Bhbj4pfVxyXG4vLyBmYXIgZmEtaGVhcnRcclxuLy8gZmFzIGZhLXBhcGVyLXBsYW5lXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0ICcuLi9jc3MvbW9kYWwuY3NzJ1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIgKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5wcm9wcy5zaG93KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qIDxkaXYgY2xhc3NOYW1lPSdNb2RhbCc+XHJcbiAgICAgICAgICAgICAgICA8ZGl2Pnt0aGlzLnByb3BzLmNoaWxkcmVufTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5wcm9wcy5vbkhhbmRsZW9uQ2xvc2V9PkNsb3NlPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuKi9cclxuICAgICAgICByZXR1cm4gKFxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J01vZGFsIHNoYWRvdy1sZyBwLTMgbWItNSBiZy13aGl0ZSByb3VuZGVkIGJvcmRlciBib3JkZXItZGFuZ2VyJz5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtb2RhbC1kaWFsb2cnIHJvbGU9J2RvY3VtZW50Jz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbW9kYWwtY29udGVudCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtb2RhbC1oZWFkZXInPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT0ndy01MCBteC1hdXRvIG1vZGFsLXRpdGxlICc+QVRURU5USU9OPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtb2RhbC1ib2R5Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzc05hbWU9J214LWF1dG8nPnt0aGlzLnByb3BzLmNoaWxkcmVufTwvaDU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbW9kYWwtZm9vdGVyJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdidG4gYnRuLW91dGxpbmUtZGFuZ2VyIHctNTAnIG9uQ2xpY2s9e3RoaXMucHJvcHMub25IYW5kbGVvbkNsb3NlfT5DbG9zZTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5cclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xyXG5pbXBvcnQgSW5wdXRDb21wb25lbnQgZnJvbSAnY29tcG9uZW50L2lucHV0LWNvbXBvbmVudCdcclxuaW1wb3J0IFNlbGVjdENvbXBvbmVudCBmcm9tICdjb21wb25lbnQvc2VsZWN0LWNvbXBvbmVudCdcclxuaW1wb3J0IExpc3RJdGVtQ29tcG9uZW50IGZyb20gJ2NvbXBvbmVudC9saXN0LWl0ZW0tY29tcG9uZW50J1xyXG5pbXBvcnQgVmlnbmV0dGVDb21wb25lbnQgZnJvbSAnY29tcG9uZW50L3ZpZ25ldHRlLWNvbXBvbmVudCdcclxuaW1wb3J0IE1vZGFsIGZyb20gJ2NvbXBvbmVudC9tb2RhbCdcclxuXHJcbmltcG9ydCB7IHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG4vLyBpbXBvcnRlciBmaWNoaWVyIGNzc1xyXG5pbXBvcnQgJy4uL2Nzcy9yZWNoZXJjaGUuY3NzJ1xyXG5pbXBvcnQgeyBBbGVydCB9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCdcclxuLy8gaW1wb3J0IFByb2ZpbERlbWFuZGVQZXR0U2l0dGVyIGZyb20gJy4vcHJvZmlsLWRlbWFuZGUtcGV0dHNpdHRlcidcclxuXHJcbmNsYXNzIFJlY2hlcmNoZVBldHNpdHRlciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKVxyXG4gICAgICAgIC8vIHF1ZXN0aW9uIGEgcG9zZXIgYSBuYXNzaW0gdm9pciBsZXMgY3JpdGVyZXMgY29tbWUgaWwgc29udCBkYW5zIGxlIHJlcXVlc3QgPz8/P1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHNlcnZpY2VzUmVjaGVyY2hlcjogW10sXHJcbiAgICAgICAgICAgIC8vIGdhcmRlckNoZXpQZXRzaXR0ZXI6IG51bGwsXHJcbiAgICAgICAgICAgIC8vIGdhcmRlckNoZXpWb3VzOiBudWxsLFxyXG4gICAgICAgICAgICAvLyBwcm9tZW5hZGU6IG51bGwsXHJcbiAgICAgICAgICAgIG51bWVyb19ydWU6ICcnLFxyXG4gICAgICAgICAgICBub21fcnVlOiAnJyxcclxuICAgICAgICAgICAgY29kZV9wb3N0YWw6ICcnLFxyXG4gICAgICAgICAgICB2aWxsZTogJycsXHJcbiAgICAgICAgICAgIHBheXM6ICcnLFxyXG4gICAgICAgICAgICBkYXRlRGVidXQ6ICcnLFxyXG4gICAgICAgICAgICBkYXRlRmluOiAnJyxcclxuICAgICAgICAgICAgdHlwZUFuaW1hbDogJycsXHJcbiAgICAgICAgICAgIGluZm9sZXR0cmU6ICcnLFxyXG5cclxuICAgICAgICAgICAgcmVzdWx0YXRSZWNoZXJjaGU6IHRydWUsXHJcbiAgICAgICAgICAgIGluZm9zUmVjaGVyY2hlOiBbXSxcclxuICAgICAgICAgICAgcmVjaGVyY2hlOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVzdWx0YXQ6IFtdLFxyXG4gICAgICAgICAgICBwcm92aW5jZTogJycsXHJcbiAgICAgICAgICAgIHNlcnZpY2VzVG90YWw6IFtdLFxyXG4gICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgbWVzc2FnZTogJydcclxuXHJcbiAgICAgICAgICAgIC8vIGlkVXNlcjogZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaGFuZGxlQWRkT25DbGljayA9IHRoaXMuaGFuZGxlQWRkT25DbGljay5iaW5kKHRoaXMpXHJcbiAgICAgICAgdGhpcy5oYW5kbGVTYXZlT25DbGljayA9IHRoaXMuaGFuZGxlU2F2ZU9uQ2xpY2suYmluZCh0aGlzKVxyXG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKVxyXG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlU2VsZWN0ID0gdGhpcy5oYW5kbGVDaGFuZ2VTZWxlY3QuYmluZCh0aGlzKVxyXG4gICAgICAgIC8vIHRoaXMuaGFuZGxlQ2xpY2sgPSB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLmhhbmRsZVN1Ym1pdCA9IHRoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLmhhbmRsZUFmZmljaGVyU2l0dGVyT25DbGljayA9IHRoaXMuaGFuZGxlQWZmaWNoZXJTaXR0ZXJPbkNsaWNrLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLmhhbmRsZUVudm95ZXJEZW1hbmRlT25DbGljayA9IHRoaXMuaGFuZGxlRW52b3llckRlbWFuZGVPbkNsaWNrLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLnNob3dNb2RhbCA9IHRoaXMuc2hvd01vZGFsLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLm9uSGFuZGxlb25DbG9zZSA9IHRoaXMub25IYW5kbGVvbkNsb3NlLmJpbmQodGhpcylcclxuICAgIH1cclxuXHJcbiAgICBzaG93TW9kYWwoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNob3c6IHRydWUgfSlcclxuICAgIH07XHJcblxyXG4gICAgb25IYW5kbGVvbkNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93OiBmYWxzZSB9KVxyXG4gICAgfTtcclxuXHJcbiAgICAvKlxyXG4gICAgb25IYW5kbGVDbG9zZSAoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBvbkhhbmRsZVNob3cgKCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBzaG93OiB0cnVlXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuKi9cclxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIHJldHVybiBheGlvc1xyXG4gICAgICAgICAgICAuZ2V0KCdodHRwczovL3BldHMtZnJpZW5kbHkuaGVyb2t1YXBwLmNvbS9zZXJ2aWNlcy9yZWN1cGVyYXRpb24vdG91dCcpXHJcbiAgICAgICAgICAgIC8vIC50aGVuKHJlc3BvbnNlID0+IGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpKVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZXJ2aWNlID0gW11cclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEubWFwKChpbmZvLCBpbmRleCkgPT4gc2VydmljZS5wdXNoKGluZm8pKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NlcnZpY2VzJywgc2VydmljZSlcclxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZXJ2aWNlc3RvdGFsJywgSlNPTi5zdHJpbmdpZnkoc2VydmljZSkpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2VydmljZXNUb3RhbDogc2VydmljZSB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJldXIgcmVjaGVyY2hlOicsIGVycilcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVDaGFuZ2VTZWxlY3QoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgdHlwZUFuaW1hbDogZXZlbnQudGFyZ2V0LnZhbHVlIH0pXHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XHJcbiAgICAgICAgc3dpdGNoIChldmVudC50YXJnZXQuaWQpIHtcclxuICAgICAgICAgICAgY2FzZSAnZ2FyZGVyQ2hlelBldHNpdHRlcic6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNlcnZpY2VzUmVjaGVyY2hlclswXSA9IDFcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIGNhc2UgJ2dhcmRlckNoZXpWb3VzJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2VydmljZXNSZWNoZXJjaGVyWzBdID0gMlxyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgY2FzZSAnZGF0ZURlYnV0JzpcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBkYXRlRGVidXQ6IGV2ZW50LnRhcmdldC52YWx1ZSB9KVxyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgY2FzZSAnZGF0ZUZpbic6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZGF0ZUZpbjogZXZlbnQudGFyZ2V0LnZhbHVlIH0pXHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICBjYXNlICdwcm9tZW5hZGUnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuc2VydmljZXNSZWNoZXJjaGVyWzFdID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZXJ2aWNlc1JlY2hlcmNoZXIuc3BsaWNlKDEsIDEpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyB0aGlzLnN0YXRlLnNlcnZpY2VzUmVjaGVyY2hlclsxXSA9IDMgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHRoaXMuc2V0U3RhdGUoeyBwcm9tZW5hZGU6IDMgfSlcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIGNhc2UgJ251bWVyb1J1ZSc6XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhldmVudC50YXJnZXQudmFsdWUpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgbnVtZXJvX3J1ZTogZXZlbnQudGFyZ2V0LnZhbHVlIH0pXHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICBjYXNlICdub21SdWUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG5vbV9ydWU6IGV2ZW50LnRhcmdldC52YWx1ZSB9KVxyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgY2FzZSAnc2VjdGV1ckFjdGlvbic6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgY29kZV9wb3N0YWw6IGV2ZW50LnRhcmdldC52YWx1ZSB9KVxyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgY2FzZSAncHJvdmluY2UnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHByb3ZpbmNlOiBldmVudC50YXJnZXQudmFsdWUgfSlcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIGNhc2UgJ3ZpbGxlJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2aWxsZTogZXZlbnQudGFyZ2V0LnZhbHVlIH0pXHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICBjYXNlICdwYXlzJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBwYXlzOiBldmVudC50YXJnZXQudmFsdWUgfSlcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIGNhc2UgJ2luZm9sZXR0cmUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGluZm9sZXR0cmU6IGV2ZW50LnRhcmdldC52YWx1ZSB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVTdWJtaXQoZXZlbnQpIHtcclxuICAgICAgICByZXR1cm4gYXhpb3NcclxuICAgICAgICAgICAgLnBvc3QoJ2h0dHBzOi8vcGV0cy1mcmllbmRseS5oZXJva3VhcHAuY29tL3JlY2hlcmNoZScsIHtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlczogdGhpcy5zdGF0ZS5zZXJ2aWNlc1JlY2hlcmNoZXIsXHJcbiAgICAgICAgICAgICAgICBhZHJlc3NlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnVtZXJvX3J1ZTogdGhpcy5zdGF0ZS5ub21fcnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG5vbV9ydWU6IHRoaXMuc3RhdGUubm9tX3J1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjb2RlX3Bvc3RhbDogdGhpcy5zdGF0ZS5jb2RlX3Bvc3RhbCxcclxuICAgICAgICAgICAgICAgICAgICB2aWxsZTogdGhpcy5zdGF0ZS52aWxsZSxcclxuICAgICAgICAgICAgICAgICAgICBwcm92aW5jZTogdGhpcy5zdGF0ZS5wcm92aW5jZSxcclxuICAgICAgICAgICAgICAgICAgICBwYXlzOiB0aGlzLnN0YXRlLnBheXNcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC8vICAudGhlbihyZXNwb25zZSA9PiBjb25zb2xlLmxvZygncmVwb25zZSBhdmFudCBsYSBhc3NpZ25hdGlpb24nLCByZXNwb25zZS5kYXRhKSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHJlc3VsdGF0OiByZXNwb25zZS5kYXRhIH0pXHJcbiAgICAgICAgICAgICAgICAvKiBpZiAocmVzcG9uc2UuZGF0YS5sZW5ndGggPT09IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcmVzdWx0YXRSZWNoZXJjaGU6IGZhbHNlIH0pXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcmVzdWx0YXQ6IHJlc3BvbnNlLmRhdGEgfSlcclxuICAgICAgICAgICAgfSAqL1xyXG4gICAgICAgICAgICAgICAgLyogIGNvbnN0IGFycmF5UmVzdWx0YXQgPSBbXVxyXG4gICAgICAgICAgICByZXNwb25zZS5kYXRhLm1hcCgoaW5mbywgaW5kZXgpID0+IGFycmF5UmVzdWx0YXQucHVzaChpbmZvKSlcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYXJyYXlSZXN1bHRhdCkgKi9cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyZXVyIHJlY2hlcmNoZTonLCBlcnIpXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8qIGZldGNoKCdyZXN1bHRhdC1yZWNoZXJjaGUuanNvbicsIHsgbWV0aG9kOiAnR0VUJyB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5VGVzdCA9IFtdXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5yZXN1bHRhdFJlY2hlcmNoZSlcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnJlc3VsdGF0UmVjaGVyY2hlLm1hcCgoaW5mbywgaW5kZXgpID0+IGFycmF5VGVzdC5wdXNoKGluZm8pKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYXJyYXlUZXN0KVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHJlc3VsdGF0OiBhcnJheVRlc3QgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKi9cclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVBZGRPbkNsaWNrKCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyByZXN1bHRhdFJlY2hlcmNoZTogdHJ1ZSB9KVxyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZVNhdmVPbkNsaWNrKCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyByZXN1bHRhdFJlY2hlcmNoZTogZmFsc2UgfSlcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVBZmZpY2hlclNpdHRlck9uQ2xpY2soZXZlbnQpIHtcclxuICAgICAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpICYmIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKS51dGlsaXNhdGV1ci5pZF9yb2xlID09PSAzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubWVzc2FnZSA9ICdWb3VzIGRldmVzIGV0cmUgdW4gcHJvcHJpZXRhaXJlIHBvdXIgdXRpbGlzZXIgbm90cmVzIHNlcnZpY2VzIGRlIHJlY2hlcmNoZSAnXHJcbiAgICAgICAgICAgIHRoaXMuc2hvd01vZGFsKClcclxuICAgICAgICAgICAgLy8gYWxlcnQoJ1ZvdXMgZGV2ZXMgZXRyZSB1biBwcm9wcmlldGFpcmUgcG91ciB1dGlsaXNlciBub3RyZXMgc2VydmljZXMgZGUgcmVjaGVyY2hlICcpXHJcbiAgICAgICAgICAgIC8vIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvJylcclxuICAgICAgICB9IGVsc2UgaWYgKCFsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5tZXNzYWdlID0gJ1ZldWlsbGV6IHZvdXMgY29ubmVjdGVyIG91IGluc2NyaXJlIHBvdXIgY29udGludWVyJ1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZGFucyBsZSBpZiBub24gdXNlcicpXHJcbiAgICAgICAgICAgIHRoaXMuc2hvd01vZGFsKClcclxuXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgYWxlcnQoJ3ZldWlsbGV6IHZvdXMgY29uZWN0ZXIgb3UgSU5TQ1JJUkUgUG91ciBjb250aW51ZXIgYSBwcm9maXRlciBkZSBub3RyZXMgc2VybnZpY2VzIHN2cCcpXHJcbiAgICAgICAgfSBlbHNlIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykgJiYgSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLnV0aWxpc2F0ZXVyLmlkX3JvbGUgPT09IDIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5zdGF0ZS5yZXN1bHRhdFtldmVudC50YXJnZXQubmFtZV0pXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc3RhdGUuZGF0ZURlYnV0KVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnN0YXRlLmRhdGVGaW4pXHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZXJ2aWNlUmVjaGVyY2hlJywgSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZS5zZXJ2aWNlc1JlY2hlcmNoZXIpKVxyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZGF0ZURlYnV0JywgSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZS5kYXRlRGVidXQpKVxyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZGF0ZUZpbicsIEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUuZGF0ZUZpbikpXHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzaXR0ZXInLCBKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlLnJlc3VsdGF0W2V2ZW50LnRhcmdldC5uYW1lXSkpXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvZGVtYW5kZScpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdzaXR0ZXInKVxyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnbG9jYWwgU3RvcmFnZTonLCBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzaXR0ZXInKSkpXHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlRW52b3llckRlbWFuZGVPbkNsaWNrKGV2ZW50KSB7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3NpdHRlcicsIEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUucmVzdWx0YXRbZXZlbnQudGFyZ2V0Lm5hbWVdKSlcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3QgVFlQRUFOSU1BTCA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDaGllbicsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ0NoaWVuICdcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDaGF0JyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiAnQ2hhdCdcclxuICAgICAgICAgICAgfV1cclxuXHJcbiAgICAgICAgLyogY29uc3Qgc2VydmljZXNUb3RhbCA9IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWQ6IDEsXHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1Byb21lbmFkZScsXHJcbiAgICAgICAgICAgICAgICBwcml4X3NlcnZpY2U6IDIwXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGlkOiAyLFxyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdHYXJkZXIgYSBsYSBtYWlzb24nLFxyXG4gICAgICAgICAgICAgICAgcHJpeF9zZXJ2aWNlOiA0NVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBpZDogMyxcclxuICAgICAgICAgICAgICAgIC8vID8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/IGVzdCBjZSBxdWUgamUgcGV1eCBjb3JyaWdlciBjYVxyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdHYXJkZXIgY2hleiB2b3VzICcsXHJcbiAgICAgICAgICAgICAgICBwcml4X3NlcnZpY2U6IDE1XHJcbiAgICAgICAgICAgIH1dICovXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG5pdmVhdVBldFNpdHRlcihuaXZlYXUpIHtcclxuICAgICAgICAgICAgbGV0IG5pdmVhdVNpdHRlciA9ICcnXHJcbiAgICAgICAgICAgIGlmIChuaXZlYXUgPiAwICYmIG5pdmVhdSA8IDUwKSB7XHJcbiAgICAgICAgICAgICAgICBuaXZlYXVTaXR0ZXIgPSAnRGVidXRhbnQnXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobml2ZWF1ID49IDUwICYmIG5pdmVhdSA8IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgbml2ZWF1U2l0dGVyID0gJ05vcm1hbCdcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChuaXZlYXUgPj0gMTAwICYmIG5pdmVhdSA8IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgbml2ZWF1U2l0dGVyID0gJ0ludGVybWVkaWFyZSdcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChuaXZlYXUgPj0gMjAwICYmIG5pdmVhdSA8IDQwMCkge1xyXG4gICAgICAgICAgICAgICAgbml2ZWF1U2l0dGVyID0gJ1Byb2ZmZXNpb25lbCdcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChuaXZlYXUgPj0gNDAwKSB7XHJcbiAgICAgICAgICAgICAgICBuaXZlYXVTaXR0ZXIgPSAnRXhwZXJ0J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBuaXZlYXVTaXR0ZXJcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3N0YXRlIDonLCB0aGlzLnN0YXRlKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjb2RlcG9zdGFsJywgdGhpcy5zdGF0ZS5jb2RlX3Bvc3RhbC5sZW5ndGgpXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPSdkaXZQdWJsaWNpdGUnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdncmV5Ym94ZGl2Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT0naDEnPkdhZ25leiB0ZW1wcyBldCB0cmFucXVpbGl0w6kgZCdlc3ByaXQuIFJlY2hlcmNoZXogY2UgcXUnaWwgdm91cyBmYXV0LCBvbiBzJ29jY3VwZSBkdSByZXN0ZSEgPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT0ndy0yNSBwLTMgbXgtYXV0byc+UmVjaGVyY2hlIFBldHNpdHRlcjwvaDE+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndy01MCBwLTMgbXgtYXV0byBpbWctZmx1aWQgaW1nLXRodW1ibmFpbCc+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dENvbXBvbmVudCBjbGFzc0Nzcz0nZm9ybS1jaGVjaycgY2xhc3NJbnB1dD0nZm9ybS1mb3JtLWNoZWNrLWlucHV0JyBsYWJlbENsYXNzPSdmb3JtLWNoZWNrLWxhYmVsJyB0eXBlPSdyYWRpbycgdGV4dExhYmVsPSdHYXJkZXIgQ2hleiBsZSBQZXRTaXR0ZXInIGlkPSdnYXJkZXJDaGV6UGV0c2l0dGVyJyBuYW1lPSdnYXJkZU1haXNvbicgdmFsdWU9e3RoaXMuc3RhdGUuZ2FyZGVyQ2hlelBldHNpdHRlcn0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dENvbXBvbmVudCBjbGFzc0Nzcz0nZm9ybS1jaGVjaycgY2xhc3NJbnB1dD0nZm9ybS1mb3JtLWNoZWNrLWlucHV0JyBsYWJlbENsYXNzPSdmb3JtLWNoZWNrLWxhYmVsJyB0eXBlPSdyYWRpbycgdGV4dExhYmVsPSdHYXJkZXIgY2hleiB2b3VzJyBpZD0nZ2FyZGVyQ2hlelZvdXMnIG5hbWU9J2dhcmRlTWFpc29uJyB2YWx1ZT17dGhpcy5zdGF0ZS5nYXJkZXJDaGV6Vm91c30gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dENvbXBvbmVudCBjbGFzc0Nzcz0nZm9ybS1jaGVjaycgY2xhc3NJbnB1dD0nZm9ybS1mb3JtLWNoZWNrLWlucHV0JyBsYWJlbENsYXNzPSdmb3JtLWNoZWNrLWxhYmVsJyB0eXBlPSdjaGVja2JveCcgdGV4dExhYmVsPSdQcm9tZW5hZGUnIGlkPSdwcm9tZW5hZGUnIG5hbWU9J1Byb21lbmFkZScgdmFsdWU9e3RoaXMuc3RhdGUucHJvbWVuYWRlfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPElucHV0Q29tcG9uZW50IGNsYXNzQ3NzPSdmb3JtLWdyb3VwJyBjbGFzc0lucHV0PSdmb3JtLWNvbnRyb2wnIHRleHRMYWJlbD0nRGF0ZSBkZSBkZWJ1dCcgdHlwZT0nZGF0ZScgaWQ9J2RhdGVEZWJ1dCcgbmFtZT0nZGF0ZURlYnV0JyBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPElucHV0Q29tcG9uZW50IGNsYXNzQ3NzPSdmb3JtLWdyb3VwJyBjbGFzc0lucHV0PSdmb3JtLWNvbnRyb2wnIHRleHRMYWJlbD0nRGF0ZSBkZSBmaW4nIHR5cGU9J2RhdGUnIGlkPSdkYXRlRmluJyBuYW1lPSdkYXRlRmluJyBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPElucHV0Q29tcG9uZW50IGNsYXNzQ3NzPSdmb3JtLWdyb3VwJyBjbGFzc0lucHV0PSdmb3JtLWNvbnRyb2wnIHRleHRMYWJlbD0nTnVtZXJvJyB0eXBlPSdudW1iZXInIGlkPSdudW1lcm9SdWUnIG5hbWU9J251bWVybycgbWluPXswfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPElucHV0Q29tcG9uZW50IGNsYXNzQ3NzPSdmb3JtLWdyb3VwJyBjbGFzc0lucHV0PSdmb3JtLWNvbnRyb2wnIHRleHRMYWJlbD0nTm9tIGRlIGxhIHJ1ZScgdHlwZT0ndGV4dCcgaWQ9J25vbVJ1ZScgbmFtZT0nbm9tIGRlIGxhIHJ1ZScgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dENvbXBvbmVudCBjbGFzc0Nzcz0nZm9ybS1ncm91cCcgY2xhc3NJbnB1dD0nZm9ybS1jb250cm9sJyB0ZXh0TGFiZWw9J0NvZGUgcG9zdGFsJyB0eXBlPSd0ZXh0JyBpZD0nc2VjdGV1ckFjdGlvbicgbmFtZT0nc2VjdGV1ckFjdGlvbicgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dENvbXBvbmVudCBjbGFzc0Nzcz0nZm9ybS1ncm91cCcgY2xhc3NJbnB1dD0nZm9ybS1jb250cm9sJyB0ZXh0TGFiZWw9J1ZpbGxlJyB0eXBlPSd0ZXh0JyBpZD0ndmlsbGUnIG5hbWU9J3ZpbGxlJyBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPElucHV0Q29tcG9uZW50IGNsYXNzQ3NzPSdmb3JtLWdyb3VwJyBjbGFzc0lucHV0PSdmb3JtLWNvbnRyb2wnIHRleHRMYWJlbD0nUHJvdmluY2UnIHR5cGU9J3RleHQnIGlkPSdwcm92aW5jZScgbmFtZT0ncHJvdmluY2UnIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPElucHV0Q29tcG9uZW50IGNsYXNzQ3NzPSdmb3JtLWdyb3VwJyBjbGFzc0lucHV0PSdmb3JtLWNvbnRyb2wnIHRleHRMYWJlbD0ncGF5cycgdHlwZT0ndGV4dCcgaWQ9J3BheXMnIG5hbWU9J3BheXMnIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0Q29tcG9uZW50IGNsYXNzQ3NzPSdmb3JtLWdyb3VwJyBjbGFzc0lucHV0PSdmb3JtLWNvbnRyb2wnIHRleHRMYWJlbD0nVHlwZSBkZSBhbmltYWw6JyBpZD0ndHlwZUFuaW1hbCcgbmFtZT0nVHlwZUFuaW1hbCcgb3B0aW9ucz17VFlQRUFOSU1BTH0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlU2VsZWN0fSB2YWx1ZT17dGhpcy5zdGF0ZS50eXBlQW5pbWFsfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dENvbXBvbmVudCBjbGFzc0lucHV0PSdidG4gYnRuLW91dGxpbmUtc3VjY2VzcycgdHlwZT0nc3VibWl0JyBpZD0ncmVjaGVyY2hlcicgbmFtZT0nUmVjaGVyY2hlciAnIHZhbHVlPSdyZWNoZXJjaGVyJyBvbkNsaWNrPXt0aGlzLmhhbmRsZVN1Ym1pdH0gLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPE1vZGFsIG9uSGFuZGxlb25DbG9zZT17dGhpcy5vbkhhbmRsZW9uQ2xvc2V9IHNob3c9e3RoaXMuc3RhdGUuc2hvd30+e3RoaXMuc3RhdGUubWVzc2FnZX08L01vZGFsPlxyXG4gICAgICAgICAgICAgICAgey8qIDxidXR0b24gb25DbGljaz17ZSA9PiB7IHRoaXMuc2hvd01vZGFsKCkgfX0+IHNob3cgTW9kYWw8L2J1dHRvbj4gKi99XHJcblxyXG4gICAgICAgICAgICAgICAge3RoaXMuc3RhdGUucmVzdWx0YXRSZWNoZXJjaGUgPyAnJyA6IDxoMSBjbGFzc05hbWU9J3RleHQtZGFuZ2VyJz5BdWN1biBzaXR0ZXIgbidhIMOpdMOpIHJldHJvdXbDqSBzZWxvbiB2b3MgY3JpdMOocmVzLiBWZXVpbGxleiBjaGFuZ2VyIHZvcyBjcml0w6hyZXMgZGUgc8OpbGVjdGlvbiBvdSBub3VzIGNvbnRhY3RlcjwvaDE+fVxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jvdyc+XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUucmVzdWx0YXQgPyB0aGlzLnN0YXRlLnJlc3VsdGF0Lm1hcCgocmVzdWx0YXQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRhdC51cmxfcGhvdG8gPT09IG51bGwgJiYgcmVzdWx0YXQuc2V4ZSA9PT0gJ21hc2N1bGluJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0YXQudXJsX3Bob3RvID0gJ2ltYWdlX3Byb2ZpbGVfZGVmYXVsdF9ob21tZS5qcGcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0YXQudXJsX3Bob3RvID09PSBudWxsICYmIHJlc3VsdGF0LnNleGUgPT09ICdmZW1pbmluJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0YXQudXJsX3Bob3RvID0gJ2ltYWdlX3Byb2ZpbGVfZGVmYXVsdF9mZW1tZS5qcGcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxWaWduZXR0ZUNvbXBvbmVudCB1cmxQaG90bz17cmVzdWx0YXQudXJsX3Bob3RvfSBub209e3Jlc3VsdGF0Lm5vbX0gcmF0aW5nPXtuaXZlYXVQZXRTaXR0ZXIocmVzdWx0YXQucmF0aW5nKX0gY2xhc3NOYW1lPSdjb2wtbGctNCBtdC0zICcga2V5PXtpbmRleH0gb25DbGlja1Byb2ZpbD17dGhpcy5oYW5kbGVBZmZpY2hlclNpdHRlck9uQ2xpY2t9IG9uQ2xpY2tFbnZveWVyPXt0aGlzLmhhbmRsZUVudm95ZXJEZW1hbmRlT25DbGlja30gY2xhc3NJbnB1dD0nZmFzIGZhLWhlYXJ0IGJ0biBidG4tb3V0bGluZS1kYW5nZXIgdy0xMDAgcC0zIG14LWF1dG8nIGNsYXNzSW5wdXQyPSdmYXMgZmEtcGFwZXItcGxhbmUgYnRuIGJ0bi1vdXRsaW5lLXN1Y2Nlc3MgbXgtYXV0bycgdGV4dEJvdXRvblByb2ZpbD0nQWNjZWRlciBhdSBQcm9maWwnIHRleHRCb3V0b25FbnZveWVyPSdFbnZveWVyIHVuZSBkZW1hbmRlJyBzZXJ2aWNlc1RvdGFsPXt0aGlzLnN0YXRlLnNlcnZpY2VzVG90YWx9IHNlcnZpY2VzU2l0dGVyPXt0aGlzLnN0YXRlLnNlcnZpY2VzUmVjaGVyY2hlcn0gaWQ9e2luZGV4fSBsaW5rPScvZGVtYW5kZScgLz5cclxuICAgICAgICAgICAgICAgICAgICB9KSA6ICcnfVxyXG5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9J2RpdlBsdWJpY2l0ZTInPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9J3ctNTAgcC0zIG14LWF1dG8gaDEnPkRlcyBzZXJ2aWNlcyBzdXIgbWVzdXJlIHBvdXIgdW4gYW5pbWFsIGQnZXhlcHRpb24gPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncm93IGRpdkFubm9uY2UnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLWxnLTQgbXgtYXV0byBib3JkZXIgYm9yZGVyLWRhbmdlciByb3VuZGVkIHNlcnZpY2VQcm9wb3Nlcyc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1Db21wb25lbnQgdGV4dD0nRmFpdGVzIGdhcmRlciB2b3RyZSBhbmltYWwgw6Agdm90cmUgZG9taWNpbGUgb3Ugw6AgY2VsdWkgZHUgUGV0IFNpdHRlcicgY2xhc3NOYW1lPSdmYXMgZmEtY2hlY2snIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1Db21wb25lbnQgdGV4dD0nUGFydGV6IMOgIHZvdHJlIHJlbmRlei12b3VzIHNhbnMgdm91cyBzb3VjaWVyIGRlIGxhIHByb21lbmFkZSBkZSB2b3RyZSBjaGllbicgY2xhc3NOYW1lPSdmYXMgZmEtY2hlY2snIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1Db21wb25lbnQgdGV4dD0nQmVzb2luIGRlIGZsZXhpYmlsaXTDqT8gQ2hvaXNpc3NleiBsZXMgaG9yYWlyZXMgZXQgcMOpcmlvZGVzIHF1aSB2b3VzIGNvbnZpZW5uZW50JyBjbGFzc05hbWU9J2ZhcyBmYS1jaGVjaycgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtbGctNCBteC1hdXRvIGJvcmRlciBib3JkZXItZGFuZ2VyIHJvdW5kZWQgc2VydmljZVByb3Bvc2VzJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiBNRVRUUkUgVU4gSUNPTkUgREFOUyBMQVZBTlQgREUgTEVTIExJIFBPVVIgTEEgUFVCTElDSVRFUiAqL31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbUNvbXBvbmVudCB0ZXh0PSdUb3VzIGxlcyBub3V2ZWF1eCBnYXJkaWVucyBwYXNzZW50IHVuZSB2w6lyaWZpY2F0aW9uIGRlcyBhbnTDqWPDqWRlbnRzIGRlIGJhc2UnIGNsYXNzTmFtZT0nZmFzIGZhLWNoZWNrJyAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtQ29tcG9uZW50IHRleHQ9J1RvdXMgbGVzIGdhcmRpZW5zIGZvdXJuaXNzZW50IHVuIHByb2ZpbCBkw6l0YWlsbMOpIGV0IGRlcyBpbmZvcm1hdGlvbnMgcGVyc29ubmVsbGVzICcgY2xhc3NOYW1lPSdmYXMgZmEtY2hlY2snIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1Db21wb25lbnQgdGV4dD0nVG91cyBsZXMgUGV0IFNpdHRlciBzb250IGFncsOpw6lzIHBhciBub3RyZSDDqXF1aXBlIGRlIHNww6ljaWFsaXN0ZXMgY2hleiBQZXRzIEZyaWVuZGx5JyBjbGFzc05hbWU9J2ZhcyBmYS1jaGVjaycgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdpbmZvbGV0dHJlRGl2IG10LTMnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9J2gxJz5MYWlzc2V6IG5vdXMgdm91cyBwcsOpdmVuaXIgZGUgbm9zIG5vdXZlYXV0w6lzPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3NOYW1lPSdoNic+UmVzdGV6IGluZm9ybcOpPC9oNj5cclxuICAgICAgICAgICAgICAgICAgICA8Zm9ybT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0Q29tcG9uZW50IGNsYXNzQ3NzPSdmb3JtLWdyb3VwJyBjbGFzc0lucHV0PSdmb3JtLWNvbnRyb2wnIHRleHRMYWJlbD0nRW50cmV6IHZvdHJlIGVtYWlsJyB0eXBlPSdlbWFpbCcgaWQ9J2luZm9sZXR0cmUnIG5hbWU9J2luZm9sZXR0cmUnIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0Q29tcG9uZW50IGNsYXNzSW5wdXQ9J2J0biBidG4tb3V0bGluZS1kYW5nZXInIHR5cGU9J3N1Ym1pdCcgaWQ9J2luZm9sZXR0cmVCdXR0b24nIG5hbWU9J0Vudm95ZXIgJyB2YWx1ZT0nRW52b3llcicgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKFJlY2hlcmNoZVBldHNpdHRlcilcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgRm9ybURhdGEgZnJvbSAnZm9ybS1kYXRhJ1xyXG5pbXBvcnQgeyBMaW5rLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcclxuaW1wb3J0ICcuLi9jc3MvcHJvZmlsLmNzcydcclxuaW1wb3J0IElucHV0Q29tcG9uZW50IGZyb20gJ2NvbXBvbmVudC9pbnB1dC1jb21wb25lbnQnXHJcbmltcG9ydCBMaXN0SXRlbUNvbXBvbmVudCBmcm9tICdjb21wb25lbnQvbGlzdC1pdGVtLWNvbXBvbmVudCdcclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xyXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdyZWFjdC1ib290c3RyYXAnXHJcblxyXG5jbGFzcyBQcm9maWxlIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKClcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICB1c2VyOiBbXSxcclxuICAgICAgICAgICAgYWRkcmVzczogW10sXHJcbiAgICAgICAgICAgIG5vbTogJycsXHJcbiAgICAgICAgICAgIHVybEltZzogJycsXHJcbiAgICAgICAgICAgIHByZW5vbTogJycsXHJcbiAgICAgICAgICAgIGFnZTogJycsXHJcbiAgICAgICAgICAgIGVtYWlsOiAnJyxcclxuICAgICAgICAgICAgc2V4ZTogJycsXHJcbiAgICAgICAgICAgIHRlbGVwaG9uZTogJycsXHJcbiAgICAgICAgICAgIGVzdF92YWxpZGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBzZWxlY3RlZEZpbGU6ICcnLFxyXG4gICAgICAgICAgICBlcnJvcnM6IHt9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZmlsZVNlbGVjdGVkID0gdGhpcy5maWxlU2VsZWN0ZWQuYmluZCh0aGlzKVxyXG4gICAgICAgIHRoaXMuZmlsZVVwbG9hZCA9IHRoaXMuZmlsZVVwbG9hZC5iaW5kKHRoaXMpXHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgLy8gY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UudXNlcnRva2VuXHJcbiAgICAgICAgLy8gY29uc3QgZGVjb2RlZCA9IGp3dGRlY29kZSh0b2tlbilcclxuICAgICAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgdXNlcjogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLnV0aWxpc2F0ZXVyLFxyXG4gICAgICAgICAgICAgICAgYWRkcmVzczogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLmFkcmVzc2UsXHJcbiAgICAgICAgICAgICAgICBub206IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKS51dGlsaXNhdGV1ci5ub20sXHJcbiAgICAgICAgICAgICAgICBwcmVub206IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKS51dGlsaXNhdGV1ci5wcmVub20sXHJcbiAgICAgICAgICAgICAgICBhZ2U6IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKS51dGlsaXNhdGV1ci5hZ2UsXHJcbiAgICAgICAgICAgICAgICBzZXhlOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSkudXRpbGlzYXRldXIuc2V4ZSxcclxuICAgICAgICAgICAgICAgIHRlbGVwaG9uZTogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLnV0aWxpc2F0ZXVyLnRlbGVwaG9uZSxcclxuICAgICAgICAgICAgICAgIGVzdF92YWxpZGU6IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKS51dGlsaXNhdGV1ci5lc3RfdmFsaWRlLFxyXG4gICAgICAgICAgICAgICAgZW1haWw6IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKS51dGlsaXNhdGV1ci5lbWFpbCxcclxuICAgICAgICAgICAgICAgIHVybEltZzogJ2h0dHBzOi8vcGV0cy1mcmllbmRseS5oZXJva3VhcHAuY29tL2ltYWdlcy9pbWFnZXNfcHJvZmlsZXMvJyArIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKS51dGlsaXNhdGV1ci51cmxfcGhvdG9cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCgnLycpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZpbGVTZWxlY3RlZChlKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkRmlsZTogZS50YXJnZXQuZmlsZXNbMF1cclxuICAgICAgICB9KVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGUudGFyZ2V0LmZpbGVzWzBdKVxyXG4gICAgfVxyXG5cclxuICAgIGZpbGVVcGxvYWQoZSkge1xyXG4gICAgICAgIGNvbnN0IGltYWdlID0gdGhpcy5zdGF0ZS5zZWxlY3RlZEZpbGVcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICBjb25zdCBkYXRhID0gbmV3IEZvcm1EYXRhKClcclxuICAgICAgICBkYXRhLmFwcGVuZCgnZmlsZScsIGltYWdlKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdmaWxlbmFtZScsIGltYWdlKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdkYXRhJywgZGF0YSlcclxuICAgICAgICBjb25zdCBpZCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKS51dGlsaXNhdGV1ci5pZFxyXG5cclxuICAgICAgICBheGlvc1xyXG4gICAgICAgICAgICAucG9zdChgaHR0cHM6Ly9wZXRzLWZyaWVuZGx5Lmhlcm9rdWFwcC5jb20vcGhvdG9zL3Byb2ZpbGUvYWpvdXQvdXRpbGlzYXRldXIvJHtpZH1gLCBkYXRhLCB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXJ0b2tlbicsIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmRhdGEpKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YSlcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIGltZ1VybDogcmVzcG9uc2UuZGF0YVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSlcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAvLyBjb21tZW50YWlyZSB0ZXN0XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdpbWFnZScsIHRoaXMuc3RhdGUudXJsSW1nKVxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb250YWluZXInPlxyXG5cclxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt0aGlzLnN0YXRlLnVybEltZ30gY2xhc3NOYW1lPSdpbWFnZS1wcm9maWwnIGFsdD0nQ2lucXVlIFRlcnJlJyAvPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2p1bWJvdHJvbiBtdC01IGJnLWxpZ2h0Jz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLXNtLTggbXgtYXV0byc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmVzdF92YWxpZGUgPyA8aDMgY2xhc3NOYW1lPSd0ZXh0LWNlbnRlciB0ZXh0LXN1Y2Nlc3MgJz4gVm90cmUgcHJvZmlsIGVzdCBhY3RpdsOpLCB2b3VzIHBvdXZleiBhY2PDqWRlciBhdXggc2VydmljZXM8L2gzPiA6IDxoMyBjbGFzc05hbWU9J3RleHQtY2VudGVyIHRleHQtZGFuZ2VyICc+Vm90cmUgcHJvZmlsIG4nZXN0IHBhcyBlbmNvcmUgdmFsaWRlICwgdm91cyBuJ2F2ZXogcGFzIGwnYWNjZXMgYSBub3Mgc2VydmljZXM8L2gzPn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT0ndGV4dC1jZW50ZXInPlBST0ZJTCA8L2gxPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8TGluayB0bz0nL3VwZGF0ZSc+IDxCdXR0b24gaWQ9J2JvdXRvbjEnPlVwZGF0ZSBQcm9maWw8L0J1dHRvbj48L0xpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89Jy9jb250cmF0cyc+IDxCdXR0b24gaWQ9J2JvdXRvbjEnPkFmZmljaGVyIGxlcyBjb250cmF0PC9CdXR0b24+PC9MaW5rPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPSd0YWJsZSBjb2wtbWQtNiBteC1hdXRvJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5QcsOpbm9tPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3RoaXMuc3RhdGUudXNlci5ub219PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk5vbTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLnVzZXIucHJlbm9tfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5FbWFpbDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLnVzZXIuZW1haWx9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPsOCZ2U8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS51c2VyLmFnZX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+U2V4ZTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLnVzZXIuc2V4ZX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+VMOpbMOpcGhvbmU8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS51c2VyLnRlbGVwaG9uZX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+TnVtw6lybyBkZSBsYSBydWU8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS5hZGRyZXNzLm51bWVyb19ydWV9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk5vbSBkZSBsYSBydWU8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS5hZGRyZXNzLm5vbV9ydWV9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkNvZGUgUG9zdGFsPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3RoaXMuc3RhdGUuYWRkcmVzcy5jb2RlX3Bvc3RhbH08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+VmlsbGU8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS5hZGRyZXNzLnZpbGxlfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5Qcm92aW5jZTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt0aGlzLnN0YXRlLmFkZHJlc3MucHJvdmluY2V9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlBheXM8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS5hZGRyZXNzLnBheXN9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPk51bcOpcm8gYXBwYXJ0ZW1lbnQ8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57dGhpcy5zdGF0ZS5hZGRyZXNzLm51bWVyb19hcHB0fTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qIGplIHZldXggcHVzaGVyIGNldHRlIHBhZ2UgYXVzc2kgKi99XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9J2RpdlBsdWJpY2l0ZTInPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9J3ctNTAgcC0zIG14LWF1dG8gaDEnPkRlcyBzZXJ2aWNlcyBzdXIgbWVzdXJlIHBvdXIgdW4gYW5pbWFsIGQnZXhlcHRpb24gPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncm93IGRpdkFubm9uY2UnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLWxnLTQgbXgtYXV0byBib3JkZXIgYm9yZGVyLWRhbmdlciByb3VuZGVkIHNlcnZpY2VQcm9wb3Nlcyc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1Db21wb25lbnQgdGV4dD0nRmFpdGVzIGdhcmRlciB2b3RyZSBhbmltYWwgw6Agdm90cmUgZG9taWNpbGUgb3Ugw6AgY2VsdWkgZHUgUGV0IFNpdHRlcicgY2xhc3NOYW1lPSdmYXMgZmEtY2hlY2snIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1Db21wb25lbnQgdGV4dD0nUGFydGV6IMOgIHZvdHJlIHJlbmRlei12b3VzIHNhbnMgdm91cyBzb3VjaWVyIGRlIGxhIHByb21lbmFkZSBkZSB2b3RyZSBjaGllbicgY2xhc3NOYW1lPSdmYXMgZmEtY2hlY2snIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1Db21wb25lbnQgdGV4dD0nQmVzb2luIGRlIGZsZXhpYmlsaXTDqT8gQ2hvaXNpc3NleiBsZXMgaG9yYWlyZXMgZXQgcMOpcmlvZGVzIHF1aSB2b3VzIGNvbnZpZW5uZW50JyBjbGFzc05hbWU9J2ZhcyBmYS1jaGVjaycgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtbGctNCBteC1hdXRvIGJvcmRlciBib3JkZXItZGFuZ2VyIHJvdW5kZWQgc2VydmljZVByb3Bvc2VzJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiBNRVRUUkUgVU4gSUNPTkUgREFOUyBMQVZBTlQgREUgTEVTIExJIFBPVVIgTEEgUFVCTElDSVRFUiAqL31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbUNvbXBvbmVudCB0ZXh0PSdUb3VzIGxlcyBub3V2ZWF1eCBnYXJkaWVucyBwYXNzZW50IHVuZSB2w6lyaWZpY2F0aW9uIGRlcyBhbnTDqWPDqWRlbnRzIGRlIGJhc2UnIGNsYXNzTmFtZT0nZmFzIGZhLWNoZWNrJyAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtQ29tcG9uZW50IHRleHQ9J1RvdXMgbGVzIGdhcmRpZW5zIGZvdXJuaXNzZW50IHVuIHByb2ZpbCBkw6l0YWlsbMOpIGV0IGRlcyBpbmZvcm1hdGlvbnMgcGVyc29ubmVsbGVzICcgY2xhc3NOYW1lPSdmYXMgZmEtY2hlY2snIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGlzdEl0ZW1Db21wb25lbnQgdGV4dD0nVG91cyBsZXMgUGV0IFNpdHRlciBzb250IGFncsOpw6lzIHBhciBub3RyZSDDqXF1aXBlIGRlIHNww6ljaWFsaXN0ZXMgY2hleiBQZXRzIEZyaWVuZGx5JyBjbGFzc05hbWU9J2ZhcyBmYS1jaGVjaycgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdpbmZvbGV0dHJlRGl2IG10LTMnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9J2gxJz5MYWlzc2V6IG5vdXMgdm91cyBwcsOpdmVuaXIgZGUgbm9zIG5vdXZlYXV0w6lzPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3NOYW1lPSdoNic+UmVzdGV6IGluZm9ybcOpPC9oNj5cclxuICAgICAgICAgICAgICAgICAgICA8Zm9ybT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0Q29tcG9uZW50IGNsYXNzQ3NzPSdmb3JtLWdyb3VwJyBjbGFzc0lucHV0PSdmb3JtLWNvbnRyb2wnIHRleHRMYWJlbD0nRW50cmV6IHZvdHJlIGVtYWlsJyB0eXBlPSdlbWFpbCcgaWQ9J2luZm9sZXR0cmUnIG5hbWU9J2luZm9sZXR0cmUnIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0Q29tcG9uZW50IGNsYXNzSW5wdXQ9J2J0biBidG4tb3V0bGluZS1kYW5nZXInIHR5cGU9J3N1Ym1pdCcgaWQ9J2luZm9sZXR0cmVCdXR0b24nIG5hbWU9J0Vudm95ZXIgJyB2YWx1ZT0nRW52b3llcicgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKFByb2ZpbGUpXHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xyXG5pbXBvcnQgJy4uL2Nzcy9wYXltZW50LmNzcydcclxuXHJcbmNsYXNzIFVwZGF0ZVByb2ZpbGUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgIHN1cGVyKClcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBpZDogJycsXHJcbiAgICAgICAgICAgIGlkX3JvbGU6ICcnLFxyXG4gICAgICAgICAgICBpZF9hZHJlc3M6ICcnLFxyXG4gICAgICAgICAgICBub206ICcnLFxyXG4gICAgICAgICAgICBtb3RfZGVfcGFzc2U6ICcnLFxyXG4gICAgICAgICAgICB1cmxJbWc6ICcnLFxyXG4gICAgICAgICAgICBwcmVub206ICcnLFxyXG4gICAgICAgICAgICBhZ2U6ICcnLFxyXG4gICAgICAgICAgICBlbWFpbDogJycsXHJcbiAgICAgICAgICAgIHNleGU6ICcnLFxyXG4gICAgICAgICAgICB0ZWxlcGhvbmU6ICcnLFxyXG4gICAgICAgICAgICBudW1lcm9fcnVlOiAnJyxcclxuICAgICAgICAgICAgbm9tX3J1ZTogJycsXHJcbiAgICAgICAgICAgIGNvZGVfcG9zdGFsOiAnJyxcclxuICAgICAgICAgICAgdmlsbGU6ICcnLFxyXG4gICAgICAgICAgICBwcm92aW5jZTogJycsXHJcbiAgICAgICAgICAgIHBheXM6ICcnLFxyXG4gICAgICAgICAgICBudW1lcm9fYXBwdDogJycsXHJcblxyXG4gICAgICAgICAgICB1c2VyOiBbXSxcclxuICAgICAgICAgICAgYWRkcmVzczogW10sXHJcblxyXG4gICAgICAgICAgICBlc3RfdmFsaWRlOiBmYWxzZSxcclxuICAgICAgICAgICAgc2VsZWN0ZWRGaWxlOiAnJyxcclxuICAgICAgICAgICAgZXJyb3JzOiB7fVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9uVG9kb0NoYW5nZSA9IHRoaXMub25Ub2RvQ2hhbmdlLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLnN1Ym1pdE1vZGlmaWVyID0gdGhpcy5zdWJtaXRNb2RpZmllci5iaW5kKHRoaXMpXHJcbiAgICAgICAgdGhpcy5maWxlU2VsZWN0ZWQgPSB0aGlzLmZpbGVTZWxlY3RlZC5iaW5kKHRoaXMpXHJcbiAgICAgICAgdGhpcy5maWxlVXBsb2FkID0gdGhpcy5maWxlVXBsb2FkLmJpbmQodGhpcylcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICAgICAgLy8gY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UudXNlcnRva2VuXHJcbiAgICAgICAgLy8gY29uc3QgZGVjb2RlZCA9IGp3dGRlY29kZSh0b2tlbilcclxuICAgICAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgdXNlcjogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLnV0aWxpc2F0ZXVyLFxyXG4gICAgICAgICAgICAgICAgYWRkcmVzczogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLmFkcmVzc2UsXHJcbiAgICAgICAgICAgICAgICBpZDogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLnV0aWxpc2F0ZXVyLmlkLFxyXG4gICAgICAgICAgICAgICAgbW90X2RlX3Bhc3NlOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSkudXRpbGlzYXRldXIubW90X2RlX3Bhc3NlLFxyXG4gICAgICAgICAgICAgICAgaWRfYWRyZXNzOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSkuYWRyZXNzZS5pZCxcclxuICAgICAgICAgICAgICAgIG51bWVyb19ydWU6IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKS5hZHJlc3NlLm51bWVyb19ydWUsXHJcbiAgICAgICAgICAgICAgICBub21fcnVlOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSkuYWRyZXNzZS5ub21fcnVlLFxyXG4gICAgICAgICAgICAgICAgaWRfcm9sZTogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLnV0aWxpc2F0ZXVyLmlkX3JvbGUsXHJcbiAgICAgICAgICAgICAgICBjb2RlX3Bvc3RhbDogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLmFkcmVzc2UuY29kZV9wb3N0YWwsXHJcbiAgICAgICAgICAgICAgICB2aWxsZTogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLmFkcmVzc2UudmlsbGUsXHJcbiAgICAgICAgICAgICAgICBwcm92aW5jZTogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLmFkcmVzc2UucHJvdmluY2UsXHJcbiAgICAgICAgICAgICAgICBwYXlzOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSkuYWRyZXNzZS5wYXlzLFxyXG4gICAgICAgICAgICAgICAgbnVtZXJvX2FwcHQ6IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKS5hZHJlc3NlLm51bWVyb19hcHB0LFxyXG4gICAgICAgICAgICAgICAgbm9tOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSkudXRpbGlzYXRldXIubm9tLFxyXG4gICAgICAgICAgICAgICAgcHJlbm9tOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSkudXRpbGlzYXRldXIucHJlbm9tLFxyXG4gICAgICAgICAgICAgICAgYWdlOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSkudXRpbGlzYXRldXIuYWdlLFxyXG4gICAgICAgICAgICAgICAgc2V4ZTogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLnV0aWxpc2F0ZXVyLnNleGUsXHJcbiAgICAgICAgICAgICAgICB0ZWxlcGhvbmU6IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKS51dGlsaXNhdGV1ci50ZWxlcGhvbmUsXHJcbiAgICAgICAgICAgICAgICBlc3RfdmFsaWRlOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSkudXRpbGlzYXRldXIuZXN0X3ZhbGlkZSxcclxuICAgICAgICAgICAgICAgIGVtYWlsOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSkudXRpbGlzYXRldXIuZW1haWwsXHJcbiAgICAgICAgICAgICAgICB1cmxJbWc6ICdodHRwOi8vcGV0cy1mcmllbmRseS5oZXJva3VhcHAuY29tL2ltYWdlcy9pbWFnZXNfcHJvZmlsZXMvJyArIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKS51dGlsaXNhdGV1ci51cmxfcGhvdG9cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCgnLycpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZpbGVTZWxlY3RlZCAoZSkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBzZWxlY3RlZEZpbGU6IGUudGFyZ2V0LmZpbGVzWzBdXHJcbiAgICAgICAgfSlcclxuICAgICAgICBjb25zb2xlLmxvZyhlLnRhcmdldC5maWxlc1swXSlcclxuICAgIH1cclxuXHJcbiAgICBzdWJtaXRNb2RpZmllciAoKSB7XHJcbiAgICAgICAgYXhpb3NcclxuICAgICAgICAgICAgLnB1dCgnaHR0cHM6Ly9wZXRzLWZyaWVuZGx5Lmhlcm9rdWFwcC5jb20vdXRpbGlzYXRldXJzL2NvbmZpZ3VyYXRpb24nLCB7XHJcbiAgICAgICAgICAgICAgICB1dGlsaXNhdGV1cjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLnN0YXRlLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkX3JvbGU6IHRoaXMuc3RhdGUuaWRfcm9sZSxcclxuICAgICAgICAgICAgICAgICAgICBub206IHRoaXMuc3RhdGUubm9tLFxyXG4gICAgICAgICAgICAgICAgICAgIHByZW5vbTogdGhpcy5zdGF0ZS5wcmVub20sXHJcbiAgICAgICAgICAgICAgICAgICAgYWdlOiB0aGlzLnN0YXRlLmFnZSxcclxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogdGhpcy5zdGF0ZS5lbWFpbCxcclxuICAgICAgICAgICAgICAgICAgICBtb3RfZGVfcGFzc2U6IHRoaXMuc3RhdGUubW90X2RlX3Bhc3NlLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdF9kZV9wYXNzZTogdGhpcy5zdGF0ZS5tb3RfZGVfcGFzc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc2V4ZTogdGhpcy5zdGF0ZS5zZXhlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbGVwaG9uZTogdGhpcy5zdGF0ZS50ZWxlcGhvbmVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhZHJlc3NlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMuc3RhdGUuaWRfYWRyZXNzLFxyXG4gICAgICAgICAgICAgICAgICAgIG51bWVyb19ydWU6IHRoaXMuc3RhdGUubnVtZXJvX3J1ZSxcclxuICAgICAgICAgICAgICAgICAgICBub21fcnVlOiB0aGlzLnN0YXRlLm5vbV9ydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY29kZV9wb3N0YWw6IHRoaXMuc3RhdGUuY29kZV9wb3N0YWwsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlsbGU6IHRoaXMuc3RhdGUudmlsbGUsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvdmluY2U6IHRoaXMuc3RhdGUucHJvdmluY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF5czogdGhpcy5zdGF0ZS5wYXlzLFxyXG4gICAgICAgICAgICAgICAgICAgIG51bWVyb19hcHB0OiB0aGlzLnN0YXRlLm51bWVyb19hcHB0XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQmllbiBNb2RpZmllcicsIHJlc3BvbnNlKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIG9uVG9kb0NoYW5nZSAoZSkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBbZS50YXJnZXQubmFtZV06IGUudGFyZ2V0LnZhbHVlIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZmlsZVVwbG9hZCAoZSkge1xyXG4gICAgICAgIGNvbnN0IGltYWdlID0gdGhpcy5zdGF0ZS5zZWxlY3RlZEZpbGVcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICBjb25zdCBkYXRhID0gbmV3IEZvcm1EYXRhKClcclxuICAgICAgICBkYXRhLmFwcGVuZCgnZmlsZScsIGltYWdlKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdmaWxlbmFtZScsIGltYWdlKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdkYXRhJywgZGF0YSlcclxuICAgICAgICBjb25zdCBpZCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKS51dGlsaXNhdGV1ci5pZFxyXG5cclxuICAgICAgICBheGlvc1xyXG4gICAgICAgICAgICAucG9zdChgaHR0cHM6Ly9wZXRzLWZyaWVuZGx5Lmhlcm9rdWFwcC5jb20vcGhvdG9zL3Byb2ZpbGUvYWpvdXQvdXRpbGlzYXRldXIvJHtpZH1gLCBkYXRhLCB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXJ0b2tlbicsIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmRhdGEpKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YSlcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIGltZ1VybDogcmVzcG9uc2UuZGF0YVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSlcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIgKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdzdGF0ZScsIHRoaXMuc3RhdGUudXJsSW1nKVxyXG4gICAgICAgIHJldHVybiAoXHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29udGFpbmVyJz5cclxuICAgICAgICAgICAgICAgIHsvKiBqZSB2ZXV4IHB1c2hlciBjZXR0ZSBwYWdlICovfVxyXG4gICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSdwb3N0JyBlbmNUeXBlPSdtdWx0aXBhcnQvZm9ybS1kYXRhJz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZm9ybS1ncm91cCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdleGFtcGxlRm9ybUNvbnRyb2xGaWxlMScgaWQ9J2xhYmVsMSc+TWV0dHJlIHVuZSBwaG90byBkZSBwcm9maWw8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0naW1hZ2UnIHR5cGU9J2ZpbGUnIGNsYXNzTmFtZT0nZm9ybS1jb250cm9sLWZpbGUgYnRuUGF5bWVudCcgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAncGluaycgfX0gaWQ9J2V4YW1wbGVGb3JtQ29udHJvbEZpbGUxJyBvbkNoYW5nZT17dGhpcy5maWxlU2VsZWN0ZWR9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPSdidG5QYXltZW50JyBvbkNsaWNrPXt0aGlzLmZpbGVVcGxvYWR9PlVwbG9hZDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9mb3JtPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jvdyc+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC03NSc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb250YWluZXJQYXltZW50Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtNTAnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtZC1mb3JtIG1iLTUnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZGF0YS1lcnJvcj0nd3JvbmcnIGRhdGEtc3VjY2Vzcz0ncmlnaHQnIGh0bWxGb3I9J2RlZmF1bHRGb3JtLWVtYWlsJz5Ub24gTm9tPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J3RleHQnIGNsYXNzTmFtZT0nZm9ybS1jb250cm9sIHZhbGlkYXRlJyBuYW1lPSdub20nIHZhbHVlPXt0aGlzLnN0YXRlLm5vbX0gb25DaGFuZ2U9e3RoaXMub25Ub2RvQ2hhbmdlfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J21kLWZvcm0gbWItNSc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBkYXRhLWVycm9yPSd3cm9uZycgZGF0YS1zdWNjZXNzPSdyaWdodCcgaHRtbEZvcj0nZGVmYXVsdEZvcm0tZW1haWwnPlRvbiBQcmVub208L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgY2xhc3NOYW1lPSdmb3JtLWNvbnRyb2wgdmFsaWRhdGUnIG5hbWU9J3ByZW5vbScgdmFsdWU9e3RoaXMuc3RhdGUucHJlbm9tfSBvbkNoYW5nZT17dGhpcy5vblRvZG9DaGFuZ2V9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbWQtZm9ybSBtYi01Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGRhdGEtZXJyb3I9J3dyb25nJyBkYXRhLXN1Y2Nlc3M9J3JpZ2h0JyBodG1sRm9yPSdkZWZhdWx0Rm9ybS1lbWFpbCc+VG9uIHNleGU8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgY2xhc3NOYW1lPSdmb3JtLWNvbnRyb2wgdmFsaWRhdGUnIG5hbWU9J3NleGUnIHZhbHVlPXt0aGlzLnN0YXRlLnNleGV9IG9uQ2hhbmdlPXt0aGlzLm9uVG9kb0NoYW5nZX0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtZC1mb3JtIG1iLTUnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZGF0YS1lcnJvcj0nd3JvbmcnIGRhdGEtc3VjY2Vzcz0ncmlnaHQnIGh0bWxGb3I9J2RlZmF1bHRGb3JtLWVtYWlsJz5Ub24gbnVtZXJvIGRlIHRlbGVwaG9uZSA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ndGVsJyBjbGFzc05hbWU9J2Zvcm0tY29udHJvbCB2YWxpZGF0ZScgbmFtZT0ndGVsZXBob25lJyB2YWx1ZT17dGhpcy5zdGF0ZS50ZWxlcGhvbmV9IG9uQ2hhbmdlPXt0aGlzLm9uVG9kb0NoYW5nZX0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtZC1mb3JtIG1iLTUnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZGF0YS1lcnJvcj0nd3JvbmcnIGRhdGEtc3VjY2Vzcz0ncmlnaHQnIGh0bWxGb3I9J2RlZmF1bHRGb3JtLWVtYWlsJz5Ub24gRW1haWw8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0nZW1haWwnIGNsYXNzTmFtZT0nZm9ybS1jb250cm9sIHZhbGlkYXRlJyBuYW1lPSdlbWFpbCcgdmFsdWU9e3RoaXMuc3RhdGUuZW1haWx9IG9uQ2hhbmdlPXt0aGlzLm9uVG9kb0NoYW5nZX0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLTUwJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbWQtZm9ybSBtYi01Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGRhdGEtZXJyb3I9J3dyb25nJyBkYXRhLXN1Y2Nlc3M9J3JpZ2h0JyBodG1sRm9yPSdkZWZhdWx0Rm9ybS1lbWFpbCc+TnVtZXJvIGRlIHJ1ZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdudW1iZXInIGNsYXNzTmFtZT0nZm9ybS1jb250cm9sIHZhbGlkYXRlJyBuYW1lPSdudW1lcm9fcnVlJyB2YWx1ZT17dGhpcy5zdGF0ZS5udW1lcm9fcnVlfSBvbkNoYW5nZT17dGhpcy5vblRvZG9DaGFuZ2V9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbWQtZm9ybSBtYi01Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGRhdGEtZXJyb3I9J3dyb25nJyBkYXRhLXN1Y2Nlc3M9J3JpZ2h0JyBodG1sRm9yPSdkZWZhdWx0Rm9ybS1lbWFpbCc+Tm9tIGRlIHJ1ZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBjbGFzc05hbWU9J2Zvcm0tY29udHJvbCB2YWxpZGF0ZScgbmFtZT0nbm9tX3J1ZScgdmFsdWU9e3RoaXMuc3RhdGUubm9tX3J1ZX0gb25DaGFuZ2U9e3RoaXMub25Ub2RvQ2hhbmdlfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncm93Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC01MCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZGF0YS1lcnJvcj0nd3JvbmcnIGRhdGEtc3VjY2Vzcz0ncmlnaHQnIGh0bWxGb3I9J2RlZmF1bHRGb3JtLWVtYWlsJz5Db2RlIFBvc3RhbDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgY2xhc3NOYW1lPSdmb3JtLWNvbnRyb2wgdmFsaWRhdGUnIG5hbWU9J2NvZGVfcG9zdGFsJyB2YWx1ZT17dGhpcy5zdGF0ZS5jb2RlX3Bvc3RhbH0gb25DaGFuZ2U9e3RoaXMub25Ub2RvQ2hhbmdlfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLTUwJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBkYXRhLWVycm9yPSd3cm9uZycgZGF0YS1zdWNjZXNzPSdyaWdodCcgaHRtbEZvcj0nZGVmYXVsdEZvcm0tZW1haWwnPlZpbGxlPC9sYWJlbD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgY2xhc3NOYW1lPSdmb3JtLWNvbnRyb2wgdmFsaWRhdGUnIG5hbWU9J3ZpbGxlJyB2YWx1ZT17dGhpcy5zdGF0ZS52aWxsZX0gb25DaGFuZ2U9e3RoaXMub25Ub2RvQ2hhbmdlfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jvdyc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtNTAnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGRhdGEtZXJyb3I9J3dyb25nJyBkYXRhLXN1Y2Nlc3M9J3JpZ2h0JyBodG1sRm9yPSdkZWZhdWx0Rm9ybS1lbWFpbCc+UHJvdmluY2U8L2xhYmVsPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBjbGFzc05hbWU9J2Zvcm0tY29udHJvbCB2YWxpZGF0ZScgbmFtZT0ncHJvdmluY2UnIHZhbHVlPXt0aGlzLnN0YXRlLnByb3ZpbmNlfSBvbkNoYW5nZT17dGhpcy5vblRvZG9DaGFuZ2V9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtNTAnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGRhdGEtZXJyb3I9J3dyb25nJyBkYXRhLXN1Y2Nlc3M9J3JpZ2h0JyBodG1sRm9yPSdkZWZhdWx0Rm9ybS1lbWFpbCc+UGF5czwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgY2xhc3NOYW1lPSdmb3JtLWNvbnRyb2wgdmFsaWRhdGUnIG5hbWU9J3BheXMnIHZhbHVlPXt0aGlzLnN0YXRlLnBheXN9IG9uQ2hhbmdlPXt0aGlzLm9uVG9kb0NoYW5nZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtZC1mb3JtIG1iLTUnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZGF0YS1lcnJvcj0nd3JvbmcnIGRhdGEtc3VjY2Vzcz0ncmlnaHQnIGh0bWxGb3I9J2RlZmF1bHRGb3JtLWVtYWlsJz5OdW1lcm8gYXBwYXJ0ZW1lbnQ8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0nbnVtYmVyJyBjbGFzc05hbWU9J2Zvcm0tY29udHJvbCB2YWxpZGF0ZScgbmFtZT0nbnVtZXJvX2FwcHQnIHZhbHVlPXt0aGlzLnN0YXRlLm51bWVyb19hcHB0fSBvbkNoYW5nZT17dGhpcy5vblRvZG9DaGFuZ2V9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPSdidG5QYXltZW50ICcgb25DbGljaz17dGhpcy5maWxlVXBsb2FkfT5Bbm51bGVyIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPSdidG5QYXltZW50ICcgb25DbGljaz17dGhpcy5zdWJtaXRNb2RpZmllcn0+VXBkYXRlIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBVcGRhdGVQcm9maWxlXHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCB7IHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5cclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xyXG5cclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xyXG5cclxuY2xhc3MgTGlzdENvbnRyYXQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKVxyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG5cclxuICAgICAgICAgICAgaWQ6ICcnLFxyXG5cclxuICAgICAgICAgICAgY29udHJhdHM6IFtdXHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICAvLyBjb25zdCB0b2tlbiA9IGxvY2FsU3RvcmFnZS51c2VydG9rZW5cclxuXHJcbiAgICAgICAgLy8gY29uc3QgZGVjb2RlZCA9IGp3dGRlY29kZSh0b2tlbilcclxuXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcblxyXG4gICAgICAgICAgICBpZDogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLnV0aWxpc2F0ZXVyLmlkXHJcblxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpIHtcclxuICAgICAgICAgICAgYXhpb3NcclxuXHJcbiAgICAgICAgICAgICAgICAuZ2V0KGBodHRwczovL3BldHMtZnJpZW5kbHkuaGVyb2t1YXBwLmNvbS9jb250cmF0cy9yZWN1cGVyYXRpb24vdXRpbGlzYXRldXIvJHtKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VydG9rZW4nKSkudXRpbGlzYXRldXIuaWR9YCwge1xyXG5cclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXNwb25zZScsIHJlc3BvbnNlKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyYXRzOiByZXNwb25zZS5kYXRhXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvJylcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWNjZXB0ZXJDb250cmF0KGNvbnRyYXQpIHtcclxuICAgICAgICBheGlvc1xyXG4gICAgICAgICAgICAucG9zdCgnaHR0cHM6Ly9wZXRzLWZyaWVuZGx5Lmhlcm9rdWFwcC5jb20vY29udHJhdHMvYWNjZXB0YXRpb24nLCB7XHJcbiAgICAgICAgICAgICAgICB1dGlsaXNhdGV1cjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkX3Byb3ByaWV0YWlyZTogY29udHJhdC5pZF9wcm9wcmlldGFpcmUsXHJcbiAgICAgICAgICAgICAgICAgICAgaWRfcGV0c2l0dGVyOiBjb250cmF0LmlkX3BldHNpdHRlclxyXG5cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjb250cmF0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWRfY29udHJhdDogY29udHJhdC5pZF9jb250cmF0LFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVfZGVidXQ6IGNvbnRyYXQuZGF0ZV9kZWJ1dCxcclxuICAgICAgICAgICAgICAgICAgICBkYXRlX2ZpbjogY29udHJhdC5kYXRlX2ZpblxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDb250cmF0IEFjY2VwdGVlJywgcmVzcG9uc2UpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdyZXNwb25zZScsIHRoaXMuc3RhdGUuaWQpXHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjb250cmF0JywgdGhpcy5zdGF0ZS5jb250cmF0cylcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPScnPlxyXG5cclxuICAgICAgICAgICAgICAgIDxoMT5Cb25qb3VyPC9oMT5cclxuXHJcbiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPSd0YWJsZSc+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDx0aGVhZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+aWRfY29udHJhdDwvdGg+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlByb3ByaWV0YWlyZTwvdGg+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlBldHNpdHRlcjwvdGg+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPmRhdGUgZGVidXQ8L3RoPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5kYXRlIGZpbjwvdGg+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPmVzdF9hY2NlcHRlPC90aD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+ZXN0X3Rlcm1pbmU8L3RoPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC90aGVhZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPHRib2R5PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuY29udHJhdHMubWFwKChjb250cmF0LCBpbmRleCkgPT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGtleT17aW5kZXh9PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPntjb250cmF0LmlkX2NvbnRyYXR9PC90ZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57Y29udHJhdC5ub21fcHJvcHJpZXRhaXJlICsgJywnICsgY29udHJhdC5wcmVub21fcHJvcHJpZXRhaXJlfTwvdGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e2NvbnRyYXQubm9tX3BldHNpdHRlciArICcsJyArIGNvbnRyYXQucHJlbm9tX3BldHNpdHRlcn08L3RkPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiB7Y29udHJhdC5kYXRlX2RlYnV0fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57Y29udHJhdC5kYXRlX2Zpbn08L3RkPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnshY29udHJhdC5lc3RfYWNjZXB0ZSA/IDxCdXR0b24gb25DbGljaz17ZSA9PiB0aGlzLmFjY2VwdGVyQ29udHJhdChjb250cmF0KX0+QWNjZXB0ZXI8L0J1dHRvbj4gOiA8QnV0dG9uPkFubnVsZXI8L0J1dHRvbj59PC90ZD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57Y29udHJhdC5lc3RfdGVybWluZSA/ICdUZXJtaW5lZSAnIDogJ1BhcyBFbmNvcmUgVGVybWluZWUnfTwvdGQ+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG5cclxuICAgICAgICAgICAgICAgIDwvdGFibGU+XHJcblxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKExpc3RDb250cmF0KVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5jb25zdCBTZXJ2aWNlRGVtYW5kZUNvbXBvbmVudCA9ICh7IGNsYXNzTmFtZUxpLCBjbGFzc0ljb25lLCBzZXJ2aWNlc1NpdHRlciwgc2VydmljZXNUb3RhbCB9KSA9PiAoXHJcbiAgICBzZXJ2aWNlc1NpdHRlci5tYXAoKGluZm9zLCBpbmRleCkgPT4ge1xyXG4gICAgICAgIHJldHVybiA8bGkgY2xhc3NOYW1lPXtjbGFzc05hbWVMaX0ga2V5PXtpbmRleH0+e3NlcnZpY2VzVG90YWxbaW5mb3MgLSAxXS5kZXNjcmlwdGlvbl9zZXJ2aWNlfTxwPntzZXJ2aWNlc1RvdGFsW2luZm9zIC0gMV0ucHJpeF9zZXJ2aWNlfTxpIGNsYXNzTmFtZT17Y2xhc3NJY29uZX0gLz48L3A+PC9saT5cclxuICAgIH0pXHJcbilcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlcnZpY2VEZW1hbmRlQ29tcG9uZW50XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmNvbnN0IEZlZWRCYWNrQ29tbWVudGFpcmUgPSAoeyBub21Qcm9wcmlldGFpcmUsIGRhdGVDb21tZW50YWlyZSwgY29tbWVudGFpcmUsIGRpdkNsYXNzIH0pID0+IChcclxuICAgIDxkaXYgY2xhc3NOYW1lPXtkaXZDbGFzc30+XHJcbiAgICAgICAgPGgzPntub21Qcm9wcmlldGFpcmV9PC9oMz5cclxuICAgICAgICA8aDQ+e2RhdGVDb21tZW50YWlyZX08L2g0PlxyXG4gICAgICAgIDxwPntjb21tZW50YWlyZX08L3A+XHJcbiAgICA8L2Rpdj5cclxuKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmVlZEJhY2tDb21tZW50YWlyZVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5jb25zdCBGYWN0dXJlRGVtYW5kZUNvbXBvbmVudCA9ICh7IHRleHQsIGNsYXNzTmFtZSwgY2xhc3NOYW1lVGV4dCwgc2VydmljZXNTaXR0ZXIsIHNlcnZpY2VzVG90YWwgfSkgPT4gKFxyXG5cclxuICAgIDxwIGNsYXNzTmFtZT17Y2xhc3NOYW1lVGV4dH0+e3RleHR9PGkgY2xhc3NOYW1lPXtjbGFzc05hbWV9IC8+PC9wPlxyXG5cclxuKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmFjdHVyZURlbWFuZGVDb21wb25lbnRcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgU2VydmljZURlbWFuZGVDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50L3NlcnZpY2VzLWRlbWFuZGUtY29tcG9uZW50J1xyXG5pbXBvcnQgRmVlZEJhY2tDb21tZW50YWlyZSBmcm9tICcuLi9jb21wb25lbnQvZmVlZGJhY2stY29tbWVudGFpcmUtY29tcG9uZW50J1xyXG5pbXBvcnQgRmFjdHVyZURlbWFuZGVDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50L2ZhY3R1cmUtZGVtYW5kZS1jb21wb25lbnQnXHJcbmltcG9ydCB7IHdpdGhSb3V0ZXIsIExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5pbXBvcnQgJy4uL2Nzcy9kZW1hbmRlLmNzcydcclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xyXG4vLyBpbXBvcnQgUGV0U2l0dGVySW5wdXQgZnJvbSAnY29tcG9uZW50L1BldFNpdHRlcklucHV0J1xyXG5cclxuY2xhc3MgUHJvZmlsRGVtYW5kZVBldHRTaXR0ZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcylcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgcmVjaGVyY2hlOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVzdWx0YXQ6IFtdLFxyXG4gICAgICAgICAgICBwcml4U2l0dGVyOiBbXSxcclxuICAgICAgICAgICAgc2VydmljZTogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2VydmljZVJlY2hlcmNoZScpKSxcclxuICAgICAgICAgICAgc2VydmljZXNUb3RhbDogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2VydmljZXN0b3RhbCcpKSxcclxuICAgICAgICAgICAgZGF0ZURlYnV0OiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdkYXRlRGVidXQnKSksXHJcbiAgICAgICAgICAgIGRhdGVGaW46IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2RhdGVGaW4nKSksXHJcbiAgICAgICAgICAgIHNpdHRlcjogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2l0dGVyJykpLFxyXG4gICAgICAgICAgICBwcm9wcmlldGFpcmU6IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5oYW5kbGVDbGljayA9IHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKVxyXG4gICAgICAgIHRoaXMuc2V0UHJvcHJpZXRhaXJlID0gdGhpcy5zZXRQcm9wcmlldGFpcmUuYmluZCh0aGlzKVxyXG4gICAgICAgIHRoaXMudW5zZXRQcm9wcmlldGFpcmUgPSB0aGlzLnVuc2V0UHJvcHJpZXRhaXJlKHRoaXMpXHJcbiAgICB9XHJcblxyXG4gICAgc2V0UHJvcHJpZXRhaXJlKCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBwcm9wcmlldGFpcmU6IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJ0b2tlbicpKSB9KVxyXG4gICAgfVxyXG5cclxuICAgIHVuc2V0UHJvcHJpZXRhaXJlKCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBwcm9wcmlldGFpcmU6IGZhbHNlIH0pXHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlQ2xpY2soKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goJy9wYXltZW50JylcclxuICAgICAgICAvKiAgcmV0dXJuIGF4aW9zXHJcbiAgICAgICAgICAgIC5wb3N0KCdodHRwczovL3BldHMtZnJpZW5kbHkuaGVyb2t1YXBwLmNvbS9jb250cmF0cy9jcmVhdGlvbicsIHtcclxuXHJcbiAgICAgICAgICAgICAgICB1dGlsaXNhdGV1cjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkX3Byb3ByaWV0YWlyZTogdGhpcy5zdGF0ZS5wcm9wcmlldGFpcmUudXRpbGlzYXRldXIuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgaWRfcGV0c2l0dGVyOiB0aGlzLnN0YXRlLnNpdHRlci5pZFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNvbnRyYXQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRlX2RlYnV0OiB0aGlzLnN0YXRlLmRhdGVEZWJ1dCxcclxuICAgICAgICAgICAgICAgICAgICBkYXRlX2ZpbjogdGhpcy5zdGF0ZS5kYXRlRmluXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2VydmljZTogdGhpcy5zdGF0ZS5zZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgcHJvbW90aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWRfcHJvbW90aW9uOiAxXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMocmVzcG9uc2UuZGF0YSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ0RlbWFuZGUgRW52b3llZScpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goJy8nKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGVtYW5kZSBwYXMgZW52b3llcicpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VycmV1ciByZWNoZXJjaGU6JywgZXJyKVxyXG4gICAgICAgICAgICB9KSAqL1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZVN1Ym1pdCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIG5pdmVhdVBldFNpdHRlcihuaXZlYXUpIHtcclxuICAgICAgICAgICAgbGV0IG5pdmVhdVNpdHRlciA9ICcnXHJcbiAgICAgICAgICAgIGlmIChuaXZlYXUgPiAwICYmIG5pdmVhdSA8IDUwKSB7XHJcbiAgICAgICAgICAgICAgICBuaXZlYXVTaXR0ZXIgPSAnRGVidXRhbnQnXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobml2ZWF1ID49IDUwICYmIG5pdmVhdSA8IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgbml2ZWF1U2l0dGVyID0gJ05vcm1hbCdcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChuaXZlYXUgPj0gMTAwICYmIG5pdmVhdSA8IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgbml2ZWF1U2l0dGVyID0gJ0ludGVybWVkaWFyZSdcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChuaXZlYXUgPj0gMjAwICYmIG5pdmVhdSA8IDQwMCkge1xyXG4gICAgICAgICAgICAgICAgbml2ZWF1U2l0dGVyID0gJ1Byb2ZmZXNpb25lbCdcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChuaXZlYXUgPj0gNDAwKSB7XHJcbiAgICAgICAgICAgICAgICBuaXZlYXVTaXR0ZXIgPSAnRXhwZXJ0J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBuaXZlYXVTaXR0ZXJcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc3Qgc2l0dGVyID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2l0dGVyJykpXHJcbiAgICAgICAgY29uc3Qgc2VydmljZXNUb3RhbCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NlcnZpY2VzdG90YWwnKSlcclxuICAgICAgICAvLyBjb25zdCB1c2VyID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFByaXhBdmFudFRheGVzKHByaXgpIHtcclxuICAgICAgICAgICAgbGV0IHByaXhBdmFudFRheGVzID0gMFxyXG4gICAgICAgICAgICBwcml4Lm1hcCgoaW5mb1ByaXgsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhwcml4KVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coc2VydmljZXNUb3RhbFtpbmZvUHJpeCAtIDFdLnByaXhfc2VydmljZSlcclxuICAgICAgICAgICAgICAgIHByaXhBdmFudFRheGVzID0gcHJpeEF2YW50VGF4ZXMgKyBzZXJ2aWNlc1RvdGFsW2luZm9Qcml4IC0gMV0ucHJpeF9zZXJ2aWNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJpeEF2YW50VGF4ZXNcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgcmV0dXJuIHByaXhBdmFudFRheGVzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIFRQUyhwcml4KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRwcyA9IFByaXhBdmFudFRheGVzKHByaXgpICogNSAvIDEwMFxyXG4gICAgICAgICAgICByZXR1cm4gdHBzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIFRWUShwcml4KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHR2cSA9IE1hdGguY2VpbChQcml4QXZhbnRUYXhlcyhwcml4KSAqIDkuOTc1IC8gMTAwKVxyXG4gICAgICAgICAgICByZXR1cm4gdHZxXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIFByaXhBdmVjVGF4ZXMocHJpeCkge1xyXG4gICAgICAgICAgICBjb25zdCBwcml4VG90YWwgPSBNYXRoLmNlaWwoUHJpeEF2YW50VGF4ZXMocHJpeCkgKyBUVlEocHJpeCkgKyBUUFMocHJpeCkpXHJcbiAgICAgICAgICAgIHJldHVybiBwcml4VG90YWxcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZmVlZGJhY2sgPSBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWVQcm9wcmlldGFpcmU6ICdDYXJsb3MnLFxyXG4gICAgICAgICAgICAgICAgZGF0ZUNvbW1lbnRhaXJlOiAnMjEvMDUvMjAyMCcsXHJcbiAgICAgICAgICAgICAgICBjb21tZW50YWlyZTogJ0Jvbm5lIHNpdHRlciwgZXhjZWxsZW50IHNlcnZpY2UgamUgbGEgcmVjb21tYW5kZSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZVByb3ByaWV0YWlyZTogJ01hcmlhJyxcclxuICAgICAgICAgICAgICAgIGRhdGVDb21tZW50YWlyZTogJzIxLzA4LzIwMTknLFxyXG4gICAgICAgICAgICAgICAgY29tbWVudGFpcmU6ICdCb25uZSBzaXR0ZXIsIGV4Y2VsbGVudCBzZXJ2aWNlIGplIGxhIHJlY29tbWFuZGUuIEVsbGUgYSB2cmFpbWVudCBiaWVuIHByaXMgc29pbiBkZSBub3RyZSBjaGF0ICdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZVByb3ByaWV0YWlyZTogJ1JpY2FyZG8nLFxyXG4gICAgICAgICAgICAgICAgZGF0ZUNvbW1lbnRhaXJlOiAnMjEvMDQvMjAxOCcsXHJcbiAgICAgICAgICAgICAgICBjb21tZW50YWlyZTogJ0Jvbm5lIHNpdHRlciwgbWFpcyBtYXV2YWlzZSBhdHRpdHVkZSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZVByb3ByaWV0YWlyZTogJ1N0ZWZhbmllJyxcclxuICAgICAgICAgICAgICAgIGRhdGVDb21tZW50YWlyZTogJzIxLzA1LzIwMjAnLFxyXG4gICAgICAgICAgICAgICAgY29tbWVudGFpcmU6ICdCb25uZSBzaXR0ZXIsIGV4Y2VsbGVudCBzZXJ2aWNlICwgdHJlcyAgYm9ubmUgYXR0aXR1ZGUgLCBqZSBmZXJhaSBlbmNvcmUgYWZmYWlyZSBhdmVjIGVsbGUnXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgXVxyXG4gICAgICAgIGNvbnN0IGZhY3R1cmUgPSBbXHJcbiAgICAgICAgICAgICdUb3RhbCBob3JzIHRheGVzIDonLFxyXG4gICAgICAgICAgICAnVFBTIDogJyxcclxuICAgICAgICAgICAgJ1RWUSA6ICcsXHJcbiAgICAgICAgICAgICdUT1RBTCBhdmVjIHRheGVzIDonXHJcblxyXG4gICAgICAgIF1cclxuICAgICAgICBjb25zb2xlLmxvZygnc2l0dGVyJywgdGhpcy5zdGF0ZSlcclxuICAgICAgICBjb25zb2xlLmxvZygnc2VydmljZScsIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NlcnZpY2VSZWNoZXJjaGUnKSkpXHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGVtYW5kZXdyYXBwZXInPlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT0naDEgdy0yNSBwLTMgbXgtYXV0byc+RGVtYW5kZSBTZXJ2aWNlIDwvaDE+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyb3cgbS01IGJnLXdoaXRlIGJvcmRlciBib3JkZXItZGFuZ2VyIHJvdW5kZWQgc2hhZG93Jz5cclxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0nLi4vc3JjL2ltZy9jYXJvdXNzZWwvaW1hZ2UxLmpwZWcnIGFsdD0nQ2FybG9zJyBjbGFzc05hbWU9J2ltZy1mbHVpZCByb3VuZGVkLWNpcmNsZSB3LTI1IHAtMycgLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbS01IGluZm9TaXR0ZXJXcmFwcGVyJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT0naDInPnt0aGlzLnN0YXRlLnNpdHRlci5ub219PC9oMj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT0naDYnPnt0aGlzLnN0YXRlLnNpdHRlci5zZWN0ZXVyX2FjdGlvbn08L2gzPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3NOYW1lPSdoNic+e25pdmVhdVBldFNpdHRlcih0aGlzLnN0YXRlLnNpdHRlci5yYXRpbmcpfTwvaDY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdidXR0b24nIHZhbHVlPSdDb250YWN0ZXInIGNsYXNzTmFtZT0nYnRuIGJ0bi1zdWNjZXNzIG0tMiBib3V0b25QZXRzaXR0ZXInIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdidXR0b24nIHZhbHVlPSdBaW1lcicgY2xhc3NOYW1lPSdidG4gYnRuLWRhbmdlciBtLTIgYm91dG9uUGV0c2l0dGVyJyAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NsZWFyZml4ICc+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J20tNSB3LTI1IHAzIGZsb2F0LWxlZnQgYm9yZGVyIGJvcmRlci1kYW5nZXIgcm91bmRlZCBzaGFkb3cgc2VydmljZUJveCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9J2gzIHctMjUgcC0zIG14LWF1dG8nPjxzdHJvbmc+U2VydmljZXM8L3N0cm9uZz4gPC9oMz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT0nbGlzdC1ncm91cCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VydmljZURlbWFuZGVDb21wb25lbnQgY2xhc3NOYW1lTGk9J2xpc3QtZ3JvdXAtaXRlbSBzZXJ2aWNlQm94JyBzZXJ2aWNlc1RvdGFsPXt0aGlzLnN0YXRlLnNlcnZpY2VzVG90YWx9IHNlcnZpY2VzU2l0dGVyPXt0aGlzLnN0YXRlLnNlcnZpY2V9IGNsYXNzSWNvbmU9J2ZhcyBmYS1kb2xsYXItc2lnbicgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nIG0tNSB3LTUwIHAtMyBmbG9hdC1yaWdodCBib3JkZXIgYm9yZGVyLWRhbmdlciByb3VuZGVkIHNoYWRvdyBjb21tZW50Qm94Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT0ndy0yNSBwLTMgbXgtYXV0byc+PHN0cm9uZz5Db21tZW50YWlyZXM8L3N0cm9uZz48L2gxPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7ZmVlZGJhY2subWFwKChpbmZvLCBpbmRleCkgPT4gPEZlZWRCYWNrQ29tbWVudGFpcmUgbm9tUHJvcHJpZXRhaXJlPXtpbmZvLm5hbWVQcm9wcmlldGFpcmV9IGRhdGVDb21tZW50YWlyZT17aW5mby5kYXRlQ29tbWVudGFpcmV9IGNvbW1lbnRhaXJlPXtpbmZvLmNvbW1lbnRhaXJlfSBrZXk9e2luZGV4fSBkaXZDbGFzcz0nIG0tMiBmZWVkYmFja0NvbW1lbnQnIC8+KX1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdib3JkZXIgYm9yZGVyLWRhbmdlciByb3VuZGVkIHNoYWRvdyBwcml4RXRTZXJ2aWNlV3JhcHBlcic+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9JyBoMiB3LTI1IHAtMyBteC1hdXRvJz5Qcml4IGRlcyBzZXJ2aWNlczwvaDI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Zsb2F0LWxlZnQgbS0yIHctMjUgcC0zJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtmYWN0dXJlLm1hcCgoaW5mb0ZhY3R1cmUsIGluZGV4KSA9PiA8RmFjdHVyZURlbWFuZGVDb21wb25lbnQgdGV4dD17aW5mb0ZhY3R1cmV9IGtleT17aW5kZXh9IC8+KX1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmxvYXQtcmlnaHQgbS0yIHctMjUgcC0zJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+e1ByaXhBdmFudFRheGVzKHRoaXMuc3RhdGUuc2VydmljZSl9PC9zdHJvbmc+PGkgY2xhc3NOYW1lPSdmYXMgZmEtZG9sbGFyLXNpZ24nIC8+PGkgY2xhc3NOYW1lPSdmYWIgZmEtY2FuYWRpYW4tbWFwbGUtbGVhZicgLz48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57VFBTKHRoaXMuc3RhdGUuc2VydmljZSl9PGkgY2xhc3NOYW1lPSdmYXMgZmEtZG9sbGFyLXNpZ24nIC8+PGkgY2xhc3NOYW1lPSdmYWIgZmEtY2FuYWRpYW4tbWFwbGUtbGVhZicgLz48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57VFZRKHRoaXMuc3RhdGUuc2VydmljZSl9PGkgY2xhc3NOYW1lPSdmYXMgZmEtZG9sbGFyLXNpZ24nIC8+PGkgY2xhc3NOYW1lPSdmYWIgZmEtY2FuYWRpYW4tbWFwbGUtbGVhZicgLz48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPntQcml4QXZlY1RheGVzKHRoaXMuc3RhdGUuc2VydmljZSl9PC9zdHJvbmc+PGkgY2xhc3NOYW1lPSdmYXMgZmEtZG9sbGFyLXNpZ24nIC8+PGkgY2xhc3NOYW1lPSdmYWIgZmEtY2FuYWRpYW4tbWFwbGUtbGVhZicgLz48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz0nL3BheW1lbnQnPiA8aW5wdXQgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nRW52b3llciBEZW1hbmRlJyBjbGFzc05hbWU9J2J0biBidG4tc3VjY2VzcyBwYXlCdXR0b24nIC8qIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9ICovIC8+PC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcbi8vIGNvbW1lbnQgcHVzaFxyXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKFByb2ZpbERlbWFuZGVQZXR0U2l0dGVyKVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcydcclxuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcbmltcG9ydCAnLi4vY3NzL3BheW1lbnQuY3NzJ1xyXG5pbXBvcnQgTW9kYWwgZnJvbSAnY29tcG9uZW50L21vZGFsJ1xyXG5jbGFzcyBQYXltZW50Rm9ybUNvbnRhaW5lciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKVxyXG5cclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBzZXJ2aWNlOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZXJ2aWNlUmVjaGVyY2hlJykpLFxyXG4gICAgICAgICAgICBzZXJ2aWNlc1RvdGFsOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZXJ2aWNlc3RvdGFsJykpLFxyXG4gICAgICAgICAgICBkYXRlRGVidXQ6IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2RhdGVEZWJ1dCcpKSxcclxuICAgICAgICAgICAgZGF0ZUZpbjogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZGF0ZUZpbicpKSxcclxuICAgICAgICAgICAgc2l0dGVyOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzaXR0ZXInKSksXHJcbiAgICAgICAgICAgIHByb3ByaWV0YWlyZTogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcnRva2VuJykpLFxyXG4gICAgICAgICAgICBwYWltZW50RmFpdDogJycsXHJcbiAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiAnJ1xyXG4gICAgICAgICAgICAvKiB2b2lyIHBvdXIgbGVzIHBhaW1lbnRzIGV0IGxhIGRlbWFuZGUgKi9cclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2sgPSB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLnNob3dNb2RhbCA9IHRoaXMuc2hvd01vZGFsLmJpbmQodGhpcylcclxuICAgICAgICB0aGlzLm9uSGFuZGxlb25DbG9zZSA9IHRoaXMub25IYW5kbGVvbkNsb3NlLmJpbmQodGhpcylcclxuICAgIH1cclxuXHJcbiAgICBzaG93TW9kYWwoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNob3c6IHRydWUgfSlcclxuICAgIH07XHJcblxyXG4gICAgb25IYW5kbGVvbkNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93OiBmYWxzZSB9KVxyXG4gICAgfTtcclxuXHJcbiAgICBoYW5kbGVDbGljaygpIHtcclxuICAgICAgICByZXR1cm4gYXhpb3NcclxuICAgICAgICAgICAgLnBvc3QoJ2h0dHBzOi8vcGV0cy1mcmllbmRseS5oZXJva3VhcHAuY29tL2NvbnRyYXRzL2NyZWF0aW9uJywge1xyXG5cclxuICAgICAgICAgICAgICAgIHV0aWxpc2F0ZXVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWRfcHJvcHJpZXRhaXJlOiB0aGlzLnN0YXRlLnByb3ByaWV0YWlyZS51dGlsaXNhdGV1ci5pZCxcclxuICAgICAgICAgICAgICAgICAgICBpZF9wZXRzaXR0ZXI6IHRoaXMuc3RhdGUuc2l0dGVyLmlkXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY29udHJhdDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVfZGVidXQ6IHRoaXMuc3RhdGUuZGF0ZURlYnV0LFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVfZmluOiB0aGlzLnN0YXRlLmRhdGVGaW5cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlOiB0aGlzLnN0YXRlLnNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgICBwcm9tb3Rpb246IHtcclxuICAgICAgICAgICAgICAgICAgICBpZF9wcm9tb3Rpb246IDFcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhyZXNwb25zZS5kYXRhKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLm1lc3NhZ2UgPSAnRGVtYW5kZSBwYXMgZW52b3llZSAnXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93TW9kYWwoKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFsZXJ0KCdEZW1hbmRlIEVudm95ZWUnKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvJylcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5tZXNzYWdlID0gJ0RlbWFuZGUgcGFzIGVudm95ZSB2ZXVpbGxleiBjb21tdW5pcXVlciBhdmVjIG5vdXMnXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93TW9kYWwoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KCdEZW1hbmRlIHBhcyBlbnZveWUgdmV1aWxsZXogY29tbXVuaXF1ZXIgYXZlYyBub3VzJylcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJldXIgcmVjaGVyY2hlOicsIGVycilcclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5zdGF0ZSlcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jvdyc+XHJcbiAgICAgICAgICAgICAgICA8TW9kYWwgb25IYW5kbGVvbkNsb3NlPXt0aGlzLm9uSGFuZGxlb25DbG9zZX0gc2hvdz17dGhpcy5zdGF0ZS5zaG93fT57dGhpcy5zdGF0ZS5tZXNzYWdlfTwvTW9kYWw+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLTc1Jz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29udGFpbmVyUGF5bWVudCc+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncm93Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtNTAnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5BZHJlc3NlIGRlIGZhY3R1cmF0aW9uPC9oMz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj0nZm5hbWUnPjxpIGNsYXNzTmFtZT0nZmEgZmEtdXNlcicgLz4gTm9tIGV0IHByw6lub208L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBpZD0nZm5hbWUnIG5hbWU9J2ZpcnN0bmFtZScgcGxhY2Vob2xkZXI9J0pvaG4gTS4gRG9lJyAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdlbWFpbCc+PGkgY2xhc3NOYW1lPSdmYSBmYS1lbnZlbG9wZScgLz4gRW1haWw8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBpZD0nZW1haWwnIG5hbWU9J2VtYWlsJyBwbGFjZWhvbGRlcj0nam9obkBleGFtcGxlLmNvbScgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj0nYWRyJz48aSBjbGFzc05hbWU9J2ZhIGZhLWFkZHJlc3MtY2FyZC1vJyAvPiBBZGRyZXNzZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J3RleHQnIGlkPSdhZHInIG5hbWU9J2FkZHJlc3MnIHBsYWNlaG9sZGVyPSc1NDIgVy4gMTV0aCBTdHJlZXQnIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9J2NpdHknPjxpIGNsYXNzTmFtZT0nZmEgZmEtaW5zdGl0dXRpb24nIC8+IFZpbGxlPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgaWQ9J2NpdHknIG5hbWU9J2NpdHknIHBsYWNlaG9sZGVyPSdOZXcgWW9yaycgLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jvdyc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtNTAnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3N0YXRlJz5Qcm92aW5jZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgaWQ9J3N0YXRlJyBuYW1lPSdzdGF0ZScgcGxhY2Vob2xkZXI9J05ZJyAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC01MCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj0nemlwJz5Db2RlLVBvc3RhbDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgaWQ9J3ppcCcgbmFtZT0nemlwJyBwbGFjZWhvbGRlcj0nMTAwMDEnIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC01MCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlBhaWVtZW50PC9oMz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj0nZm5hbWUnPkNhcnRlcyBhY2NlcHTDqWVzPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naWNvbi1jb250YWluZXInPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9J2ZhYiBmYS1jYy12aXNhJyBzdHlsZT17eyBjb2xvcjogJ25hdnknIH19IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT0nZmFiIGZhLWNjLWFtZXgnIHN0eWxlPXt7IGNvbG9yOiAnYmx1ZScgfX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPSdmYWIgZmEtY2MtbWFzdGVyY2FyZCcgc3R5bGU9e3sgY29sb3I6ICdyZWQnIH19IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT0nZmFiIGZhLWNjLWRpc2NvdmVyJyBzdHlsZT17eyBjb2xvcjogJ29yYW5nZScgfX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj0nY25hbWUnPk5vbSBkYW5zIGxhIGNhcnRlPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgaWQ9J2NuYW1lJyBuYW1lPSdjYXJkbmFtZScgcGxhY2Vob2xkZXI9J05vbSBkYW5zIGxhIGNhcnRlJyAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdjY251bSc+TnVtw6lybyBkZSBjYXJ0ZSA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBpZD0nY2NudW0nIG5hbWU9J2NhcmRudW1iZXInIHBsYWNlaG9sZGVyPScxMTExLTIyMjItMzMzMy00NDQ0JyAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdleHBtb250aCc+IERhdGUgZCdleHBpcmF0aW9uIChtb2lzKTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J3RleHQnIGlkPSdleHBtb250aCcgbmFtZT0nZXhwbW9udGgnIHBsYWNlaG9sZGVyPSdTZXB0ZW1iZXInIC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyb3cnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLTUwJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdleHB5ZWFyJz5EYXRlIGQnZXhwaXJhdGlvbiAoYW5uw6llKTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCcgaWQ9J2V4cHllYXInIG5hbWU9J2V4cHllYXInIHBsYWNlaG9sZGVyPScyMDE4JyAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC01MCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj0nY3Z2Jz5DVlY8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J3RleHQnIGlkPSdjdnYnIG5hbWU9J2N2dicgcGxhY2Vob2xkZXI9JzM1MicgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0nYnV0dG9uJyB2YWx1ZT0nRW52b3llciBkZW1hbmRlJyBjbGFzc05hbWU9J2J0blBheW1lbnQnIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQ2xpY2t9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoUGF5bWVudEZvcm1Db250YWluZXIpXHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcclxuXHJcbmltcG9ydCBBZG1pbkNvbnRhaW5lciBmcm9tICdjb250YWluZXIvYWRtaW4tY29udGFpbmVyLmpzJ1xyXG5pbXBvcnQgRm9ybUNvbnRhaW5lciBmcm9tICcuL2Zvcm0tY29udGFpbmVyJ1xyXG5pbXBvcnQgUmVjaGVyY2hlUGV0c2l0dGVyIGZyb20gJ2NvbnRhaW5lci9yZWNoZXJjaGVwZXRzaXR0ZXItY29udGFpbmVyJ1xyXG5pbXBvcnQgUHJvZmlsZSBmcm9tICdjb250YWluZXIvcHJvZmlsLmpzJ1xyXG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgU3dpdGNoLCBSb3V0ZSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcbmltcG9ydCBOYXZiYXIgZnJvbSAnLi4vY29udGFpbmVyL25hdmJhci1jb250YWluZXInXHJcbmltcG9ydCBGb290ZXIgZnJvbSAnLi4vY29tcG9uZW50L0Zvb3Rlci9Gb290ZXInXHJcbmltcG9ydCBVcGRhdGVQcm9maWxlIGZyb20gJy4vdXBkYXRlLXByb2ZpbCdcclxuaW1wb3J0IExpc3RDb250cmF0IGZyb20gJy4uL2NvbnRhaW5lci9saXN0LWNvbnRyYXQnXHJcbmltcG9ydCBQcm9maWxEZW1hbmRlUGV0dFNpdHRlciBmcm9tICcuLi9jb250YWluZXIvcHJvZmlsLWRlbWFuZGUtcGV0dHNpdHRlcidcclxuaW1wb3J0IFBheW1lbnRGb3JtQ29udGFpbmVyIGZyb20gJy4uL2NvbnRhaW5lci9wYXltZW50LWZvcm0tY29udGFpbmVyJ1xyXG5cclxuY2xhc3MgUGFnZVByaW5jaXBhbCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcylcclxuICAgICAgICB0aGlzLnNldHVwQmVmb3JlVW5sb2FkTGlzdGVuZXIgPSB0aGlzLnNldHVwQmVmb3JlVW5sb2FkTGlzdGVuZXIuYmluZCh0aGlzKVxyXG4gICAgfVxyXG5cclxuICAgIHNldHVwQmVmb3JlVW5sb2FkTGlzdGVuZXIgKCkge1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCAoZXYpID0+IHtcclxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndXNlcnRva2VuJylcclxuICAgICAgICB9KVxyXG4gICAgfTtcclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICAgICAgLy8gQWN0aXZhdGUgdGhlIGV2ZW50IGxpc3RlbmVyXHJcbiAgICAgICAgLy8gdGhpcy5zZXR1cEJlZm9yZVVubG9hZExpc3RlbmVyKClcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIgKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxSb3V0ZXI+XHJcblxyXG4gICAgICAgICAgICAgICAgPE5hdmJhciAvPlxyXG4gICAgICAgICAgICAgICAgPFN3aXRjaD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9Jy9zZWFyY2gnIGNvbXBvbmVudD17UmVjaGVyY2hlUGV0c2l0dGVyfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPScvYWRtaW4nIGNvbXBvbmVudD17QWRtaW5Db250YWluZXJ9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9Jy8nIGNvbXBvbmVudD17Rm9ybUNvbnRhaW5lcn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD0nL3Byb2ZpbCcgY29tcG9uZW50PXtQcm9maWxlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPScvdXBkYXRlJyBjb21wb25lbnQ9e1VwZGF0ZVByb2ZpbGV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9Jy9kZW1hbmRlJyBjb21wb25lbnQ9e1Byb2ZpbERlbWFuZGVQZXR0U2l0dGVyfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPScvcGF5bWVudCcgY29tcG9uZW50PXtQYXltZW50Rm9ybUNvbnRhaW5lcn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD0nL2NvbnRyYXRzJyBjb21wb25lbnQ9e0xpc3RDb250cmF0fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPScvZGVtYW5kZScgY29tcG9uZW50PXtQcm9maWxEZW1hbmRlUGV0dFNpdHRlcn0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD0nL3BheW1lbnQnIGNvbXBvbmVudD17UGF5bWVudEZvcm1Db250YWluZXJ9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgPC9Td2l0Y2g+XHJcblxyXG4gICAgICAgICAgICAgICAgPEZvb3RlciAvPlxyXG5cclxuICAgICAgICAgICAgPC9Sb3V0ZXI+XHJcblxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGFnZVByaW5jaXBhbFxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJ1xyXG5pbXBvcnQgUGFnZVByaW5jaXBhbCBmcm9tICdjb250YWluZXIvcGFnZS1wcmluY2lwYWwnXHJcbi8vIGltcG9ydCBQYWdlQWNjZXVpbCBmcm9tICdjb250YWluZXIvcGFnZS1hY2NldWlsLWNvbnRhaW5lcidcclxuLy8gaW1wb3J0IEFwcGxpY2F0aW9uQ29udGFpbmVyIGZyb20gJ2NvbnRhaW5lci9hcHBsaWNhdGlvbi1jb250YWluZXInXHJcblJlYWN0RE9NLnJlbmRlcihcclxuICAgIDxQYWdlUHJpbmNpcGFsIC8+LFxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpXHJcbilcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==