#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('src:server');
let http = require('http');
const mongo = require("../servers/MongoDb")

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

//-----------------------------------------------------------------------------------------------------------------------------
const io = require('socket.io')(server, { origin: "*:*" }) // obj pour gerer le chat

// gerer la connexion des sockets des utilisateurs
io.on('connection', function(socket){
  console.log("quelqu'un est connecte ----")

  socket.on("disconnect", function() {
    console.log("quelqu'un est deconnecte -------")
  })

  // joindre la room
  socket.on("join", function(data) {
    
    socket.join(data.id)
  })

  // reception message
  socket.on("nouveau_message", function(data){
    
    mongo.insererMessage(data)
    .then(resultatMessages => {
        io.to(data.idTo).emit("nouveau_message", data) // envoyer le msg au destinataire 
    })
    .catch(erreur => {
        io.to(data.idFrom).emit("nouveau_message", erreur) // changer nouveau_message et parler avec les gars d'Android de ca
    })
    
  })

  // entrain d'ecrire
  socket.on("entrain_ecriture", function(data){
    io.to(data.idTo).emit("entrain_ecriture", data) // emetteur entrain d'ecrire un message
  })

  // fin ecriture
  socket.on("fin_ecriture", function(data){
    io.to(data.idTo).emit("fin_ecriture", data) // emetteur entrain d'ecrire un message
  })
})

//-----------------------------------------------------------------------------------------------------------------------------

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


module.exports = {
  http,
  server
}